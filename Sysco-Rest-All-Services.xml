<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a081e9b8-b60d-4e26-bbcd-617b6adc7dc1" activeEnvironment="Default" name="Sysco-Rest-All-Services" soapui-version="5.1.3" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="5cbfdf8c-b572-47f3-83c9-d31dac0e037e" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint></con:endpoints><con:resource name="GetAllAccounts" path="/accounts" id="73998e90-8198-4cad-88a4-b11b32787ae7"><con:settings/><con:parameters><con:parameter><con:name>offset</con:name><con:value>0</con:value><con:style>QUERY</con:style><con:default>0</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>limit</con:name><con:value>100</con:value><con:style>QUERY</con:style><con:default>100</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetAllAccounts-Method" id="c270e821-fd72-4883-a70a-c6f19b11845f" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:acc="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts">acc:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:acc="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts">acc:Fault</con:element></con:representation><con:request name="GetAllAccounts-Request" id="2feb4042-334a-48ae-b7ca-1605b26eeb94" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>offset</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CreateNewAccount" path="/accounts" id="46034399-74b0-41dd-8c32-5c551efae5a4"><con:settings/><con:parameters/><con:method name="CreateNewAccount-Method" id="745027f8-e31e-4bc3-bfde-395ea03c4796" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 422 403</con:status><con:params/><con:element xmlns:acc="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts">acc:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:acc="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts">acc:Response</con:element></con:representation><con:request name="CreateNewAccount-Request" id="53bec436-d7e2-4e2b-8697-765b94bb4c2c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetAccountByCustomerId" path="/accounts/mine" id="cbb07288-46fa-452e-957d-752e690b0e3b"><con:settings/><con:parameters/><con:method name="GetAccountByCustomerId-Method" id="5754966c-181e-468a-9c74-26071f22a222" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:mine="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine">mine:Fault</con:element></con:representation><con:request name="GetAccountByCustomerId-Request" id="e3ef8ddd-be98-47ea-acd7-6c9585bcd65c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UpdateAccount" path="/accounts/mine" id="369216c1-a5cc-432a-b6c7-bf59881eec80"><con:settings/><con:parameters/><con:method name="UpdateAccount-Method" id="1161f5b1-5559-4070-ae20-c3808f485485" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:mine="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine">mine:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="UpdateAccount-Request" id="f3920feb-1456-4c65-940b-17d26507a157" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetGroups" path="/groups" id="f3f968ca-94d6-45d6-9011-15d796a2d7b0"><con:settings/><con:parameters><con:parameter><con:name>type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetGroups-Method" id="43a4b985-3704-43de-ba2e-205e4e029fec" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:gro="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups">gro:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:gro="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups">gro:Response</con:element></con:representation><con:request name="GetGroups-Request" id="32de6f1b-8298-43f5-a523-5c4decb17d0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="type" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>type</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CreateNewGroup" path="/groups" id="84d112b1-f504-4b88-92e4-fad203cfc9a3"><con:settings/><con:parameters/><con:method name="CreateNewGroup-Method" id="8341745c-429d-4dbb-be85-3b49195a9c06" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:gro="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups">gro:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:gro="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups">gro:Response</con:element></con:representation><con:request name="CreateNewGroup-Request" id="46cdcbde-27b8-430c-b73c-8f638d405b04" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request>{
  "name": "string",
  "type": "string",
  "storage": "string",
  "foodType": "string"
}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetGroupById" path="/groups/{groupId}" id="cc509276-aaef-4f82-a572-1e8ba4d74908"><con:settings/><con:parameters><con:parameter><con:name>groupId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetGroupById-Method" id="26de2562-af6b-4afc-9c1e-731282847e7f" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:bdat="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/%7BDataFile%23groupId%7D%20">bdat:Fault</con:element></con:representation><con:request name="GetGroupById-Request" id="cfac1aca-fae8-49a6-acbc-25dfcffe0f9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UpdateGroup" path="/groups/{groupId}" id="9cc435e8-e472-43af-8982-50454348ebec"><con:settings/><con:parameters><con:parameter><con:name>groupId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateGroup-Method" id="1a381579-ebfe-4227-aee7-1a8df3e54815" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:gro="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/">gro:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/12345">ns:Response</con:element></con:representation><con:request name="UpdateGroup-Request" id="1150ef90-4854-4337-a14d-d91725b99b34" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request>{
  "name": "group1",
  "storage": "Freezer"
}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetAllInventoriesForAnAccount" path="/inventories" id="5fe3ec9f-41c6-483d-8efe-6968ff09c090"><con:settings/><con:parameters/><con:method name="GetAllInventoriesForAnAccount-Method" id="5058e457-023c-47e3-886e-59342519a040" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:inv="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories">inv:Response</con:element></con:representation><con:request name="GetAllInventoriesForAnAccount-Request" id="7e782836-e489-4e82-ac3a-89b843a35200" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="CreateANewInventory" path="/inventories" id="b87fbc02-b5ac-49b3-9c44-f3a8e037ccaa"><con:settings/><con:parameters/><con:method name="CreateANewInventory-Method" id="f7452f86-9bf8-4323-a6d4-30996b10cebe" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:inv="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories">inv:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:inv="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories">inv:Response</con:element></con:representation><con:request name="CreateANewInventory-Request" id="ca67aff0-465b-417d-b275-d5dfd3858f04" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request>{
  "items": [
    {
      "id": "0010439",
      "sequenceNumber": 0,
      "quantity": 10,
      "unitOfMeasure": "lbs",
      "category": {
        "name": "appy",
        "foodType": "nonFood"
      },
      "location": "table",
      "pricePerUnit": 1
    }
  ]
}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs" path="/inventories/closed" id="3f8a4e01-3e98-483f-8f89-246d88193f4f"><con:settings/><con:parameters/><con:method name="GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs-Method" id="9fc6177c-c9df-460d-a1a2-a170542dce5b" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:clos="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/closed">clos:Response</con:element></con:representation><con:request name="GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs-Request" id="63dbca24-9392-411e-9237-c1a487867df1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetCurrentOpenInventory" path="/inventories/current" id="d91017f0-5cc8-4c20-93a5-053fb9f69b7d"><con:settings/><con:parameters><con:parameter><con:name>withAllProductAttributes</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter><con:parameter><con:name>withGroupDefinitions</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter><con:parameter><con:name>withProductAttribute</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetCurrentOpenInventory-Method" id="7182cac6-2ff4-48c1-b0e0-279e586e4b2b" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:cur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/currenttruetrue">cur:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/current">cur:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetCurrentOpenInventory-Request" id="cb263ce3-ef2e-4a55-951c-68ecb4284f33" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/currenttruetrue</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>withAllProductAttributes</con:entry><con:entry>withGroupDefinitions</con:entry><con:entry>withProductAttribute</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="InventoryValuesForClosedDates" path="/inventories/inventoryValues" id="abd1899f-c9b3-4990-b8ef-7bfa069430c1"><con:settings/><con:parameters><con:parameter><con:name>firstDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secondDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="InventoryValuesForClosedDates-Method" id="b4e0fc7d-9c4d-4424-a9c5-57917e125878" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:inv="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/inventoryValues">inv:Fault</con:element></con:representation><con:request name="InventoryValuesForClosedDates-Request" id="af08bb50-f0c0-4393-b7fc-dba9b26aca5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/inventoryValues</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>firstDate</con:entry><con:entry>secondDate</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetAllInventoryTimePeriods" path="/inventories/timePeriods" id="b5fd6f95-3f7b-49a0-9ce5-ef2bdacb8cef"><con:settings/><con:parameters/><con:method name="GetAllInventoryTimePeriods-Method" id="088622a4-11e8-47d4-a05e-4b47db95108f" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tim="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/timePeriods">tim:Response</con:element></con:representation><con:request name="GetAllInventoryTimePeriods-Request" id="bc8b4439-2ad0-450e-aba0-333ad619013c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetInventoryById" path="/inventories/{inventoryId}" id="982bb071-85bd-430b-9128-f3a5cbeb5a43"><con:settings/><con:parameters><con:parameter><con:name>inventoryId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetInventoryById-Method" id="48a41de8-68d2-483d-a4ab-42339681a293" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:inv="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories">inv:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:inv="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories">inv:Response</con:element></con:representation><con:request name="GetInventoryById-Request" id="6a84dbff-f18b-4c10-9fc1-9d3a8bb5c7b1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UpdateInventoryContents" path="/inventories/{inventoryId}" id="741123b6-527b-41f9-aec2-8737cf028174"><con:settings/><con:parameters><con:parameter><con:name>inventoryId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateInventoryContents-Method" id="5b74d02d-fcd7-4231-a89c-317752884a1f" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 400 422</con:status><con:params/><con:element xmlns:inv="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories">inv:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:inv="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories">inv:Response</con:element></con:representation><con:request name="UpdateInventoryContents-Request" id="ba03d136-55d9-43d7-aaff-5827313ee917" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request>{
  "items": [
    {
      "id": "string",
      "price": 0,
      "priceUom": "string",
      "groups": [
        {
          "groupId": "string",
          "sequence": 0,
          "quantity": 0,
          "quantityUom": "string"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CloseInventory" path="/inventories/{inventoryId}/complete" id="f89918a1-4a9a-4415-a6e5-a2fe8de8d501"><con:settings/><con:parameters><con:parameter><con:name>inventoryId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="CloseInventory-Method" id="c6de328b-6576-4676-9e6c-b9c0fc2e575a" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:com="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/426ecdc4-a17d-4846-bf1d-bcfeea92b01d/complete">com:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:com="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete">com:Fault</con:element></con:representation><con:request name="CloseInventory-Request" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetAllNonSyscoProducts&amp;PreparedItemsForAnAccount" path="/products" id="5e2c5035-5503-4276-81c7-d15692c518c7"><con:settings/><con:parameters><con:parameter><con:name>limit</con:name><con:value>20</con:value><con:style>QUERY</con:style><con:default>20</con:default></con:parameter><con:parameter><con:name>offset</con:name><con:value>0</con:value><con:style>QUERY</con:style><con:default>0</con:default></con:parameter><con:parameter><con:name>withProductAttribute</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetAllNonSyscoProducts&amp;PreparedItemsForAnAccount-Method" id="49306992-4358-4070-9f4d-78cef462093e" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:acc="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts">acc:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200 201</con:status><con:params/><con:element xmlns:inv="http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories">inv:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetAllNonSyscoProducts&amp;PreparedItemsForAnAccount-Request" id="6b3b39d2-103b-48b6-838c-bb671e8c2b2b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>limit</con:entry><con:entry>offset</con:entry><con:entry>withProductAttribute</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="InsertNonSyscoProductOrPreparedItem" path="/products" id="0890a309-0e26-4fd0-86f7-d7b59d8885a9"><con:settings/><con:parameters/><con:method name="InsertNonSyscoProductOrPreparedItem-Method" id="7b246bf3-a064-4051-9dc4-94685da645a2" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:prod="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products">prod:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="InsertNonSyscoProductOrPreparedItem-Request" id="df25ebeb-a6f9-406e-ac05-affe920f0014" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request>{
  "upc": "3278471",
  "productName": "Afuzzy",
  "vendor": "selappy",
  "brand": "appy",
  "pack": "15",
  "size": "3"
}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="GetProductByID" path="/products/{id}" id="b88c629e-e17e-4bba-ba5a-673a54ed955b"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetProductByID-Method" id="74f28743-14e2-4b2d-8c58-00df4a595c11" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:b91e="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/45992506-b91e-4762-8c78-7b446ad82ea6">b91e:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prod="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/">prod:Response</con:element></con:representation><con:request name="GetProductByID-Request" id="aea54b97-5d7e-4a2d-8778-e19f1814b3c1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UpdateAProduct" path="/products/{id}" id="755b201a-2536-445b-ae66-65af1b193778"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateAProduct-Method" id="8736c1b8-9bf2-4813-bb3f-5b525feed595" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:bc2f="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/3165bc2f-acc2-4ee0-a3d0-115c2c42452b">bc2f:Fault</con:element></con:representation><con:request name="UpdateAProduct-Request" id="257f5982-4cbc-4fad-80cd-df1975ccafcb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DeleteProduct" path="/products/{id}" id="6f2f324f-f671-4b00-bfaf-7e78a138abbf"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeleteProduct-Method" id="2fd324f7-a259-4f6d-a935-7f493d08ae04" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:cce9="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/103cce9f-0bd7-4a3f-b5bb-92030d52d082">cce9:Fault</con:element></con:representation><con:request name="DeleteProduct-Request" id="4896cf12-3f9c-4770-bcce-9cf9a8508848" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetListOfSuppliers" path="/suppliers" id="ac77d8ee-aea4-405a-a25d-285c1e9c0eed"><con:settings/><con:parameters/><con:method name="GetListOfSuppliers-Method" id="99f3fbf0-f8ef-48e0-b7ed-daaa52c644b0" method="GET"><con:settings/><con:parameters/><con:request name="GetListOfSuppliers-Request" id="0273178a-e7a3-4f9d-ab84-7aa756bda5ee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="CreateNewSupplier" path="/suppliers" id="821c2ca6-d1c4-433a-8543-75524b930502"><con:settings/><con:parameters/><con:method name="CreateNewSupplier-Method" id="a5e1806e-4fff-4342-9a5d-1d1f2f0c707c" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sup="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers">sup:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="CreateNewSupplier-Request" id="c140ed8d-662d-44db-9ad6-ba0ff2d70703" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request>{
  "name": "string",
  "contactInformation": {
    "address": "string",
    "contactName": "string",
    "emailAddress": "string",
    "phoneNumber": "string"
  },
  "notes": "string"
}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetASupplierById" path="/suppliers/{supplierId}" id="1d84856c-9d68-47bd-8035-cf4ddaeb9fd6"><con:settings/><con:parameters><con:parameter><con:name>supplierId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetASupplierById-Method" id="c86e7380-6737-4686-b948-a8f5a38d249a" method="GET"><con:settings/><con:parameters/><con:request name="GetASupplierById-Request" id="191ea909-0b88-4b64-8db2-5105aea92de7" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UpdateSupplier" path="/suppliers/{supplierId}" id="7c297e55-43c7-4585-8d50-c0884f5cac11"><con:settings/><con:parameters><con:parameter><con:name>supplierId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateSupplier-Method" id="12a598b5-d27a-4d1c-9936-a35513ca7bef" method="POST"><con:settings/><con:parameters/><con:request name="UpdateSupplier-Request" id="848f1b5f-0c6e-48b1-9f47-333aada87dc2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DeleteASupplier" path="/suppliers/{supplierId}" id="f7340536-fae1-496b-801b-9ba42b5ff46b"><con:settings/><con:parameters><con:parameter><con:name>supplierId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeleteASupplier-Method" id="65441235-e2fb-4fc1-b8c5-b7cb56baa788" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404 405</con:status><con:params/><con:element xmlns:fba1="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers/0fba1bbf-4d87-4289-905e-5b12e8107532">fba1:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DeleteASupplier-Request" id="84c6c8e7-7b7a-4696-8e75-3418f6639c37" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DeleteGroup" path="/groups/{groupId}" id="a98ac10f-3388-47b0-a206-48069eae7dca"><con:settings/><con:parameters><con:parameter><con:name>groupId</con:name><con:value>666624680067334</con:value><con:style>TEMPLATE</con:style><con:default>666624680067334</con:default></con:parameter></con:parameters><con:method name="DeleteGroup-Method 1" id="04a71e5a-cbe7-434c-969f-15ddbaa646e5" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:ns="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/666624680067334">ns:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="DeleteGroup-Request 1" id="dfb2f3c5-54b6-4f25-8f48-b6f18002e009" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/666624680067334</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetAllPurchases" path="/purchases" id="4e28d858-8eb7-4930-8860-5a197585cb54"><con:settings/><con:parameters><con:parameter><con:name>withSupplierDefinitions</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>fromDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>toDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetAllPurchases-Method" id="13c5244d-681e-4850-8020-f12035154c71" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:pur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases">pur:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases">pur:Response</con:element></con:representation><con:request name="GetAllPurchases-Request" id="b97b1184-0ab7-4125-9b20-ff092ff7acea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>withSupplierDefinitions</con:entry><con:entry>fromDate</con:entry><con:entry>toDate</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CreateAPurchase" path="/purchases" id="c4cf8abc-f3f0-4e21-b5f5-37c0715b4270"><con:settings/><con:parameters/><con:method name="CreateAPurchase-Method" id="f9accb55-f94f-40f7-a720-9a83838303c2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:pur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases">pur:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:pur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases">pur:Fault</con:element></con:representation><con:request name="CreateAPurchase-Request" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="CategorizeSyscoPurchases" path="/purchases/categorize" id="c1cc3588-8c80-41ab-8690-cd2753b769a4"><con:settings/><con:parameters/><con:method name="CategorizeSyscoPurchases-Method" id="cce39767-dbb0-4d37-80be-70ac1971aad1" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cat="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/categorize">cat:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="CategorizeSyscoPurchases-Request" id="4ef84e2e-bf7a-4b54-b81e-7beff5d1a31a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/categorize</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UpdateAPurchase" path="/purchases/{id}" id="30f72fe5-8acd-4fcf-b12d-85214e1ac036"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateAPurchase-Method" id="f26f10f8-8ae9-431a-9f89-f94b4f068a5e" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:pur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/">pur:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="UpdateAPurchase-Request" id="46a487d9-ce4d-4cdc-89fd-a92adeeb56ee" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DeletePurchase" path="/purchases/{id}" id="2fa2e147-f350-4aad-9e9f-7fc38d72c5a3"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeletePurchase-Method" id="956a1d61-b0bd-495a-bcec-173b29901b81" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:pur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/">pur:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="DeletePurchase-Request" id="f49e6c12-4973-4508-ae6e-f1e318afdc27" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetPurinventorychaseById" path="/purchases/{purchaseId}" id="1003a41c-0da0-428b-aa29-9ac31b8b8809"><con:settings/><con:parameters><con:parameter><con:name>purchaseId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetPurinventorychaseById-Method" id="c933fd50-d093-4ff0-a014-724d929fe673" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:pur="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/">pur:Fault</con:element></con:representation><con:request name="GetPurinventorychaseById-Request" id="c8c13625-b9cf-4417-b406-c4d9ea773d87" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>purchaseId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetRevenuesBetweenDates" path="/revenues" id="0fe45e8d-f9d3-4fab-8dd9-83dac7e13209"><con:settings/><con:parameters><con:parameter><con:name>startDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>endDate</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetRevenuesBetweenDates-Method" id="4f04395b-f4b8-4d4d-b326-39e685943225" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues">rev:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues">rev:Response</con:element></con:representation><con:request name="GetRevenuesBetweenDates-Request" id="69e71d7f-1bb5-4cf8-b769-59d3f3161b2c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>startDate</con:entry><con:entry>endDate</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CreateRevenue" path="/revenues" id="4e3cd869-cd4d-4ae8-b8ad-d01e7b01693a"><con:settings/><con:parameters/><con:method name="CreateRevenue-Method" id="0e5957f9-bb19-4cec-81e5-9d0f327b3dcb" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422 400 404</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues">rev:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues">rev:Response</con:element></con:representation><con:request name="CreateRevenue-Request" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetRevenueById" path="/revenues/{revenueId}" id="f6e4a2cf-81e4-44df-b019-b9a7cab9823b"><con:settings/><con:parameters><con:parameter><con:name>revenueId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetRevenueById-Method" id="356c99e0-2975-4ca8-bfbf-eb7dd1f80806" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/">rev:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/">rev:Fault</con:element></con:representation><con:request name="GetRevenueById-Request" id="93438a4d-c4bc-4de3-96cd-4f38743c8df0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UpdateRevenue" path="/revenues/{revenueId}" id="629be741-e955-417b-90d6-70cc25500d79"><con:settings/><con:parameters><con:parameter><con:name>revenueId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateRevenue-Method" id="b6890ab1-3136-4aab-89dc-81bbc533f066" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/">rev:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rev="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/">rev:Response</con:element></con:representation><con:request name="UpdateRevenue-Request" id="ebf8225e-8a6b-492b-9a76-bfae98b6281d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetAllFoodCostsForARangeAndOffset" path="/foodCosts" id="741a296e-8c0b-4c10-a9c5-a23f5160be20"><con:settings/><con:parameters><con:parameter><con:name>limit</con:name><con:value>20</con:value><con:style>QUERY</con:style><con:default>20</con:default></con:parameter><con:parameter><con:name>offset</con:name><con:value>0</con:value><con:style>QUERY</con:style><con:default>0</con:default></con:parameter></con:parameters><con:method name="GetAllFoodCostsForARangeAndOffset-Method" id="e9c3a047-661d-41bb-8b64-c7eec67304a1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:food="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/foodCosts">food:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:food="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/foodCosts">food:Response</con:element></con:representation><con:request name="GetAllFoodCostsForARangeAndOffset-Request" id="a0ba8283-4c65-4e48-ae37-729a099f5d62" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/foodCosts</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="3664c073-790c-47fb-b61f-87104f6438a7" name="GroovyLib"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="cd69ed65-25f6-40e0-9508-8035d187b7c3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Library" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ReadFromExcel" id="bad5f5ab-3895-4f5f-b72c-e65f4b565640"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

class ReadFromExcel {
    def log
    def context
    def testRunner

    /**
     * This is the main method which is used for getting the context for the Calling classes from the groovy test steps.
     * @param logIn,contextIn,testRunnerIn.
     * @return Nothing.   
     */
    def ReadFromExcel(logIn, contextIn, testRunnerIn) {
        this.log = logIn
        this.context = contextIn
        this.testRunner = testRunnerIn
    }

    /**
     * This method is used to read the data from the excel sheet and set the data in the property step
     * @param excelName,sheetName,columnNumber,propertyName.
     * @return Nothing.   
     */
    def readDataAndSetAsProperty(String excelName, String sheetName,int columnNumber,String propertyName,def testcaseName) {
        try {         	  	
        	Workbook excelSheet = Workbook.getWorkbook(new File(excelName));
		Sheet sheet = excelSheet.getSheet(sheetName);
		int rowcount = sheet.getRows();
		int dataCount = 1;
		for(int i = 1; i &lt; rowcount;i++){						
			Cell testCaseNameIndex = sheet.getCell(0,i);
			def testCaseNameValue = testCaseNameIndex.getContents();								
			if(testCaseNameValue == testcaseName ){	
				log.info("testCaseNameValue:::::"+ testCaseNameValue);
				log.info("testcaseName::::::"+ testcaseName);	
				def data = testRunner.testCase.getTestStepByName( "Data" );
				if(data == null)
				{
					testRunner.testCase.addTestStep( "properties", "Data" );
					data = testRunner.testCase.getTestStepByName( "Data" );
				}					
									
				Cell cellindex = sheet.getCell(columnNumber,i);
				def cellDataValue = cellindex.getContents();
				log.info cellDataValue;					
				testRunner.testCase.getTestStepByName('Data').setPropertyValue(propertyName+dataCount,cellDataValue);
				dataCount++;				
			}
		}
		testRunner.testCase.getTestStepByName('Data').setPropertyValue("rowcount",(dataCount-1).toString());	
		      
        } catch (Exception e) {}
        
    }
}
context.setProperty("ReadFromExcel", new ReadFromExcel(log, context, testRunner))
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="CreateReportFile" id="8b55f5f0-f415-4334-a8d3-cae261e8e5d1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep


class CreateReportFile {
    def log
    def context
    def testRunner

    /**
     * This is the main method which is used for getting the context for the Calling classes from the groovy test steps.
     * @param logIn,contextIn,testRunnerIn.
     * @return Nothing.   
     */
    def CreateReportFile(logIn, contextIn, testRunnerIn) {
        this.log = logIn
        this.context = contextIn
        this.testRunner = testRunnerIn
    }

    /**
     * This method creates the report with the specified report name in the specified path 
     * @param reportPath,reportName.
     * @return Nothing.  
     */
    def CreateReport(String reportPath, String reportName) {
    	
	try{
		String timestamp = new Date().toTimestamp().toString()
	     def name =  reportPath+"\\\\"+reportName +"_"+timestamp.substring(0,16).replaceAll("-","").replaceAll(" ","").replaceAll(":","")+".xls";
		
		WritableWorkbook reportBook = Workbook.createWorkbook(new File(name))
		WritableSheet reportSheet = reportBook.createSheet("Report", 0) 
		WritableFont cellFont = new WritableFont(WritableFont.TIMES,12);
		cellFont.setBoldStyle(WritableFont.BOLD); 
		WritableCellFormat cellFormat = new WritableCellFormat(cellFont);
		cellFormat.setWrap(true); 
		reportSheet.setColumnView(0, 20);
		reportSheet.setColumnView(1, 25);
		reportSheet.setColumnView(2, 15);
		reportSheet.setColumnView(3, 30);
		reportSheet.setColumnView(4, 20);
		reportSheet.setColumnView(5, 100);	
		Label label0 = new Label(0, 0, "TestCaseName",cellFormat);
		Label label1 = new Label(1, 0, "Date",cellFormat);
		Label label2 = new Label(2, 0, "Status",cellFormat);
		Label label3 = new Label(3, 0, "Assertion Details",cellFormat);
		Label label4 = new Label(4, 0, "ResponseTime",cellFormat);
		Label label5 = new Label(5, 0, "Response",cellFormat);
	     reportSheet.addCell(label0);
		reportSheet.addCell(label1);
		reportSheet.addCell(label2);
		reportSheet.addCell(label3);
		reportSheet.addCell(label4);
		reportSheet.addCell(label5);
		reportBook.write();
		reportBook.close(); 
		log.info("REPORT SHEET CREATED")

		
		def data = testRunner.testCase.getTestStepByName( "Data" );
		if(data == null)
		{
			testRunner.testCase.testSuite.addProperty("reportName");
			testRunner.testCase.testSuite.setPropertyValue("reportName",name); 		      
		} 
		else {
			testRunner.testCase.testSuite.setPropertyValue("reportName",name);  
		}
	} catch(Exception e){
		log.info(e);
		}
    }
        
}
context.setProperty("CreateReportFile", new CreateReportFile(log, context, testRunner))
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="GenerateReport" id="c4b4126d-7018-4784-962f-542f32e29bc6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep



class GenerateReport {
    def log
    def context
    def testRunner

    /**
     * This is the main method which is used for getting the context for the Calling classes from the groovy test steps.
     * @param logIn,contextIn,testRunnerIn.
     * @return Nothing.   
     */
    def GenerateReport(logIn, contextIn, testRunnerIn) {
        this.log = logIn
        this.context = contextIn
        this.testRunner = testRunnerIn
    }

    /**
     * This method is used to upadate the report with the specified test cases results and details.
     * @param excelName,testStepName,testStatus.
     * @return Nothing.   
     */
    def writeToExcel(String excelName,List restTestStepList,List restStepsStatusList,boolean isSyscoProduct) {
      try {
		// get the testStep for adding assertion status
		def assertionStatus = "";
		def restResponse="";
		def responseTime ="";
		def testStatus;
		
		//////find the status from the restStepsStatusList //////		
		for(int j = 0 ; j &lt; restStepsStatusList.size();j++){
			String finalStatus = restStepsStatusList.get(j);
			int index = j+1;
			log.info("STATUS OF STEP "+ index +":::"+finalStatus);
			if(finalStatus.equals("OK")){
				testStatus = "PASSED";
			} else {
				testStatus = "FAILED";
				break;
			}
		}

		//////find the response and response time from the restTestStepList //////	
		for(int i = 0; i &lt; restTestStepList.size();i++){
			def restStep = restTestStepList.get(i);
			def testStep = testRunner.testCase.getTestStepByName(restStep)
			// print assertion names an its status
			testStep.getAssertionList().each{
				def errors = "$it.assertionErrors";		
	    			assertionStatus = assertionStatus + restStep +" - $it.label - $it.status - "+errors.minus("null")+" \n";			      
			}
			restResponse = restResponse + restStep +"-Response::"+testRunner.testCase.testSteps[restStep].testRequest.response.contentAsString+"\n";
			responseTime = testRunner.testCase.testSteps[restStep].testRequest.response.timeTaken;
		}
      	///////////////////////end of assertion messages////////////////////////////////////////////
      	
    		Workbook existingWorkbook = Workbook.getWorkbook(new File(excelName));
   		WritableWorkbook copy = Workbook.createWorkbook(new File(excelName), existingWorkbook);
    		WritableSheet reportSheet = copy.getSheet(0);
    		int rowcount = reportSheet.getRows();
    		existingWorkbook.close();
    		
	    def currentDate = new Date().format("yyyy-MM-dd hh:mm");	    
	    WritableFont cellFont = new WritableFont(WritableFont.TIMES, 10);	    
	    WritableCellFormat cellFormat = new WritableCellFormat(cellFont);
	    if(isSyscoProduct){
	    		cellFormat.setBackground(Colour.LIGHT_GREEN);
	    }
	    cellFormat.setBorder(Border.ALL, BorderLineStyle.THICK);
	    cellFormat.setWrap(true);
	    reportSheet.setColumnView(0, 20);
	    reportSheet.setColumnView(1, 25);
	    reportSheet.setColumnView(2, 15);
	    reportSheet.setColumnView(3, 30);
	    reportSheet.setColumnView(4, 20);
	    reportSheet.setColumnView(5, 100);
	    Label label0 = new Label(0, rowcount, testRunner.testCase.name, cellFormat);
	    Label label1 = new Label(1, rowcount, currentDate, cellFormat);
	    Label label2 = new Label(2, rowcount, testStatus, cellFormat);
	    Label label3 = new Label(3, rowcount, assertionStatus, cellFormat);
	    Label label4 = new Label(4, rowcount, responseTime.toString(), cellFormat);
	    Label label5 = new Label(5, rowcount, restResponse, cellFormat);
	    reportSheet.addCell(label0);
	    reportSheet.addCell(label1);
	    reportSheet.addCell(label2);
	    reportSheet.addCell(label3);
	    reportSheet.addCell(label4);
	    reportSheet.addCell(label5);
	    copy.write();
	    copy.close();	    
	} catch (Exception e) {
		log.info(e);	
	    	
		}         	
}
}
context.setProperty("GenerateReport", new GenerateReport(log, context, testRunner))
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="ValueAssertion" id="28793fcd-2b5a-40d5-baa5-8ff76951052d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

class ValueAssertion {
    def log
    def context
    def testRunner

    /**
     * This is the main method which is used for getting the context for the Calling classes from the groovy test steps.
     * @param logIn,contextIn,testRunnerIn.
     * @return Nothing.   
     */
    def ValueAssertion(logIn, contextIn, testRunnerIn) {
        this.log = logIn
        this.context = contextIn
        this.testRunner = testRunnerIn
    }

    /**
     * This method verifies the Site/Model/ Device API data received from the service satisfying the Start and End dates and compares the 
     * Header Count and Total value with the datasheet data and returns the status message.
     * @param testResponse,testStepName,excelDataPath,sheetNameValue.
     * @return String.   
     */
    def String compareStrings(String testStepName, String propertyName,String compareValue) {
        try { 
        	String assertionStatus = "The compared data are not matching";
        	def restResponse = testRunner.testCase.testSteps[testStepName].testRequest.response.contentAsString;		
    		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
		def holder = groovyUtils.getXmlHolder(testRunner.testCase.testSteps[testStepName].testRequest.response.getContentAsXml());		
		
		def propertyData= holder["//"+propertyName+""];
		log.info("propertyData::::"+propertyData);
		log.info("compareValue::::"+compareValue);
		if(propertyData.equals(compareValue)){
			assertionStatus = "The compared data are matching";;
		}
        	return assertionStatus;
        } catch (Exception e) {
        		log.info(e);
        	}
        
    }
}
context.setProperty("ValueAssertion", new ValueAssertion(log, context, testRunner))
log.info "Library Context:" + context</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="35371bc1-b7f5-4944-9756-4059a07c1cc9" name="Run_Suites"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b051b4f6-6794-4dbd-9db0-f9db9ed630d6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Run_Suites" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Run" id="359621c5-f5f6-47be-b430-60f3e021aa89"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep



try { 
	
	def sys = System.getProperty("user.home").replace("\\","\\\\");
	log.info("USER HOME PATH:::::"+sys);
	def excelName = sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\EndPoint.xls";
	def sheetName = "Data";
	      	
	Workbook excelSheet = Workbook.getWorkbook(new File(excelName));
	Sheet sheet = excelSheet.getSheet(sheetName);
	int rowcount = sheet.getRows();
	
	
	for(int i = 1; i &lt; rowcount;i++){
		log.info("ROW COUNT::::::::"+rowcount);	
		log.info("ITERATION:::::::"+i);
		//flush old data
		try{
			def tc = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
			def ts = tc.getTestStepByName("Data");	
			tc.removeTestStep(ts);

			def tc1 = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"];
			def ts1 = tc1.getTestStepByName("Data");	
			tc1.removeTestStep(ts1);

			def tc2 = testRunner.testCase.testSuite.project.testSuites["#491_UserStories"].testCases["Config"];
			def ts2 = tc2.getTestStepByName("Data");	
			tc1.removeTestStep(ts2);

			def tc3 = testRunner.testCase.testSuite.project.testSuites["#559_UserStories"].testCases["Config"];
			def ts3 = tc3.getTestStepByName("Data");	
			tc1.removeTestStep(ts3);
			
		} catch(Exception e){}
		//end of flush old data							
		Cell endPointIndex = sheet.getCell(1,i);
		def endPointValue = endPointIndex.getContents();
		Cell dataSheetNameIndex = sheet.getCell(2,i);
		def dataSheetNameValue = dataSheetNameIndex.getContents();
		Cell tabNameIndex = sheet.getCell(3,i);
		def tabNameValue = tabNameIndex.getContents();
		Cell invReportNameIndex = sheet.getCell(4,i);
		def invReportNameValue = invReportNameIndex.getContents();

		log.info("endPointValue::"+endPointValue);
		log.info("dataSheetNameValue::"+dataSheetNameValue);
		log.info("tabNameValue::"+tabNameValue);
		log.info("invReportNameValue::"+invReportNameValue);
		
		//Add Test Step Data
		testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].addTestStep( "properties", "Data" );				
					
		testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("singleRun1","false");			
		testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("endPoint1",endPointValue);
		testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("dataSheetName1",dataSheetNameValue);
		testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("tabName1",tabNameValue);
		testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("reportName1",invReportNameValue);

		Cell allSrvcsReportNameIndex = sheet.getCell(5,i);
		def allSrvcsReportNameValue = allSrvcsReportNameIndex.getContents();

		//Add Test Step Data
		testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].addTestStep( "properties", "Data" );				
					
		testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName("Data").setPropertyValue("singleRun1","false");		
		testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName("Data").setPropertyValue("endPoint1",endPointValue);
		testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName("Data").setPropertyValue("dataSheetName1",dataSheetNameValue);
		testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName("Data").setPropertyValue("tabName1",tabNameValue);
		testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName("Data").setPropertyValue("reportName1",allSrvcsReportNameValue);

		def inventorySuite = testRunner.testCase.testSuite.project.testSuites["Inventory"];
		log.info(inventorySuite);
		log.info("::RUNNING INVENTORY SUITE::");
		runner = inventorySuite.run(null,false);

		def allServicesSuite = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"];
		log.info(allServicesSuite);
		log.info("::RUNNING ALL SERVICES SUITE::");
		runner = allServicesSuite.run(null,false);

		def UserStory_491Suite = testRunner.testCase.testSuite.project.testSuites["#491_UserStories"];
		log.info(UserStory_491Suite);
		log.info("::RUNNING UserStory_491 SUITE::");
		runner = UserStory_491Suite.run(null,false);

		def UserStory_559Suite = testRunner.testCase.testSuite.project.testSuites["#559_UserStories"];
		log.info(UserStory_559Suite);
		log.info("::RUNNING UserStory_559 SUITE::");
		runner = UserStory_559Suite.run(null,false);

		//flush old data
		try{
			def tc = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
			def ts = tc.getTestStepByName("Data");	
			tc.removeTestStep(ts);

			def tc1 = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"];
			def ts1 = tc1.getTestStepByName("Data");	
			tc1.removeTestStep(ts1);

			def tc2 = testRunner.testCase.testSuite.project.testSuites["#491_UserStories"].testCases["Config"];
			def ts2 = tc2.getTestStepByName("Data");	
			tc1.removeTestStep(ts2);

			def tc3 = testRunner.testCase.testSuite.project.testSuites["#559_UserStories"].testCases["Config"];
			def ts3 = tc3.getTestStepByName("Data");	
			tc1.removeTestStep(ts3);
			
		} catch(Exception e){
			log.print(e);
			}
		//end of flush old data		
			
	}
	log.info("::RAN ALL THE ROWS::");
	
      
} catch (Exception e) {
	log.print(e);
	}
        
   
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="7f1a425f-f8b0-4cd0-bcc2-482460719cfa" name="Inventory" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b45b0a35-a456-490e-8160-d00689e460a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Config" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SetConfigurations" id="e88717f2-eebb-448e-bf7a-7233a9052423"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel

def singleRun = context.expand( '${Data#singleRun1}' );
log.info("singleRun::::::::::::"+singleRun);
if(singleRun == ""){
	singleRun = "true";
}

if(singleRun == "false"){
	
	log.info("::::::MULTIPLE RUN::::::");
	def endPointValue = context.expand( '${Data#endPoint1}' );
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
} else {
	log.info("SINGLE RUN::::::");
	def sys = System.getProperty("user.home").replace("\\","\\\\");
	def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\EndPoint.xls";
	def sheetName = "Data";	
	
	//flush old data
	def fl_testCase = testRunner.testCase;
	def fl_testStep = fl_testCase.getTestStepByName("Data");
	try{
		fl_testCase.removeTestStep(fl_testStep);
	} catch(Exception e){}
	
	//end of flush old data	
	
	def testcaseName = context.testCase.name;
	def propertyName1 = "endPoint"
	int columnNumber1 = 1;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	
	
	def endPointValue = context.expand( '${Data#endPoint1}' );
	
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
	
	def propertyName2 = "dataSheetName"
	int columnNumber2 = 2;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);
	
	def propertyName3 = "tabName"
	int columnNumber3 = 3;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);
	
	def propertyName4 = "reportName"
	int columnNumber4 = 4;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

	testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("singleRun1","true");			
}

</script></con:config></con:testStep><con:testStep type="groovy" name="CreateReportFile" id="7a08574c-ce1f-4b05-9924-0f13297e43c0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["CreateReportFile"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def CreateReportFile = context.CreateReportFile
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def reportPath=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\Reports";
def reportName = testRunner.testCase.getTestStepByName("Data").getPropertyValue("reportName1");	

log.info(reportPath);
log.info(reportName);

CreateReportFile.CreateReport(reportPath, reportName);		
</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="c3f4432d-bfae-4efd-8df9-538b9165f578"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://qa-uom-services-postgres.crkqmj3qk07x.us-east-1.rds.amazonaws.com:5432/uom?user=uomadmin&amp;password=uomadmin</con:connectionString><con:query>DELETE FROM account where value ->> 'customerId' = '804732';
DELETE FROM inventory WHERE value ->> 'customerId' = '804732';
DELETE FROM supplier WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM nonsyscoproduct WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM "group" WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';</con:query><con:assertion type="JDBC Status" id="944a48cc-9ba9-4e69-9a81-fc058ae6e3a0" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3673a1e1-2c25-44ef-ab0d-1a4c7967c1b7" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_001" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="1b77e20f-88ce-42f1-add3-539c71a85bbf"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="b257bc71-6216-44b2-a3bc-5e88584630f7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6cc2874d-3204-4394-9f40-5d7e4fe70289" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="6eaccd7f-8c97-495b-8990-e1a973afd0b5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}

</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1634f3a2-61c5-4788-81c0-34ff4a9e26d0" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="27924370-3795-4096-ad57-e4ba7d051577" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="98b35c4e-4316-4eb3-9b12-de481fd8dc0b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="c4d3c9a9-fbc2-45f4-9ffc-c176a8c030c0" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9fe479c9-4c59-4440-acb5-29b206ae78bb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6e85f020-4e4a-48bb-a30c-99f6c0145c2c"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Add_Item";
def restStep2 = "GetInventoryById";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Add_Item Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);	
}

def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Add_Item" id="e8d32015-5a4d-46c6-a2f2-5cd585e4b234" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add_Item" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5b0c7ca2-b809-4971-bc99-319a35efcaad" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="436d0e8c-3f41-4fd9-aab7-ee7afbd602bb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
      def resItemId = json.items[i].id;
      def resItemPrice = json.items[i].price;
      def resItemPriceUom = json.items[i].priceUom;
      def resGroupId = json.items[i].groups.groupId;
      def resCustomerImages = json.items[i].customerImages;            
      
      def inputItemId = requestJson.items[i].id;
      def inputItemPrice = requestJson.items[i].price;
      def inputItemPriceUom = requestJson.items[i].priceUom;
      def inputGroupId = requestJson.items.groups[i].groupId;
      def inputCustomerImages = requestJson.items[i].customerImages;       
      
      log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
      log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
      log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
      log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
      log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
      log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
      log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
      
      assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
      assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
      assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
      assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
      assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="506731c1-d137-44a1-9df5-f26e8f9a16f1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4f725943-b358-4c18-ac58-7629c446231a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStep2Response = context.expand('${Create_Group#response}');
def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);	
def groupId = jsonRestStep2Response.id;
log.info("groupId::::"+groupId);


def restStep4Response = context.expand('${Add_Item#response}');
def jsonRestStep4Response = new JsonSlurper().parseText(restStep4Response);	
def itemId = jsonRestStep4Response.items[0].id;
log.info("itemId::::"+itemId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);
def invItemId = jsonRestStepResponse.items[0].id;
def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invItemId::::"+invItemId);
log.info("invGroupId::::"+invGroupId);


assert itemId ==  invItemId : "Item Id is not Matching";
assert groupId ==  invGroupId : "Group Id is not Matching";



</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="27225d98-513d-4806-b3c5-8dd6fbd93d49" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="e21744bd-9d5d-4d11-9bf9-bfc9a69d3a6c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0012195</con:value></con:property><con:property><con:name>groupId</con:name><con:value>41d5175b-00da-4b53-a2a4-535f14c48099</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>c2d5722b-b19d-45a3-925b-0aeff850a933</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="cb0fc4f5-8cfd-4ee0-9064-08b871efd7da"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0012195</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d53809ce-b9c1-4e92-a444-1efde94199e5" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_003" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="43c9e38b-c1ba-46f5-9b29-135719ea3690"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;



//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);

	log.info(excelName);
log.info(sheetName);
log.info(columnNumber1);
log.info(propertyName1);
log.info(testcaseName);

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="357cb561-f9c1-4d00-a283-1a7fa9490ecc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="ba9c3371-4614-49aa-8cc4-7d2a8ac5eb95" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="711706e7-5c72-46a9-80d7-01158e8c0b70" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e4f72927-7978-4bb1-b4bc-d884b9e59f8a" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ef0651d8-8203-4545-b932-72d2b36f2d56" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="816759e0-b2ed-40b2-a04d-489ecc57bf08"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	//End of Execute Pre Steps
		
	//Execute Create_Inventory_AddItem Step
	def restStep1Result = testRunner.runTestStepByName(restStep1);     
	def restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	
	restTestStepList.add(restStep1); 
	restStepsStatusList.add(restStepStatus);  
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="9f06fba3-230c-476a-9010-ebaa6d065948" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d203adc6-b2fd-43b9-8716-3a481732a26f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStep2Response = context.expand('${Create_Group#response}');
def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);	
def groupId = jsonRestStep2Response.id;
log.info("groupId::::"+groupId);
	
def itemId = context.expand('${DataFile#itemId}');;
log.info("itemId::::"+itemId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);
def invItemId = jsonRestStepResponse.items[0].id;
def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invItemId::::"+invItemId);
log.info("invGroupId::::"+invGroupId);


assert itemId ==  invItemId : "Item Id is not Matching";
assert groupId ==  invGroupId : "Group Id is not Matching";



</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e86718c-073a-40af-96cf-aac95e7276f6" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="b210c0d0-314e-48a4-90df-56bb3483024f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0012195</con:value></con:property><con:property><con:name>groupId</con:name><con:value>994614ba-09d7-424e-8694-41d91f17015a</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="ee9a00ab-4aa0-452f-a69b-7369a54a8ffe"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0012195</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3cca3e65-e2e3-495d-b9df-6d6e9f50ccf1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_006" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="359004b8-13f1-41c4-9df5-e22cb6dec912"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2002bf3a-4fd6-4f01-bb63-5f911e45c13d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7277c149-b2b0-4088-aadb-118a295c8cd4" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="8612dce0-2b86-4835-b51c-d7e19c4b5ef9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="ee44ebad-fb89-41d6-b442-a4a3fd3b4828" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6929d483-2de6-4d84-b5ff-8b7c777b8c95" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="b8e2806a-14b4-43dd-a6b7-e68b84e4d0b7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="542bdce5-3acb-47fe-a37a-e542a862f5db" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="3f25f4c9-3130-454c-9b93-d0812cc5ed3d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Inventory";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus); 

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Update_Inventory Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus); 
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="65345b51-d426-4dc3-890d-38b04c36d093" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="990d67a3-3185-40a5-a5fe-7a10e8c83f59" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="973077c3-b3c5-48af-96a9-b6f369e9e43a" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStep2Response = context.expand('${Create_Group#response}');
def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);	
def groupId = jsonRestStep2Response.id;
log.info("groupId::::"+groupId);
	
def itemId = context.expand('${DataFile#itemId}');
log.info("itemId::::"+itemId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);
def invItemId = jsonRestStepResponse.items[0].id;
def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invItemId::::"+invItemId);
log.info("invGroupId::::"+invGroupId);

assert itemId ==  invItemId : "Item Id is not Matching";
assert groupId ==  invGroupId : "Group Id is not Matching";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="f4d24283-b484-4046-9cb1-3b143ef57b65"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0012195</con:value></con:property><con:property><con:name>groupId</con:name><con:value>e6651235-fc91-4b2f-a0e3-5eb34f26a24c</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>276001e5-d5f9-4224-ba4c-2784c3c45c51</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="1f6989eb-82a7-430c-bd32-afa8291aa2d4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0012195</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="90ca489c-ef95-42ea-90bb-c56098dd9576" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_007" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="dd577090-cf8d-4cfe-826e-01c22b2ded11"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="e35ae1fc-7926-4438-bf5f-16c78d15a372" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c22c2486-7175-49bf-804d-5c57dc0ed365" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="6e7d065f-b225-460f-9c9f-a2f9033e0106" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6ae0804-f4e9-4fbc-bffc-598783c6cae0" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="546a8f18-5b99-4da9-af45-180d0ae11047" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="e13b873c-7db7-4a06-8645-e0ed5296b42b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="98d26585-1ab5-4d84-8719-75ef8e6a6075" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="42d29404-12d6-491f-befd-bfe28c7024f6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="8b2d7e40-87c5-48e2-a7f3-351b5ccc9b1a"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Supplier";
def restStep2 = "Create_NonSyscoProduct";
def restStep3 = "Update_Inventory";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Create_Supplier Step 

	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def supplierId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//Execute Create_NonSyscoProduct Step 

	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def itemId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	//Execute Update_Inventory Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="d2b0e84e-3316-4b04-ac9b-2bbba5dba1bd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="9e5b2d85-c617-4906-8944-523f2ff0d5ec" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4dfb9699-5207-4ee8-b565-1d227588226a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="39f11ede-e4d9-406a-b273-135bf335287f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="77ab2939-7bcc-4ff4-8315-f9aeca61f129" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="cf7ff03f-fde9-4e75-bacd-bb9485c88b2c" name="XPath Match 1"><con:configuration><path>//*[local-name()='supplier']/text()</path><content>${DataFile#supplierId}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4d2e64d1-d539-41cd-adb1-fd04e77c4049" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="3c74a296-9668-445b-95d6-05e5db92b522" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="72899713-8f14-416d-b9f1-5d2ac3492628" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStep2Response = context.expand('${Create_Group#response}');
def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);	
def groupId = jsonRestStep2Response.id;
log.info("groupId::::"+groupId);
	
def itemId = context.expand('${DataFile#itemId}');
log.info("itemId::::"+itemId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);
def invItemId = jsonRestStepResponse.items[0].id;
def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invItemId::::"+invItemId);
log.info("invGroupId::::"+invGroupId);

assert itemId ==  invItemId : "Item Id is not Matching";
assert groupId ==  invGroupId : "Group Id is not Matching";</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="349df2fa-c3ca-4673-99b7-360e0fa9bba8" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="9d0671bd-c658-4528-8696-26a5bf24d8b5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>5c81c17d-00a8-413f-a58c-21a521a18c9c</con:value></con:property><con:property><con:name>groupId</con:name><con:value>47749c8f-6c5b-488e-b7fa-ba5bb09f7d09</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>fd9c96db-1eb1-43a6-bcb2-98a99f71f9b4</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>6af74a17-6421-45e7-a428-15859982d055</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="5478a5f5-0175-4bcd-a80f-3390abef94db"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1e5aeb0c-7af5-4bf2-9d23-73f6ae731c04" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_009" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="2d7a45b3-ad60-4926-bddf-49b208a04c1a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="fbee6f23-cf64-433f-a087-cb97eca76bce" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="8523904c-75bb-40ff-bca8-8c020442bf63" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2d010d1c-c899-46c7-818d-095e188c1711" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a66283b6-3221-4ac4-be22-244d98a91bc1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="e7c67022-849c-4db6-95e1-d71a5c811ed1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="436e9cab-4bd8-4100-a902-0668805afac4" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="860ed8e6-24d2-4cb4-b3d8-b250e89cb7b9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="27dd1494-1882-49ba-87cd-a9656b4e1785" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4184b011-39a5-442f-b379-9b16fbb75dae" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="974e46e9-bc71-45d7-9d86-73c40724a3f1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a2e6cf4c-6787-4dd7-aba5-68b7346c3dc5"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "GetInventoryById";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute GetInventoryById Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="625326be-4219-4481-8bd8-039df304ee02" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="84466645-c74c-4dab-9cab-0112dd98deee" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="5ff5d0c1-536c-47d5-88ac-b72be3b32cc6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c4f5b34b-4f1c-4db5-9dbd-fe4f030c3c26" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="ed2aa9e2-0697-4414-a38d-182a404519b1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>adce88a6-0eed-4878-819f-8be90405bbe6</con:value></con:property><con:property><con:name>itemId</con:name><con:value>e1e9f069-aa15-4ef1-9a0e-ce5fabd008d0</con:value></con:property><con:property><con:name>groupId</con:name><con:value>adc95bdc-aebd-4d1a-a3ff-c9e787d1dd4e</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>199e01e6-ab83-4f71-8d02-3cb26b774e36</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="6db27052-df32-4b6a-a2e4-48e41caf9cd6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8f9dc721-50e1-42ba-808c-dc0e67055082" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_010" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="21460e9c-c484-4c4d-9b7c-b6fb46f7c7e6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2495a5be-1973-4efc-b9f7-b4ecce459eb4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="cb822ff0-e292-4b1c-8f28-92bfa683438e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="7da8a499-61a4-4c50-9682-3c18aeb33562" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f79725c6-e253-49b3-9275-05e011b90003" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3f033e32-6174-44e5-9e7b-6a71dea34778" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="71cc1974-51ee-48d2-b325-ab2e6baa135f"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Update_Inventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }
     int noOfItems = itemArray.size();  
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("noOfItems",noOfItems.toString());               

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);	
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Update_Inventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="e023608b-4535-40e4-ae58-cd5bdddd2b36" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="70cf1416-7b2d-4b05-9419-514d04e3fa4a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="82c2e93a-562f-4bf6-8fed-d034168b643b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4d4834f-bb21-4bbf-ae8d-56c7127a53ad" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStep2Response = context.expand('${Create_Group#response}');
def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);	
def groupId = jsonRestStep2Response.id;
log.info("groupId::::"+groupId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invGroupId::::"+invGroupId);

int invItemsSize = jsonRestStepResponse.items.size();
log.info("invItemsSize::::"+invItemsSize);

def noOfItems = context.expand('${DataFile#noOfItems}');
log.info("noOfItems from datasheet::::"+noOfItems);

for(int i = 0 ;i &lt; noOfItems.toInteger();i++){
	def dataSheetItemid = context.expand('${DataFile#itemId'+i+'}');
	log.info("Datasheet itemid::::"+dataSheetItemid);
	def invItemId = jsonRestStepResponse.items[i].id;
	log.info("invItemId::::"+invItemId);
	assert dataSheetItemid ==  invItemId : "ItemId from the datasheet and in the Inventory are not Matching";
}


assert noOfItems.toInteger() ==  invItemsSize : "No of Items in the inventory is not matching";
assert groupId ==  invGroupId : "Group Id is not Matching";



</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d6267741-7f8b-4c85-bf27-6fa030bbf84e" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="c50857eb-2e7c-476f-9562-8ecff840fcb5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>ace3543b-12ca-4a7c-9036-85dbb4ef76ee</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>0026666</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0012195</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "oz"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>a1eb64bf-d00c-45e7-8e0b-787797dbeadc</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>noOfItems</con:name><con:value>2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="a59a55b9-596f-4b59-af7e-79147c973d83"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0026666&amp;&amp;0012195</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="dc5218f4-ef6b-4732-9805-3e26942f04aa" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_011" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="887f35a9-eee5-4732-91ef-d1085c0a9d05"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="186a0eaa-ca11-4e74-9651-a20381571bfb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="00f6ce67-6b7b-42c6-8d21-f68f116dc938" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="47df0ec5-a1a1-4056-9225-6c7a394dc239" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="54b42cd8-d735-43f4-a299-759251db705d" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8f2d397c-4fc0-42f4-8ff1-5b27d72ab889" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="fa6dad87-a706-4c0a-87cf-7149397dda44"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_NewGroup";
def restStep3 = "Update_Inventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId0",groupId);

	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Create_NewGroup Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def newGroupId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId1",newGroupId);

	//Execute Update_Inventory Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="e193832e-7574-4e60-943f-e0df5a7aed31" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c9d165f4-3a9d-44ee-8b32-794eefeb1fa4" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def createdGroupId0 = context.expand('${DataFile#createdGroupId0}');;
log.info("createdGroupId0::::"+createdGroupId0);

def itemId = context.expand('${DataFile#itemId}');;
log.info("itemId::::"+itemId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invGroupId::::"+invGroupId);

def invItemId = jsonRestStepResponse.items[0].id;
log.info("invItemId::::"+invItemId);

assert createdGroupId0 ==  invGroupId : "Group Id is not Matching";
assert itemId ==  invItemId : "Item Id is not Matching";



</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d04a4623-b243-4702-812f-0a76bd9dc06b" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NewGroup" id="cc60088e-68a1-4fd9-b380-9f1e6aaec3a5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NewGroup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="ca0665bc-1e48-4e3f-b74b-7075987f67af" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b8d4c4bd-9385-4096-a3eb-35fe39ae5814" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="f5a38650-55a4-43f7-8d9b-6fce6f40d7e4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="03c8f98d-adb1-434b-894d-625cdbb768f5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def createdGroupId1 = context.expand('${DataFile#createdGroupId1}');;
log.info("createdGroupId1::::"+createdGroupId1);

def itemId = context.expand('${DataFile#itemId}');;
log.info("itemId::::"+itemId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invGroupId::::"+invGroupId);

def invItemId = jsonRestStepResponse.items[0].id;
log.info("invItemId::::"+invItemId);

assert createdGroupId1 ==  invGroupId : "Group Id is not Matching";
assert itemId ==  invItemId : "Item Id is not Matching";</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a8cbc85-bfdc-4f5d-ae41-11d418bb87cd" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="4f1c8202-3a08-4278-a229-1f76356fd6c3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0026666</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>7644916f-09af-4e39-9c78-91c9ba4b24cc</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>8c6a8fce-f0aa-4e3d-8424-27848847f00e</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>c8d1362f-1ad4-4e79-9544-98a60458f43c</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>aa1983e5-bbcc-4af2-a50a-50d4c12244c4</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="3815e80b-72b7-4f51-bda0-35b9d289dffb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0026666</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="33442ec0-682f-4a23-a16f-7826425224e3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_013" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="50f043ec-f2c1-41fc-ba71-b42eb833bec4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="832c3edc-3dc0-48cf-9e65-8ca7851f2435"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";
def restStep2 = "Update_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);	
	//End of Execute Pre Steps
		
	//Execute Create_Group Step
	def restStep1Result = testRunner.runTestStepByName(restStep1);     
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("initialInput",groupId);	
	restTestStepList.add(restStep1);  
	restStepsStatusList.add(restStepStatus); 

	//Execute Update_Group Step
	def restStep2Result = testRunner.runTestStepByName(restStep2);     
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2); 
	restStepsStatusList.add(restStepStatus);
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f8622af1-f7ec-4828-80d7-8b39fd7232f2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8df69dbc-e7de-4685-9a66-587cb6cbda1a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="97c4e5d5-983c-496b-9464-9137e5f6b836" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2108bb49-4c6d-4297-ba3c-47869d560605" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="34f490a9-3555-4530-892b-4a623f2a31f1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Group" id="d6e2ca42-2989-47ac-a783-e83add7cd4b4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="UpdateGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Group" id="133681e7-b56b-42ae-b080-020fcf88448b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/12345</con:originalUri><con:assertion type="Simple Contains" id="1f862d62-22c5-4518-bd77-d72766ed11e5" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1e9a394c-914e-42d2-8802-2a454b902378" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5fa030d3-8c1e-4a97-bbd3-f7c0454c809c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def request= new JsonSlurper().parseText(context.expand('${DataFile#groupId}'));
def groupName = request.name;
def storageName = request.storage;
log.info("groupName::::"+groupName);
log.info("storageName::::"+storageName);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def invGroupName = jsonRestStepResponse.name;
log.info("invGroupName::::"+invGroupName);

def invStorage = jsonRestStepResponse.storage;
log.info("invStorage::::"+invStorage);

assert groupName ==  invGroupName : "Group Name is not Matching with the datasheet";
assert storageName ==  invStorage : "Storage is not Matching with the datasheet";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="f6c8d460-ea3b-4b88-bf56-133e88d3edc8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "groupA",
  "storage": "Freezer"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>f684def2-2302-44b9-a26a-a35edcad82d3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="063b7634-1b40-4682-83c3-e6a7e26c1ed8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "groupA",
  "storage": "Freezer"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "name": "CheeseGroup",
  "type": "location",
  "storage": "dryer",
  "foodType": "solid"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b1481299-2ab4-47d8-92f8-c0c7fb03897b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_014" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="77047f35-4056-4916-b0a0-61a53ac7c040"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="e5ce034f-d187-46a6-b0bf-1dff6aa1a6c7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c62ff84f-a8fa-46a2-b435-521e179b8255" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="2a68bffb-4ef0-4a61-9b3f-6558db463c97" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="cbc993a6-9421-421c-bdb0-05d0d21f69a0" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6d0ee6fb-d9b4-4c75-9dcb-193cf08cf074" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="bf8c4ae3-c271-4409-8ff4-c4254be0d892" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b623e7d0-1a7e-41a4-97ad-987b23656b10" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f4c08c55-93f8-4286-a766-bcfa7e826f9f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="3c352566-4cf7-401a-8fc9-315162b6bc1d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f44b1977-7979-4e63-acfb-376bea4b1641" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6054bfc1-02c2-444f-90e6-cd4496aeca57" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6a92c269-ddd0-46b3-a838-385a41218e8d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Update_Inventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	int noOfGroups = itemArray.size();  
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("noOfGroups",noOfGroups.toString());

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Update_Inventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);	
	restStepsStatusList.add(restStepStatus);
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="e08d936f-fcd6-43e6-bbd2-e224bde96bb2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1d4d6006-d530-4a64-8282-86cd99c6408f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def createdGroupId0 = context.expand('${DataFile#createdGroupId0}');;
log.info("createdGroupId0::::"+createdGroupId0);

def itemId = context.expand('${DataFile#itemId}');;
log.info("itemId::::"+itemId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invGroupId::::"+invGroupId);

def invItemId = jsonRestStepResponse.items[0].id;
log.info("invItemId::::"+invItemId);

assert createdGroupId0 ==  invGroupId : "Group Id is not Matching";
assert itemId ==  invItemId : "Item Id is not Matching";



</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9dcdeef6-e4cc-4a06-afe2-627a59d19730" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="65555f4f-48cd-428c-b23e-69c172adaaf4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="61fc7e80-d6d7-47df-9ea2-4f9a7de805a5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def itemId = context.expand('${DataFile#itemId}');;
log.info("itemId::::"+itemId);

def invItemId = jsonRestStepResponse.items[0].id;
log.info("invItemId::::"+invItemId);

int invGroupsSize = jsonRestStepResponse.items[0].groups.size();
log.info("invGroupsSize::::"+invGroupsSize);

def noOfGroups = context.expand('${DataFile#noOfGroups}');
log.info("noOfGroups from datasheet::::"+noOfGroups);

for(int i = 0 ;i &lt; noOfGroups.toInteger();i++){
	def createdGroupId = context.expand('${DataFile#createdGroupId'+i+'}');
	log.info("Created GroupId::::"+createdGroupId);
	def invGroupId = jsonRestStepResponse.items[0].groups[i].groupId;
	log.info("invGroupId::::"+invGroupId);
	assert createdGroupId ==  invGroupId : "GroupId from the datasheet and in the Inventory are not Matching";
}


assert noOfGroups.toInteger() ==  invGroupsSize : "No of Groups in the inventory is not matching";
assert itemId ==  invItemId : "Item Id is not Matching";</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7681c9f9-56d2-466e-b320-3bf4b5e02e7c" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="27885b6f-f7cb-45bf-b251-b1df7fb368e5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>b102a686-3870-4ec4-84d7-00d6a9d7202f</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>ad4f2389-2ab5-40b6-943c-65bd590b54b7</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>577d273b-1f94-4e1b-bc49-6a9a419ead59</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>40919f04-ada9-4ea8-ab1a-3c786e9e6c47</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>50e4a036-4d0d-4aa1-a3d7-a6eafa2ae42d</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value/></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>noOfGroups</con:name><con:value>2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="68189e01-1be6-441f-9e37-890d85c91716"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value/></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="460ae0cd-865d-40c9-b76d-b35ac051adf7" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_015" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="ec2a3554-ac98-417b-aaf8-f9d80fd96896"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="d01886cf-f7e3-482c-9f6f-386112c5cdca" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5d6010a0-5c54-4dd6-b0f0-5bd1187a5256" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="8e939d19-5178-476e-92ac-875a747d3e5f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5ffe8a94-6257-4c39-ba05-42340b12d9f9" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d7ac4c5e-8aff-4b70-87cc-18c0dbfe2c1f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="ef513ef1-a590-4298-a45c-7aa53054f777" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="ea9ce125-57f7-4f1a-b260-33692e0233cb" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="958a2452-b66a-49c8-ae5a-263d694a6649" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="f28b843c-04b6-4b40-9a42-cad602c86fc3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="fea1ee25-3226-4596-b460-b44251a6df01" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="14c71baf-df75-46a7-8552-2182ba075717" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="b82c7941-7724-40af-b818-66724e197a3d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Update_Inventory";
def restStep3 = "Update_InventoryQuantity";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
		
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	int noOfGroups = itemArray.size();  
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("noOfGroups",noOfGroups.toString());

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Update_Inventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute Update_InventoryQuantity Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="b67d4b1d-3223-4681-a895-955ee0bbbfe4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="40714b2c-8f34-4634-a260-b939020451d6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="36a3cb0b-0a7c-4903-b772-77e5fc0de373" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f287863b-7944-4c3f-be4a-56b8f290d703" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_InventoryQuantity" id="c65d1d45-7f66-4169-8eca-fa3df215de34" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_InventoryQuantity" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#newQuantity}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51f64ba2-3e3c-41ea-bf38-41e7effaf769" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def itemId = context.expand('${DataFile#itemId}');;
log.info("itemId::::"+itemId);

def invItemId = jsonRestStepResponse.items[0].id;
log.info("invItemId::::"+invItemId);

int invGroupsSize = jsonRestStepResponse.items[0].groups.size();
log.info("invGroupsSize::::"+invGroupsSize);

def noOfGroups = context.expand('${DataFile#noOfGroups}');
log.info("noOfGroups from datasheet::::"+noOfGroups);

for(int i = 0 ;i &lt; noOfGroups.toInteger();i++){
	def createdGroupId = context.expand('${DataFile#createdGroupId'+i+'}');
	log.info("Created GroupId::::"+createdGroupId);
	def invGroupId = jsonRestStepResponse.items[0].groups[i].groupId;
	log.info("invGroupId::::"+invGroupId);
	assert createdGroupId ==  invGroupId : "GroupId from the datasheet and in the Inventory are not Matching";
}


assert noOfGroups.toInteger() ==  invGroupsSize : "No of Groups in the inventory is not matching";
assert itemId ==  invItemId : "Item Id is not Matching";</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8e527f9d-e356-444d-b945-a3720527cf44" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="d5269efa-2336-4eb3-85c9-d61d18bebcb9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>08c65067-42f8-4fd0-a95d-8e898508ddda</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>c80eb560-899a-4564-a8f0-1e9119cab601</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>327d2e00-d9e8-47a1-810d-0eb253582ec6</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>cdc4bf95-7f13-40b2-af49-e69738c1b350</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>5e20bbcb-cea0-4da5-8168-91518b906f78</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 10,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 20,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>noOfGroups</con:name><con:value>2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="d2da8664-542e-47a3-a4d0-1754cfb18925"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 10,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 20,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="51d35e04-c55e-46a5-bac7-b6024dcfab51" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_017" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="0b1937ad-1311-488a-99ec-b7cdcbe7495e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="e75ccaf5-7c5d-4211-8b11-98df42f631fd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="252840fb-fe85-4863-b0e5-dd4e93e3670d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="7faaf26e-0801-4b02-927b-8cdb7dd00d03" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5c544ee2-7de3-43ef-a736-94053af7dbc1" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ad263888-f209-419a-a34b-4efe93c21327" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="68bce53f-2962-4f9e-a08d-fdc66e47ecdd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2f76b342-cbc1-43d0-9f36-b43e25ecac8b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a5ca34d3-b665-4f48-8a4d-b31fd860dfa7"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Supplier";
def restStep2 = "Create_NonSyscoProduct";
def restStep3 = "Update_Inventory";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Create_Supplier Step 

	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def supplierId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//Execute Create_NonSyscoProduct Step 

	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def itemId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	//Execute Update_Inventory Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="d605efd6-e23a-49f6-9a20-584f1204345c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e1c2c080-2dd5-4b9e-93a8-30dc39f4b9ed" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4074a963-e438-43d2-84ad-34d8859580a9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="f8445192-b706-482b-812d-f096818ffc7c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>"id":</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d9ed9d2a-6981-4d03-bd2a-6b685bd528c1" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e193be88-e648-41d5-ba9a-008df8b6079e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="0666e8c2-1639-4d8a-a06e-92f73ae2b141" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>id may not be empty</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8ba54b82-0da7-437d-80f7-76671463503e" name="Script Assertion" disabled="true"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="98c7d6e1-b455-4df6-923b-ee9fa6176d1e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 1,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>333caa31-6ede-4ece-90f4-b0711ba22f35</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f2d0dccc-c6ec-44c5-bd70-d4ad0e8a0588</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>63318480-63f2-4e1a-99ae-d84c307a711c</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>2b7c2f09-dc6e-4156-80aa-5edf181a7b2c</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="30e31273-6f16-486c-951c-387ced0b9a94"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 1,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="839fb873-b880-4218-990b-eefa4aa35415" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_018" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="73149b89-06db-44a3-871d-abcfed153fd5"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="8a613a83-6528-4c20-bbfa-afc3a8206be5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="31360993-85ac-4d2e-a2ca-7e8f209564ed" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="c7ad4d3e-131a-46e5-a2db-ab36fa87b0ac" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="8e4005b9-389f-4ba2-a210-8e6761ffa1ea" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="74619911-8d97-4fe4-afeb-872253afcf8f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="6293f592-a3d5-43a7-a1be-a2f50571103b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="543e4c5d-2ad0-4727-8815-a10424e9b3ad" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c044b3c5-ada1-4fb5-8dfc-ec9df7c5dee3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="16b8636b-d188-4c68-ace6-8f99831e9b76" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1ee50c8a-8225-4f28-8742-ccae679bea11" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="638058bc-6abe-45ae-b15b-03cb4acef0a5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="531b0b1e-aa56-4d81-a67b-89a4758b357b"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory";
def restStep2 = "Add_Item";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	int noOfGroups = itemArray.size();  
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("noOfGroups",noOfGroups.toString());

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	//End of Execute Pre Steps

	//Execute Create_Inventory Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Add_Item Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);	
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="3502cc2e-4418-4e59-836b-d06bb8712fbd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e310a825-ba07-40af-a99c-5db431718573" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Add_Item" id="92e6bc4d-d119-483a-a41a-0e834d140264" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add_Item" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9739c0b1-e6cb-4c4a-93f6-a37737c35ffb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="09f6d0cf-3ae3-45a7-b69b-80928c6f5c60"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>11d253b7-dff3-484d-bdb3-e3012a60ce70</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>9c1063da-21e6-4f53-ac5c-28cd6009e720</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>a39a4b64-c575-4d09-8336-7146826653e5</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>2ee1373c-05c8-4992-acd7-31f654950cc9</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>c523297b-fe54-4c52-888f-51b25072b5cd</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>noOfGroups</con:name><con:value>2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="a18775de-cd91-42cd-b3bf-3b0b85e9214b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d62616a4-1f72-4486-ab9f-31f4d43f1c56" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_019" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="5ce35ffc-1725-4af7-8c23-3849fbf6a576"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="d99256c2-7edd-4be6-a7b9-5056996f7131" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="75beff6c-0b56-4f5a-aa15-a574c7001f57" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="e458b609-54c7-4f89-951f-f5baec071240" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="15c510c9-e334-4566-aeff-0ab4e82f2033" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="96cdefea-e174-42b9-a1fa-5305bdbc75a4" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="decc7443-61dc-4d3b-a152-fed6df748fbc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="8e66f1e7-3824-4aac-a85f-1274dad53988" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ee07166a-f2f1-4f34-90cd-ce777642bb54" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="98644684-f595-451f-9672-e341285c3de1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b1f5c84e-04d0-48bf-935e-8769238a6eaa" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8ff2115e-0948-464e-83bf-d1bb57c6ae75" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="c827f9c3-61bb-491e-b361-f42fb3823259"><con:settings/><con:config><script><![CDATA[import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory";
def restStep2 = "Add_Item";
def restStep3 = "Create_Group_1";
def restStep4 = "Add_Item_1";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i <= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&&");
     for(int j = 0;j < itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();
		

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j < 2;j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
		
	}

	int noOfGroups = itemArray.size();  
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("noOfGroups",noOfGroups.toString());

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	//End of Execute Pre Steps

	//Execute Create_Inventory Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Add_Item Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Group_1 Step	
	for(int j = 2;j < itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);

		def restStep3Result = testRunner.runTestStepByName(restStep3);			
		restStepStatus =restStep3Result.getStatus().toString();
		log.info(restStep3+": Status::"+restStepStatus); 
		restTestStepList.add(restStep3);
		restStepsStatusList.add(restStepStatus);

		def restStep3Response = testRunner.testCase.testSteps[restStep3].testRequest.response.contentAsString;
		def jsonRestStep3Response = new JsonSlurper().parseText(restStep3Response);
		def groupId = jsonRestStep3Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);																
	}

	//Execute Add_Item_1 Step	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}

def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="ae7a19da-4cbe-4dcc-9f58-1667b6a0f54c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7376000a-f9c1-49bf-a9cc-bb171a02f14c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Add_Item" id="3136a112-24b9-4732-bd01-fcf5b86f3585" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add_Item" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="64f25480-7023-4309-b9f6-38fbf78cb4d4" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="e78da505-82d4-4447-84bc-f14cea8dee90" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="7bbde97d-0b50-4af7-8b3b-47893a14a20b" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8e5d5934-2feb-401d-bc01-9c0ce6c31e51" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Add_Item_1" id="f2dfd2fa-6deb-47a5-a3a3-1da9742476bb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add_Item_1" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3ebe457a-75fb-4035-9123-b6ce0ec5721c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def itemId = context.expand('${DataFile#itemId}');;
log.info("itemId::::"+itemId);

def invItemId = jsonRestStepResponse.items[0].id;
log.info("invItemId::::"+invItemId);

int invGroupsSize = jsonRestStepResponse.items[0].groups.size();
log.info("invGroupsSize::::"+invGroupsSize);

def noOfGroups = context.expand('${DataFile#noOfGroups}');
log.info("noOfGroups from datasheet::::"+noOfGroups);

for(int i = 0 ;i &lt; noOfGroups.toInteger();i++){
	def createdGroupId = context.expand('${DataFile#createdGroupId'+i+'}');
	log.info("Created GroupId::::"+createdGroupId);
	def invGroupId = jsonRestStepResponse.items[0].groups[i].groupId;
	log.info("invGroupId::::"+invGroupId);
	assert createdGroupId ==  invGroupId : "GroupId from the datasheet and in the Inventory are not Matching";
}


assert noOfGroups.toInteger() ==  invGroupsSize : "No of Groups in the inventory is not matching";
assert itemId ==  invItemId : "Item Id is not Matching";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="d6ea44e8-1991-4092-8e58-22dc24c46a0c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>3d7d88cc-9978-4baf-9a40-dbc351a0f66b</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>c4282278-327e-4cb3-b7dd-1084bb682615</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value> {
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>245ebf90-8d31-46e7-b4c1-97ecd6c7adf2</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>f683c957-b946-4896-b743-636fc7baec5f</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>7069e18a-2f6e-41e2-82c4-65d96ebd7bd7</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        },{
          "groupId": "${DataFile#createdGroupId2}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>groupId2</con:name><con:value> {
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId2</con:name><con:value>de1d6786-a5cc-4913-a081-843258a0fb92</con:value></con:property><con:property><con:name>noOfGroups</con:name><con:value>3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="0696d128-3c86-42a3-af95-ba316361dfcf"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}&amp;&amp; {
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },
         {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        },{
          "groupId": "${DataFile#createdGroupId2}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2db0f244-60ab-4b4c-98c4-ca9d8e389002" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_020" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="678a4602-8670-4bfc-8ef5-ef479c9540db"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="a997ec12-e9df-4a8d-8cf4-acd3f4f8694a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="72fa400c-acb9-409f-a9bc-b98f97be7169" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="e1e6c395-f409-46ab-9c04-3d44d426444b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="7e2a91e9-da5a-4dfc-964f-78b3c9f82298" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="38563f26-cef8-41af-838b-5c4401d51e26" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="e3a0ad8d-3e06-41f0-af94-8ca149608ae8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5c1927ed-6082-4c7f-a624-145432d53db1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="fb9d0c5b-bdf6-430b-b46c-892d4c076cf9"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory_AddItem";
//End of Pre Steps
//Actual Test Steps to be executed
def restStep1 = "GetInventory_TimePeriods";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);     
	def restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//End of Execute Pre Steps
	
	//Execute GetInventory_TimePeriods Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="GetInventory_TimePeriods" id="a4d05672-1ad2-410e-8474-f03ad9bab380" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/timePeriods" methodName="GetAllInventoryTimePeriods-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventory_TimePeriods" id="cc92fa53-64ed-4d1d-97f9-d40dffc3cf36" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/timePeriods</con:originalUri><con:assertion type="Simple Contains" id="e31e8da0-1dd1-4ed5-beec-ed2b76335e50" name="Contains"><con:configuration><token>"isCurrent":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e7694a4e-518c-4bf9-897d-83caf2c56726" name="Contains 1"><con:configuration><token>endingInventory":"${DataFile#inventoryId}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f4ae7fee-3180-45ef-9a81-de8cf89a9a75" name="Contains 2"><con:configuration><token>"from":</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f1081bdf-b7a6-43db-8bd5-8fb40c21e215" name="Contains 3"><con:configuration><token>"to":</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="5f88fa36-48c4-4b4b-a4a6-4f1b1a70cbc4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>5a2b1f81-3ecd-407b-bb29-9a1409173f8c</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0026666</con:value></con:property><con:property><con:name>groupId</con:name><con:value>03565f85-db0f-458d-9b27-368fd6cf4425</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="39b297ba-a98d-4728-8350-f0df34da6e16"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0026666</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b69e186e-1e47-4be2-b1bf-afb827c3026b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_024" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="d81a6b76-0c61-4eb4-bad3-660fcf2e0078"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="14246c06-972e-412a-8981-a2d4599efda1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6b97b33b-90f1-44ac-9c42-2a7e76e883c9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="47e1f139-6ad9-4b9b-9ca4-5cb4e62f6156" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e83602dc-8689-47f7-bc73-0e8e3e2870b8" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="70d2d6ff-8c3e-472d-85bb-fbe5769ee177" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="1c4e6289-41db-4b7d-ae50-676b0ea2998d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e600cb9c-919d-4c2c-a920-cffdeee095cf" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c22117ad-ef39-4f4e-bde1-e403f46c67ea" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="0e75eadc-3767-49f5-ae9f-fa26a05f4b8c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="aac538f9-2a48-4b5b-833d-69deb22ef40d" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0a17e471-a415-4ee1-b725-486a271e3bc9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a1ba6a4d-da33-4c49-8c7d-8827b04bb91f"><con:settings/><con:config><script><![CDATA[import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Update_Inventory";
def restStep3 = "Update_Inventory_1";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i <= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData5.split("&&");
     for(int j = 0;j < itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     } 

     def uomItemArray = propData10.split("&&");
     for(int k = 0;k < uomItemArray.size();k++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10+k,uomItemArray[k]);	
     }  

     def qtyItemArray = propData8.split("&&");
     for(int l = 0;l < qtyItemArray.size();l++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8+l,qtyItemArray[l]);	
     }

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j < itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}

	int noOfItems = itemArray.size();  
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("noOfItems",noOfItems.toString());
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Update_Inventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute Update_Inventory_1 Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="01aac248-a924-407c-b58f-181df9dbeaa5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="de254d34-5a7b-465b-a4d5-79d191755787" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="7e64ec94-ecf3-4610-afd9-89dcc935b448" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="46541fa0-b16f-408e-b409-b230ba638f23" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;


def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def groupId = context.expand('${DataFile#groupId}');;
log.info("groupId::::"+groupId);

def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invGroupId::::"+invGroupId);

def noOfItems = context.expand('${DataFile#noOfItems}');
log.info("noOfItems from datasheet::::"+noOfItems);

int invItemsSize = jsonRestStepResponse.items.size();
log.info("invItemsSize::::"+invItemsSize);



for(int i = 0 ;i &lt; noOfItems.toInteger();i++){
	def dataSheetItemid = context.expand('${DataFile#itemId'+i+'}');
	log.info("Datasheet itemid::::"+dataSheetItemid);
	def invItemId = jsonRestStepResponse.items[i].id;
	log.info("invItemId::::"+invItemId);
	assert dataSheetItemid ==  invItemId : "ItemId from the datasheet and in the Inventory are not Matching";
}


assert noOfItems.toInteger() ==  invItemsSize : "No of Items in the inventory is not matching";
assert groupId ==  invGroupId : "Group Id is not Matching";



</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b7d6fb19-dc9e-48a3-aacf-97f0421401cd" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory_1" id="fdce2d97-a24d-415a-87d5-514b5a5b6e0c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory_1" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="71ffb58c-30be-463a-bf8f-787df6aa0600" name="Contains 1"><con:configuration><token>"toQuantity":${DataFile#newQuantity0},"toUnits":"${DataFile#newUom0}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a4034b37-7091-4c87-b23d-caacbfbcc959" name="Contains 2"><con:configuration><token>"toQuantity":${DataFile#newQuantity1},"toUnits":"${DataFile#newUom1}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c33f5b7d-d612-49ff-98ec-f7eec580870b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def noOfItems = context.expand('${DataFile#noOfItems}');

int invItemsSize = jsonRestStepResponse.items.size();
log.info("invItemsSize::::"+invItemsSize);

for(int i = 0 ;i &lt; noOfItems.toInteger();i++){	
	int invItemQuantity = jsonRestStepResponse.items[i].groups[0].quantity;
	log.info("invItemQuantity::::"+ invItemQuantity);
	def invItemQuantityUOM = jsonRestStepResponse.items[i].groups[0].quantityUom;
	log.info("invItemQuantityUOM::::"+ invItemQuantityUOM);

	def newQuantity = context.expand('${DataFile#newQuantity'+i+'}');
	log.info("newQuantity::::"+newQuantity);
	
	def newUom = context.expand('${DataFile#newUom'+i+'}');
	log.info("newUom::::"+newUom);
	
	assert newQuantity.toInteger() ==  invItemQuantity : "Inventory quantity is not matching with the datasheet quantity";
	assert newUom ==  invItemQuantityUOM : "Inventory UOM is not matching with the datasheet UOM";
}

assert noOfItems.toInteger() ==  invItemsSize : "No of Items in the inventory is not matching";</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c239b09e-c044-410b-ab0b-1582dbd588b1" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="7afe53b0-dec3-42c9-ae23-b9183576b250"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>786b96db-4836-46a9-8f48-126e9454e1ee</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>05003af6-364c-4eda-b1ef-a23763d3fc10</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>e75012b7-19d1-4cab-985c-0cacaca936dc</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>9d97f9de-0513-4e38-a033-97d22d6274b6</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>40a2e90e-75ba-4e85-9ad8-c7adede97b2e</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value/></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>newUom0</con:name><con:value>lb</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>ea</con:value></con:property><con:property><con:name>newQuantity0</con:name><con:value>27</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>63</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": ${DataFile#newQuantity0},
          "quantityUom": "${DataFile#newUom0}"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": ${DataFile#newQuantity1},
          "quantityUom": "${DataFile#newUom1}"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>noOfItems</con:name><con:value>2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="7001ac29-39e4-47f1-af03-9352282d340c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}&amp;&amp;{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>27&amp;&amp;63</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>lb&amp;&amp;ea</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": ${DataFile#newQuantity0},
          "quantityUom": "${DataFile#newUom0}"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": ${DataFile#newQuantity1},
          "quantityUom": "${DataFile#newUom1}"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="08146fa0-f78a-4cfa-bf75-62ada5cbd505" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_031" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="164d5f87-c692-461e-b399-72f63bf2f326"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="249a1897-db2e-446c-8dea-816d0614b288" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c6dbe92e-bb28-4bc3-9d6b-70acae4d4400" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="e6b7ee66-afdc-4662-8535-b697565a7029" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="bb56422e-0d68-4390-a053-a7793a6ae6fd" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1f1aad56-abd4-492e-a651-56fac638d087" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="1cef99d1-9b0d-4d13-81b6-bfe338a57638"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	//End of Execute Pre Steps
		
	//Execute Delete_Group Step
	def restStep1Result = testRunner.runTestStepByName(restStep1);     
	def restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	
	restTestStepList.add(restStep1); 
	restStepsStatusList.add(restStepStatus);  
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="581d85b1-0da8-46eb-94a8-1854691c755c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="3151e914-e2b9-4d52-ab00-7bd66f6061ff" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a77ee011-41f8-417e-b416-8d95489b3839" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#groupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="cc7c8c13-89a0-4a3e-b026-80e1007b38ad"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value/></con:property><con:property><con:name>itemId</con:name><con:value>0026906</con:value></con:property><con:property><con:name>groupId</con:name><con:value>c5e39b90-3436-48ce-a0e7-24795ed80a06</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="55a57f2a-45fa-4047-9157-cc304df2ed1e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value/></con:property><con:property><con:name>itemId1</con:name><con:value>0026906</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="150a00e4-fed3-4ef4-8410-005570e40076" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_032" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="5c833608-72ae-4701-b4dd-d3e12bf1c4e1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="05f6fc39-ce0b-4546-9f84-fbd2fe7dda7c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="aee66ba1-7594-4910-8650-92a51d601afd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="9480ff0c-ad1a-4c52-b224-a0c6a38adfd7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="7348a9dc-adb4-448a-9a20-74897ccb5ea4" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bf3fb3f8-f071-4d6d-b1e8-f75db1c635cf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="778671bf-5ffa-4b15-9730-c02ad12f7ca6"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	//End of Execute Pre Steps
		
	//Execute Delete_Group Step
	def restStep1Result = testRunner.runTestStepByName(restStep1);     
	def restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	
	restTestStepList.add(restStep1); 
	restStepsStatusList.add(restStepStatus);  
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="cf80a7f0-c85d-4cae-8719-437ad5680ded" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b61ab873-0d0d-4fe2-9c4a-249ad07f77df" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bbd4b088-f749-4f07-9279-9983f8ae3a22" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#groupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="f8a29cf3-768c-4666-98cc-7b5811d49eec"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value/></con:property><con:property><con:name>itemId</con:name><con:value>0026906</con:value></con:property><con:property><con:name>groupId</con:name><con:value>3a3d24fa-66f2-4a17-b6b6-83200066ba9d</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="14119f8a-5f53-4566-90a0-9868e5bb0d2c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value/></con:property><con:property><con:name>itemId1</con:name><con:value>0026906</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9384e55f-aa1b-42fc-803a-440b29e8c5e3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_033" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="f0a1dc35-a747-4f77-b746-564cc81b783d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f1d43b3d-08c8-4f9c-8f7f-9c314a186335" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5141d750-1694-43bd-803e-941930b4537d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="9abbf3e4-e19b-4904-ab0e-1c27d1a4dd2e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="74dc43e9-b0a5-4098-803c-4bb681dd05c6" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="99f124e3-601f-4abf-ba69-16db4ddbde00" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="abc97859-510e-4433-8d7b-3fd5689fa2f2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5ba3fa94-7e0c-4f31-84f6-78dd3ee57427" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="541ab3d8-1969-48db-a304-a7250c1fb84f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="9284d089-0f43-4f7c-9c11-07fb18a7e5fd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="c1dff8a0-603b-4a8e-a544-9e6a32362f88" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6e59cf5a-9972-4d7d-a57e-b500ff1b0d48" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="68edbcd9-e1e8-40d0-96d1-f58f8390f093"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Delete_Group";
def restStep3 = "GetInventoryById"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j &lt; itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Delete_Group Step
	def restStep2Result = testRunner.runTestStepByName(restStep2);     
	def restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	
	restTestStepList.add(restStep2); 
	restStepsStatusList.add(restStepStatus);	
	
	
	//Execute GetInventoryById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="c4440446-e5a7-4a5c-9cf4-aacdb0efc67f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f5054bd8-f7b1-4895-b56f-0b2cc944137c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="d8fa2b40-052a-4290-8730-196063c04502" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1736a462-a48d-4527-97d5-e9e25c50781b" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0be9992f-32e6-4b0b-8e78-ffc66a7f128d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#groupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="03db8fc0-45ec-4674-a8b3-51f0c198fe7a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>no location</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a7cc9f9e-ca62-4357-91b0-f87f7b9d7a2e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="ac05950b-3096-4787-a2c4-cccc7c34d167"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>717d5a11-b99d-4e7a-a130-6dca3fbbed9d</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>5553b3d9-70c6-4641-a28e-1f0d998d8d85</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>5beab6b4-2554-4d2f-9130-2fb85d934ec9</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>118aa080-28e4-45a8-85b1-86f11088faef</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>72eb2242-7941-4743-9a90-0ead38177bd5</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="7a3ad1f9-45e4-43c1-85ee-4218c5e06246"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}&amp;&amp;{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6e5d26fa-9842-4f2b-936f-3725baebebf0" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_044" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="14ec63a9-99d8-4425-bfb1-94c6b4b503c2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="35cc314b-a0df-4143-b633-9d5a391f2fbf" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="f48d14ae-9ab9-4b62-b004-6a1cdaca1d3e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="91015a42-52a4-41d3-be6d-d89ab01d1c84" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="3341955b-3791-4bd0-b965-8a539302c0f3" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ca9aafb3-fb84-45aa-8134-fdd5b9ccfba9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6ddf83f9-9c7c-4d20-ac45-264a3510e665"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_NewGroup";
def restStep3 = "Update_Inventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId0",groupId);

	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Create_NewGroup Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def newGroupId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId1",newGroupId);

	//Execute Update_Inventory Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="4c00fee0-83dd-49a7-9e5c-99e0cd8b1bb9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a056a9b1-f11e-413c-8816-31ae6b6a8561" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NewGroup" id="3896f1f6-6c80-407a-88c2-a5aa961c5172" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NewGroup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="8f13a7e7-ba52-490e-bcd2-1f82d387c6b0" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="dd41dfea-b21f-4cbd-8031-39de81b93e7b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b9411e87-5c3b-4e8f-926a-933f71915aff" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="e9ab004a-7dc0-4881-878e-54632f0b3636"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "ea",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "ea"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 555,
      "priceUom": "ea",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "ea"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>55e58e54-5f02-48b1-b6f0-5777c674b2a0</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>160f9793-f042-4941-8605-75a792c7c63f</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>5855c324-e9d9-471d-b3ae-b3a482fa533c</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="eb24091e-dca6-4783-bba2-8f8d5b6251f8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "ea",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "ea"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 555,
      "priceUom": "ea",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "ea"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="dd602dea-2a8b-4333-9407-7aedbc33d7f4" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_045" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="bb5234b5-627c-4ac6-a950-601f8928bfa4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel

def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="9da3679c-9231-4dfb-92c3-1a5d457828e2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="762137fa-c839-45ef-b400-624a60081112" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="66f46deb-c108-4748-b833-0dee4a11e5fa" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="8ab8f76e-f9dd-425d-ab57-b281cbfee73d" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c0b6a68-f8ed-4753-b0ae-8bacaf2eab31" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="7f301682-5bc2-438a-b86e-bce04b628a07"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Update_Inventory";
def restStep3 = "GetInventoryById"
def restStep4 = "Validate_GroupId";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     } 

     int noOfItems = itemArray.size();  
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("noOfItems",noOfItems.toString());

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);	
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Update_Inventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	// Execute GetInventoryById Step
	def restStep3Result = testRunner.runTestStepByName(restStep3);	

	// Execute Validate_GroupId Step
	def restStep4Result = testRunner.runTestStepByName(restStep4);
	groovyStepStatus =restStep4Result.getStatus().toString();
	restStepsStatusList.add(groovyStepStatus);	
	
	//add Status after running the Validate_GroupId Step	
	restStepStatus =restStep3Result.getStatus().toString();	
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);

	// Remove Assertion after updating report
	def groovyRemoveAssertionStep = testRunner.runTestStepByName("RemoveAssertion");
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="34f6f15f-928b-4ded-87fc-1910a1b3ad0b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1e40a29c-15ac-4310-a857-e1076faeb327" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="1302683c-e3f9-4f3a-8a9d-ea0e5ba17590" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="482f1eae-54a4-43e4-bbbb-201f4a666668" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="fee4be3c-ee2d-437d-9c8a-1ce86e5353b0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="XPath Match" id="65752ef5-b9ed-461d-a26e-7ef36923c4f1" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>${DataFile#inventoryId_new}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e228647-e41a-4cb4-bb8d-95a245fb634f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStep2Response = context.expand('${Create_Group#response}');
def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);	
def groupId = jsonRestStep2Response.id;
log.info("groupId::::"+groupId);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def invGroupId = jsonRestStepResponse.items[0].groups[0].groupId;
log.info("invGroupId::::"+invGroupId);

int invItemsSize = jsonRestStepResponse.items.size();
log.info("invItemsSize::::"+invItemsSize);

def noOfItems = context.expand('${DataFile#noOfItems}');
log.info("noOfItems from datasheet::::"+noOfItems);

for(int i = 0 ;i &lt; noOfItems.toInteger();i++){
	def dataSheetItemid = context.expand('${DataFile#itemId'+i+'}');
	log.info("Datasheet itemid::::"+dataSheetItemid);
	def invItemId = jsonRestStepResponse.items[i].id;
	log.info("invItemId::::"+invItemId);
	assert dataSheetItemid ==  invItemId : "ItemId from the datasheet and in the Inventory are not Matching";
}


assert noOfItems.toInteger() ==  invItemsSize : "No of Items in the inventory is not matching";
assert groupId ==  invGroupId : "Group Id is not Matching";



</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f1c55fc5-6573-401a-9be7-f046b8a6644b" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate_GroupId" id="7b2cec9e-00d1-4500-ae70-924f6790ed7a" disabled="true"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


def restStep3 = "GetInventoryById";
def restStep3Response = testRunner.testCase.testSteps[restStep3].testRequest.response.contentAsString;	
def jsonRestStep3Response = new JsonSlurper().parseText(restStep3Response);
int itemSize = jsonRestStep3Response.items.size;
log.info("itemSize:::::"+itemSize);
boolean getStatus = true;
int itemIndex = 0;
for(int m = 0; m &lt; itemSize;m++){
	int groupSize = jsonRestStep3Response.items[m].groups.size;
	log.info("groupSize:::::"+groupSize);
	itemIndex = m;
	if(groupSize == 0){
		getStatus = false;	
		break;
	}
	for(int n = 0; n &lt; groupSize;n++){
		def grpId = jsonRestStep3Response.items[m].groups[n].groupId;
		log.info("groupId:::::"+grpId);
		if(grpId.equals("")){
			getStatus = false;
			break;
		}
	}		
}

def testStep = testRunner.testCase.getTestStepByName("GetInventoryById");
def assertioncontains = testStep.addAssertion("Contains");
assertioncontains.name = "Contains_GroupId"
if(getStatus){
	assertioncontains.setToken("id");
	assert true;
} else {
	assertioncontains.setToken("GroupId does not match");
	assert false;	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RemoveAssertion" id="fd9a6b5a-764d-4034-a35f-269228e7578c" disabled="true"><con:settings/><con:config><script>def testStep = testRunner.testCase.getTestStepByName("GetInventoryById");
testStep.removeAssertion(testStep.getAssertionByName("Contains_GroupId"));
</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="27ab4a0b-563a-4a4b-a907-2c2d5fa915d6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>a9cc9c81-1096-4c37-ac6d-2c08fe138403</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>0026666</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0026906</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>7dd1eff5-f762-4195-98a1-5ca7affc6351</con:value></con:property><con:property><con:name>noOfItems</con:name><con:value>2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="9b070ce6-4a5c-4986-9492-1027b4c281a6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0026666&amp;&amp;0026906</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="25e582cf-8437-4bac-b815-36a3b426ddcc" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_049" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="a2e261c2-5d94-4ae3-aa7c-35244b43ed40"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f4f07c3e-2311-4391-aeef-59690a0c0ea0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="971442d9-6421-45df-a991-92a53956cd01" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="61c773e3-d0e0-404f-bcd3-80df7d710a03" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1e32f553-c3cd-4e87-bdd6-8f065209d325" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e64727a1-53e6-42fc-bf0d-0469a31f03b5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="cf1243ca-4f41-4643-b772-bdf0f74d7e5c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ed858e39-9901-49ea-a970-035c1d6c6cbb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="adab5e74-6526-4ca4-9ab2-e460496e5f32" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="742a87e2-22b5-434d-ad13-6f9d9a2542f1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a99b734b-91d6-4987-a478-99e9350aa34a"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Supplier";
def restStep2 = "Create_NonSyscoProduct";
def restStep3 = "Add_Item";
def restStep4 = "Close_Inventory";
def restStep5 = "Update_Inventory";
def restStep6 = "Close_Inventory_1";
def restStep7 = "GetInventoryById";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName12 = "addnlGroup";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);
	
	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	
	//preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);


	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Create_Supplier Step 

	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def supplierId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//Execute Create_NonSyscoProduct Step 

	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def itemId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	//Execute Add_Item Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute Close_inventory Step
	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);

     //Execute Update_Inventory

	def restStep5Result = testRunner.runTestStepByName(restStep5);			
	restStepStatus =restStep5Result.getStatus().toString();
	log.info(restStep5+": Status::"+restStepStatus); 
	restTestStepList.add(restStep5);
	restStepsStatusList.add(restStepStatus);

	//Execute Close_inventory_1 Step
	
	def restStep6Result = testRunner.runTestStepByName(restStep6);			
	restStepStatus =restStep6Result.getStatus().toString();
	log.info(restStep6+": Status::"+restStepStatus); 
	restTestStepList.add(restStep6);
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step
	
	def restStep7Result = testRunner.runTestStepByName(restStep7);			
	restStepStatus =restStep7Result.getStatus().toString();
	log.info(restStep7+": Status::"+restStepStatus); 
	restTestStepList.add(restStep7);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="fe215946-ccea-4e76-a882-13d542c35184" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="79316a3e-d541-4e4a-8bfe-aead71eec183" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="80dcd7d5-95fc-4d35-a0bd-57b4231511ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="5ebd43aa-2e76-4519-9f7b-461d4215511c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="526a1f2a-07a6-4324-abc1-8c46e5d4cd78" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="74095b27-245c-4a99-b201-8c3d57fc4ff6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Add_Item" id="b5035ad3-b354-4752-92b5-f9cd04c80086" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add_Item" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a37a9b4b-3e47-4808-bd4d-38f230658f28" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Close_Inventory" id="b81e4a0e-af1f-4980-b46e-2622f35f7395" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Close_Inventory" id="c674ecc9-1178-4dfd-905a-845d1e2fa1ce" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/426ecdc4-a17d-4846-bf1d-bcfeea92b01d/complete</con:originalUri><con:assertion type="Simple Contains" id="a3a2e268-ac32-4745-968e-7e07c8852d64" name="Contains"><con:configuration><token>"message":"Expense Category is missing for item:</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="be3197ac-c7f6-47cd-a15d-73cf9a6ac0a2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="875ba311-e43e-4c1f-ba6c-c595f63b37af" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Close_Inventory_1" id="bc040af7-2802-4aa9-8cb7-179a310d24c2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Close_Inventory_1" id="c674ecc9-1178-4dfd-905a-845d1e2fa1ce" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/426ecdc4-a17d-4846-bf1d-bcfeea92b01d/complete</con:originalUri><con:assertion type="Simple Contains" id="a3a2e268-ac32-4745-968e-7e07c8852d64" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b525e232-35cf-4442-8bcc-09ea65cf953f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId_new}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="a2885ee3-0d2b-4bfb-a822-91351b355e85" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b6fbafef-8f14-4b45-a39e-c90d669d44a7" name="Contains 1"><con:configuration><token>"state":"closed"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c6ae8e7b-8f8d-42d6-87ce-5fdb768fbc99" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="311dfe01-5cd7-4179-80b0-4034ac91aef7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>16f4244d-aee1-4f80-b65d-088aed6dd057</con:value></con:property><con:property><con:name>groupId</con:name><con:value>798b3c32-f131-4009-90d8-3e09564c8304</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>1f77452e-c4ed-45fb-8b8b-aae0d8b8567b</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
       ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>a16a46f5-b4d5-401b-9f5a-1147c6bca172</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>15aea386-557c-4630-b46b-5e7058c590e3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="c7315531-518e-4bef-81e4-b26f23dc429b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
    "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
       ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d9ef8a80-0625-4bd4-964c-b128a64525c8" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_050" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="c574b57e-4113-43fc-a4f4-fac465f02cf6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="9bfba3fd-0eca-4411-9cf5-07ad1be6bd62" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="39d68729-57d2-40ec-8a80-a2b9f044f02e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="533d6913-ee0e-44d4-a7f2-bb09b06d5e48" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="508a8c7a-d005-4b2b-9859-dfe85455eb16" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="522a35b4-2108-43f6-9283-72f675601a7e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="4c6830db-ad13-4dbb-8754-45a400eddc6d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ed858e39-9901-49ea-a970-035c1d6c6cbb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="5e3530f4-76d4-44fa-963f-d12f8dde195f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="168e82f3-c3b5-4eb1-a65a-0a0abd0bf16e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d589614c-e817-4c2f-9422-da44ed94fed9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="62c2a846-31e9-4ffa-b171-014cb2a5a35a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="59aa80ac-2ba1-4eb7-a504-900b72ddfa50" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="177a0496-186a-4455-9129-5556ab3e930f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="b696cdb7-6218-4ba0-a89c-01fb3670d4e2"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Close_Inventory";
def restStep3 = "GetInventoryById"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName12 = "addnlGroup";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);
	
	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);


	//preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j &lt; itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Close_inventory Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="2b2ed25c-b016-4b87-a182-216ab2dc89a3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3da6500e-d92d-4d22-ba19-a9ff968d8c07" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Close_Inventory" id="30008013-179e-4e22-8a6f-c74434e90622" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Close_Inventory" id="c674ecc9-1178-4dfd-905a-845d1e2fa1ce" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/426ecdc4-a17d-4846-bf1d-bcfeea92b01d/complete</con:originalUri><con:assertion type="Simple Contains" id="a3a2e268-ac32-4745-968e-7e07c8852d64" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="92f20e62-a993-4cb3-9d9c-b9d252726ef9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId_new}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="bf22d6a9-6e2d-4a83-8f14-2f008f772098" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b6fbafef-8f14-4b45-a39e-c90d669d44a7" name="Contains 1"><con:configuration><token>"state":"closed"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="064b1505-b2e4-4c85-81dd-26bdff5dfc8d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="4d31433f-e0c8-41ae-b097-ecf99a230cc0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    },{                             "id": "${DataFile#itemId1}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>1c723b90-174c-450d-bb81-26dc5dc0530a</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>fced874d-5be2-4dbe-b341-0a8d371fb063</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>2b7f8b3a-297a-4ad4-924f-2b7d614ddde3</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>bf3f515f-d749-4155-80ce-aa12d693e5f9</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>1593478f-0973-462a-89e2-fab2237926dd</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>b0062d5a-458d-437f-8261-f665d7929966</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="d5edab1f-6645-4364-8eb0-ab4559faeba8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    },{                             "id": "${DataFile#itemId1}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}&amp;&amp;{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f96405b7-735d-4351-8cdb-e6fd5a2fff66" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_054" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="33d84fd8-9b1a-436d-aff1-75265237206f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="5f403d72-a025-4015-8b84-3ff2059da834"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Supplier";
def restStep2 = "GetSupplierById";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);	
	//End of Execute Pre Steps
		
	//Execute Create_Supplier Step
	def restStep1Result = testRunner.runTestStepByName(restStep1);     
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def supplierId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);	
	restTestStepList.add(restStep1);   
	restStepsStatusList.add(restStepStatus);

	//Execute GetSupplierById Step
	def restStep2Result = testRunner.runTestStepByName(restStep2);     
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus); 
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="6f5411a9-0f0e-4022-803e-d942778785dc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="bda7fa87-caa5-4ec8-a67e-192909bc6ce0" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="8be13709-0708-42d5-bcd3-f148f01f216d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="9149859d-ea75-40ec-a334-510d5f8a44df" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b7aedfba-0390-4ce7-93aa-32b0046b532d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetSupplierById" id="a500b7dd-a5cc-4e34-8b88-577cba754805" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers/{supplierId}" methodName="GetASupplierById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetSupplierById" id="e18e929f-e339-47eb-866e-7d0e456121aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers/</con:originalUri><con:assertion type="Simple Contains" id="6e30d012-5715-4a18-ae26-d71b84648319" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5bf4bc16-7e14-4502-9c66-8e5408e96b9b" name="Name"><con:configuration><token>name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="dcffccbd-8c4c-4b5c-8969-b3b19f439b64" name="phoneNumber"><con:configuration><token>phoneNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e6375cb4-c0f4-4531-b267-c4d4e77dc302" name="address"><con:configuration><token>address</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8acdc910-3287-4073-ac5c-6571376b2008" name="contactInformation"><con:configuration><token>contactInformation</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="81a77024-d9cc-47c7-8c09-d3b06da1b221" name="emailAddress"><con:configuration><token>emailAddress</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f27d5776-9c70-45aa-af93-e39d3f135126" name="notes"><con:configuration><token>notes</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f99bb9fa-a449-420d-82cd-17cd178c37b3" name="comments" disabled="true"><con:configuration><token>comments</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4efaadb6-438b-4ba7-ba82-d94f83dce37f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputCustId = context.expand('${DataFile#cust}');
def inputOpco = context.expand('${DataFile#opco}');
def inputSupplierId = context.expand('${DataFile#supplierId}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierId = json.id;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resCustId = json.associatedAccount.customerId;
def resNotes = json.notes;

log.info("Service Response:Supplier Id::" + resSupplierId);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Customer Id::" + resCustId);
log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Id::" + inputSupplierId);
log.info("Input Request:Customer Id::" + inputCustId);
log.info("Input Request:Opco::" + inputOpco);

assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert resSupplierName != null : "Supplier Name is null";
assert resSupplierConInfo != null : "Supplier Contact Information is null";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert resNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="supplierId" value="${DataFile#supplierId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="a5015011-6c04-4f9e-a13b-273e5d18b57e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>NA</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>a411702b-c394-4100-ab6a-c800bed7ebec</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="f7b47a20-d6e7-426e-aeab-7d7222a6567f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>NA</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "Sweets5",
  "contactInformation": {
    "address": "RN Nagar5",
    "contactName": "Shamly5",
    "emailAddress": "Shamly5@gmail.com",
    "phoneNumber": "9846032795"
  },
  "notes": "SweetsNagar5"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b442e29b-c315-4184-8aca-90400b5bcd77" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_055" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="d46ef265-ef0c-45a8-be82-9d93f35de039"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="222796a7-57be-4847-85f0-c8e772f27684"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "GetListofSuppliers";
def restStep2 = "Create_Supplier";
def restStep3 = "GetListOfSuppliers1"

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);	
	//End of Execute Pre Steps

	// Execute GetListofSuppliers Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);     
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
		
	
	//Execute Create_Supplier Step
	def restStep2Result = testRunner.runTestStepByName(restStep2);     
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def supplierId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);	
	restTestStepList.add(restStep2); 
	restStepsStatusList.add(restStepStatus);  


		//Execute GetListOfSuppliers1
	def restStep3Result = testRunner.runTestStepByName(restStep3);     
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="a344a585-830b-4545-a1ad-ee2fcdac032a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="347d864a-f619-4f1a-aaab-499d70bc9488" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetListofSuppliers" id="f487a726-b695-41b0-bb06-cddd6ae8e572" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="GetListOfSuppliers-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetListofSuppliers" id="59204295-58d9-462d-824d-da9d6f214db9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers/suppliers</con:originalUri><con:assertion type="Simple NotContains" id="76f7c54d-149c-4b53-9cf5-26ed02ecec31" name="Not Contains"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="c52c055a-2535-46f9-a77c-50e3cdd8fe5c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="24cfbd16-1708-4b17-a800-dc157090debd" name="Contains 1"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b0adfe97-9e17-4b27-8832-d1b62ffdd529" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="32d8af2e-ac0b-4e3b-8777-fe194b8e2410" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetListOfSuppliers1" id="7306157e-b1d0-48d7-9d9e-a41aa60a2dc2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="GetListOfSuppliers-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetListOfSuppliers1" id="59204295-58d9-462d-824d-da9d6f214db9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers/suppliers</con:originalUri><con:assertion type="Simple Contains" id="af0cb20f-4fa7-4636-a64b-a656b79db4f0" name="Contains"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="679e4828-1676-462d-ab70-fb2e009272e9" name="Contains 1"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="43af0393-2cde-4dcc-9c24-c55fa15aed93" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputCustId = context.expand('${DataFile#cust}');
def inputOpco = context.expand('${DataFile#opco}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

int supplierSize = json.suppliers.size();
log.info("No Of Suppliers::"+ supplierSize);
for(int i=0;i &lt; supplierSize;i++)
{
	def resSupplierId = json.suppliers[i].id;
	def resSupplierName = json.suppliers[i].name;
	def resSupplierConInfo = json.suppliers[i].contactInformation;
	def resOpco = json.suppliers[i].associatedAccount.opCo;
	def resCustId = json.suppliers[i].associatedAccount.customerId;
	def resNotes = json.suppliers[i].notes;	
	
	log.info("Service Response:Supplier Id::" + resSupplierId);
	log.info("Service Response:Opco::" + resOpco);
	log.info("Service Response:Customer Id::" + resCustId);
	log.info("Service Response:Supplier Name::" + resSupplierName);
	log.info("Service Response:Contact Info::" + resSupplierConInfo);
	log.info("Service Response:Notes::" + resNotes);
	
	log.info("Input Request:Customer Id::" + inputCustId);
	log.info("Input Request:Opco::" + inputOpco);
	log.info("Is Supplier deleted:::"+json.suppliers[i].deleted);
	
	assert resSupplierId != null : " Supplier Id is null";
	assert resSupplierName != null : "Supplier Name is null";
	assert resSupplierConInfo != null : "Supplier Contact Information is null";
	assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
	assert resNotes == resNotes : "Response Notes is not matching with the input request Notes";
	assert json.suppliers[i].deleted == false : "The Supplier is deleted";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="858a3c38-ade2-459e-8866-38f5352d3721"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>6766d881-c9ba-43a3-91da-3c18718f02a8</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="fcea331f-1194-4cf8-aa16-2646bb6ea7aa"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "ButterMilkwallah",
  "contactInformation": {
    "address": "Anna Nagaqr",
    "contactName": "Deepika89",
    "emailAddress": "Deepu@gmail.com",
    "phoneNumber": "9841432895"
  },
  "notes": "SweetsNagar68"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7c9ed29c-0075-4763-98ab-4b07d87c5ce3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_062" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="33699ddd-8289-48bd-a5bf-0c10789b2cd7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="0b905e65-b5dc-4410-864d-d07a407a2a8f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="9fe02672-7587-4dfe-b512-7de652ace9e3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="1a915513-c78b-4590-936c-8808c20d9455" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="7cc57db1-ed87-4be7-a136-8783e7b24d71" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2f333790-b40c-4f18-a893-ea07f9514b88" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="55365cfd-171f-4677-ac9c-5e0dba3ea351" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ed858e39-9901-49ea-a970-035c1d6c6cbb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="99ea6475-e7eb-450d-a9e2-2810bf73e46d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d86a5657-3833-4182-8f7b-dc903e63b916" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cb04b4aa-5803-4ea2-a8ab-42831126262d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="7cec5643-33b0-49c3-beca-d9c1a29f3857" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="9e0cd4d8-e091-4194-87c2-c88ff07f5276" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="34c9e9fb-62f9-4781-ab1a-e6ad1d0ff20b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="cc07c670-e50f-4a3d-a611-7d9e13c8c313"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Inventory";
def restStep3 = "Close_Inventory";
def restStep4 = "GetInventoryById";
def restStep5 = "GetAllInventoriesForAnAccount";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName12 = "addnlGroup";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);


	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j &lt; itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Create_Inventory Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute Close_inventory Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step
	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);
	
	//Execute GetAllInventoriesForAnAccount Step
	
	def restStep5Result = testRunner.runTestStepByName(restStep5);			
	restStepStatus =restStep5Result.getStatus().toString();
	log.info(restStep5+": Status::"+restStepStatus); 
	restTestStepList.add(restStep5);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="c51267c6-5373-4266-a97d-d8cc84ad1312" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="761094a0-348e-453f-88b2-cf7862252e84" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="63a6f3de-d92a-4fb1-bf5a-57cfeca6ceab" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>"message":"Cannot Create an Open Inventory When One Already Exists"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Close_Inventory" id="54a647dd-a2fa-453c-8e5f-a89cd56981cd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Close_Inventory" id="c674ecc9-1178-4dfd-905a-845d1e2fa1ce" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/426ecdc4-a17d-4846-bf1d-bcfeea92b01d/complete</con:originalUri><con:assertion type="Simple Contains" id="a3a2e268-ac32-4745-968e-7e07c8852d64" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51b305fe-25cc-4fa8-9359-55b4159606dd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId_new}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="8508e73d-f539-4e7c-9288-7b86d3c57a67" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b6fbafef-8f14-4b45-a39e-c90d669d44a7" name="Contains 1"><con:configuration><token>"state":"closed"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2da1bf38-9217-492c-8bb5-51f52b0e828f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllInventoriesForAnAccount" id="09af77f0-2b08-474e-a829-04fbd0c7d097" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="GetAllInventoriesForAnAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllInventoriesForAnAccount" id="7e782836-e489-4e82-ac3a-89b843a35200" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="GroovyScriptAssertion" id="f59e828d-5f44-4826-a877-3f0bab604926" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;
def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
def inventoryId = context.expand( '${DataFile#inventoryId_new}');
assert json.inventories.id[1] ==  inventoryId ;</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="fe63ea3f-9f9d-4113-8bfe-7b09be7eb1c9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    },{                             "id": "${DataFile#itemId1}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>14ae413e-7a0b-4361-b0c0-aa572dc72751</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>3d497142-306b-4db5-b5ce-321dd9ee0b82</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>5d37d77e-9067-41a5-93c3-e62d348face0</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>6498d2aa-9b78-4a72-8b3d-74f7605ca795</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "ea"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>670c8af4-1e58-43d0-87ee-ca01ea23378f</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>7954450f-e567-43c6-91f3-05f397edb815</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="c31f5eb9-50ce-494f-8e9c-780696451403"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    },{                             "id": "${DataFile#itemId1}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "ea"
  }
}&amp;&amp;{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "ea"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ce050c60-6d4d-4759-b1a4-e9928df0c23c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_072" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="59e31710-b352-43ae-a089-27ab9076d98a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="1d1dd4d2-8fc8-4340-8977-63e338fc67d1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d4cf6862-2788-469e-844c-7cd4dc976496" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="cd368da1-551b-4cab-af36-9c248da787aa" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="9b8753dd-b011-4460-a7fd-faaeb49da012" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="55abe556-145c-4c93-aff0-ee183315f109" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="9d607b3e-33c8-4930-bc53-255e854083bd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="7d87cd8d-7f3f-482e-9ee6-5c4f92888da7" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a7329783-ea7e-4a3f-be66-63b403290b8c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="02e84c25-339f-4a02-89c6-ca6971c0faf9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="0392114c-85e9-4b8e-9a1e-67b6682aa215" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="adca2db7-88d1-4f58-b580-f4e7fb0608ad" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="be65e9e1-ea94-4388-9b23-204d8df9b6f3"><con:settings/><con:config><script><![CDATA[import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "GetInventoryById";
def restStep3 = "ViewInventoryByAcc";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i <= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&&");
     for(int j = 0;j < itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }

     def groupArray = propData6.split("&&");
     for(int j = 0;j < groupArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,groupArray[j]);	
     } 

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j < groupArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+groupArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j < itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute GetInventoryById Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute GViewInventoryByAcc Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="c2c907e7-1224-4fe8-b72c-b17edaaa0063" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "items": [
    {
      "id": "${DataFile#itemId2}",
      "price": 100,
      "priceUom": "oz",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "oz"
        },{
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "oz"
        }

      ],
      "customerImages": [
        "string"
      ]
    },
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "oz",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "oz"
        },
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "oz"
        }

      ],
      "customerImages": [
        "string"
      ]
    },
     {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "oz",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "oz"
        },
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "oz"
        }

      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e476b007-d8de-4216-b8eb-6272fff9b156" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="67c90929-bf64-455e-ae10-c2b7951c3e94" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fb9692f7-d0b3-413f-9741-2c7b67325001" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewInventoryByAcc" id="2aa04f3e-0672-4473-b4da-484e2dadef1a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="GetAllInventoriesForAnAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewInventoryByAcc" id="ebe255d8-a5ce-444f-ba96-b1b10b6241d2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/inventories</con:originalUri><con:assertion type="Simple Contains" id="8c40ee67-eadd-4424-9df6-338b0d847ac5" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="fc7d8e1d-9ee1-4e4d-bee2-6c4e6ab0c453"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId2}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },{
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }

      ],
      "customerImages": [
        "string"
      ]
    },
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        },
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }

      ],
      "customerImages": [
        "string"
      ]
    },
     {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "cs"
        },
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "cs"
        }

      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>541e248e-634e-41e2-a157-5442b72e7bab</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>ae8460f9-8652-4a7f-85dd-fcb6e5fd3edd</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>35f43795-7cbb-48e9-822e-c4322faf1a14</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Grapes",
  "materialId": "23421",
  "supplier": "${DataFile#supplierId}",
  "brand": "USGrap",
  "description": "US Grapes",
  "nickName": "US Grapes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>b9ca6912-7b0d-41ed-a83b-a8dcdbb9dfc2</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId2</con:name><con:value>aa034898-c01f-4505-ad70-c2a35b420042</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>2c97bd90-8866-43f6-9d35-1d7ced5ac3c2</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>b5e5b70e-4dd5-4879-843d-70f5052e694a</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="86c10533-d23e-4881-8c9b-bd998b902e7b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId2}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        },{
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }

      ],
      "customerImages": [
        "string"
      ]
    },
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        },
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }

      ],
      "customerImages": [
        "string"
      ]
    },
     {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "cs"
        },
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 3,
          "quantity": 2,
          "quantityUom": "cs"
        }

      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}&amp;&amp;{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}&amp;&amp;{
  "name": "Grapes",
  "materialId": "23421",
  "supplier": "${DataFile#supplierId}",
  "brand": "USGrap",
  "description": "US Grapes",
  "nickName": "US Grapes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f0f47ee7-2aea-481e-90d9-dfbe78a5b46a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_077" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="fb335974-aad4-494b-aff9-505882335d87"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="3a1649a5-ea23-498a-9b4e-4c111066ef68" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7ece6ced-f8b9-4cfc-8f17-4bbaaa6e382f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="d4c44693-1648-45ec-b4d8-723a407dae2c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}

</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="154669f1-1f9a-451a-bd3b-c8e0dc25c2b0" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bb9160d6-0153-428c-90c7-26f5fef689ca" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="115d620a-53ad-413b-b136-f7a4f2784287" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="19521142-e356-467c-b71f-5f91f0193970" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="b6dab1f0-2d60-42f4-b005-3537c97deb09"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Inventory";
def restStep2 = "Update_Inventory_1";
def restStep3 = "GetInventoryById";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Update_Inventory Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute Update_Inventory_1 Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);	
}

def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="b691e217-ca0a-42f0-8519-2bd6f83837f6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a89f1011-cfe3-41ab-9afd-c55d67dc675e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory_1" id="76d5d7a8-e24f-4a4a-87be-660c2c363aa2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory_1" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="06d05e18-8099-4789-803f-5bc7fe05bd56" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="e606b112-5c7f-4f82-b041-3cf8e217108b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f2f84a7c-df3b-4f0e-a590-6ae4c2616022" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="61cf07c2-189e-44d6-9967-b69b37a322a5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 100,
          "quantityUom": "cs"
          }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0026666</con:value></con:property><con:property><con:name>groupId</con:name><con:value>47d4ccc3-58ed-40e4-be0e-8aef658edacb</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 13,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>96871cc4-96ba-43c5-8f22-fbc93b02eba1</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="bec16a9d-6b6e-411e-9c91-33dd7aef8be4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 100,
          "quantityUom": "cs"
          }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0026666</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 13,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d0d784bb-60ce-4822-99e6-e9781ced251a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_079" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="d55cf55b-88c5-4837-96d6-02237f9bd1a0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="ab7817de-4179-438c-90f5-866ff8a0b96e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4dea071c-e484-4232-a246-c3a0ffea4840" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="d3e61022-9960-45e6-ae95-73d9eaedf4d4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5d537a70-1d3f-45d6-abdd-13f0d2dca414" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="08c4028d-53df-48f8-ae0c-8bac0fa260dc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="d3e79dff-85cf-47fe-a54e-e152b859f81c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="84859f4f-ae0e-4688-8681-68a59ad336ca" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8403019a-8bbd-457c-8749-db8ea129780e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="7e8da113-583a-4cbe-893e-0da5ef6767e3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="40a90082-5a7f-4475-905a-8410cf114aef" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5a197128-e798-4c83-a354-d6609ebca0db" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="587f65b8-5a47-42eb-9cea-6550fe010d12"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Update_Inventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
		
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Update_Inventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);	
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="b3f7b230-0307-4244-9ab5-384cdf571df0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f73c7c28-5714-4e06-9866-b1c502cd84e4" name="Contains 1"><con:configuration><token>"groupId":"${DataFile#createdGroupId0}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="40ebc353-1f14-4f61-a315-e04902d09e37" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="6573125c-02cb-494e-b50f-dc41cbc35870" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e2a40f2c-4a0b-448b-b1f1-1770032ec842" name="Contains 1"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6727128b-c1ba-4343-8d67-1bddfc3ed097" name="Contains 2"><con:configuration><token>"groupId":"${DataFile#createdGroupId1}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f1408876-64c8-41ae-997f-09e0bad0727d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="0662ae3d-e14d-4168-aef4-e52ded0173d3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>c2d62145-6d78-4ab2-8b6a-a00188e1f3f5</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>fdc6cf92-473a-452a-945a-793add46b577</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>1ff44a1f-7c51-4ce3-86a2-50801e16d8bf</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>9bd6595a-4ccd-45db-a7d9-e342f9bd9c60</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>bce752a6-f164-4039-9f81-76c9807b1aee</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="9193deea-a611-44db-a540-6c9e1ee2f08e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId0}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a164f529-1201-47fa-abbf-a68c6e47c60f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_080" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="c14ecb9b-2748-4af7-b256-6bab47c92036"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="94bc07a7-e040-4a9a-94dc-14674238ff78" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="581c9605-d7fc-4eb3-85d5-6008581d5487" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="2c0584c9-3530-4e48-a697-c026603edc28"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group_Location";
def restStep2 = "Create_Group_Expense"
def restStep3 = "Update_Group";
def restStep4 = "Update_Group_0";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }   

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);	
	//End of Execute Pre Steps
		
	//Execute Create_Group_Location Step
	def restStep1Result = testRunner.runTestStepByName(restStep1);     
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def locGroupId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("locGroupId",locGroupId);	
	restTestStepList.add(restStep1); 
	restStepsStatusList.add(restStepStatus);  

	//Execute Create_Group_Expense Step

	def restStep2Result = testRunner.runTestStepByName(restStep2);     
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def groupId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);	
	restTestStepList.add(restStep2); 
	restStepsStatusList.add(restStepStatus);  

	//Execute Update_Group Step
	def restStep3Result = testRunner.runTestStepByName(restStep3);     
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3); 
	restStepsStatusList.add(restStepStatus);

	//Execute Update_Group_0 Step
	def restStep4Result = testRunner.runTestStepByName(restStep4);     
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4); 
	restStepsStatusList.add(restStepStatus);
		
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_Location" id="e9931c88-ea5a-4582-a715-8bf15288ecca" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_Location" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId0}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e2f7970e-382c-48ca-8b5b-3c5ad2b602ef" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="80479e28-4d1c-43e5-91ef-e5712228a988" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_Expense" id="528f1f85-f2f9-4505-8d6d-e492fa11c676" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_Expense" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId1}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="acf4988f-19bb-4d71-8f35-343372665608" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="441b7672-85ef-4e9b-a124-2a1fd3c43c37" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Group" id="c67f9f05-b7bc-40b3-9784-6ba7b87e5791" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="UpdateGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Group" id="133681e7-b56b-42ae-b080-020fcf88448b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/12345</con:originalUri><con:assertion type="Simple Contains" id="1f862d62-22c5-4518-bd77-d72766ed11e5" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="bb01a614-df9f-4091-b4c9-7104e36a026c" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cdbb1a8a-2043-471b-b337-ab8d887dbefe" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def request = new JsonSlurper().parseText(context.expand('${DataFile#initialInput}'));
def newGroupName = request.name;
def newStorage = request.storage;
log.info("newGroupName from datasheet::::"+newGroupName);
log.info("newStorage from datasheet::::"+newStorage);

def updatedGroupName = jsonRestStepResponse.name;
log.info("updatedGroupName::::"+updatedGroupName);

assert newGroupName ==  updatedGroupName : "Group name is not matching with the datasheet";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Group_0" id="859e6407-7b3b-4f04-afd3-358b2aaa479d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="UpdateGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Group_0" id="133681e7-b56b-42ae-b080-020fcf88448b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/12345</con:originalUri><con:assertion type="Simple Contains" id="1f862d62-22c5-4518-bd77-d72766ed11e5" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="bb01a614-df9f-4091-b4c9-7104e36a026c" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cdbb1a8a-2043-471b-b337-ab8d887dbefe" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def request = new JsonSlurper().parseText(context.expand('${DataFile#initialInput}'));
def newGroupName = request.name;
def newStorage = request.storage;
log.info("newGroupName from datasheet::::"+newGroupName);
log.info("newStorage from datasheet::::"+newStorage);

def updatedGroupName = jsonRestStepResponse.name;
log.info("updatedGroupName::::"+updatedGroupName);

assert newGroupName ==  updatedGroupName : "Group name is not matching with the datasheet";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#locGroupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="e78dd8b9-7f99-47ee-8856-9a34ec17f8bf"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f32a1fb2-3c8d-4264-b13f-b45205f0ba1c</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "name": "groupA",
  "storage": "Freezer"
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "Mitaiwalah1",
  "type": "location",
  "storage": "Mitaiwalah12",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "MitaiwalahExp",
  "type": "expenseCategory",
  "storage": "Mitaiwalah12",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>locGroupId</con:name><con:value>96b65346-7454-4d2a-a329-b48f4cc57920</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="f51d4094-54ab-457b-b264-73187d1eae9a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "Mitaiwalah1",
  "type": "location",
  "storage": "Mitaiwalah12",
  "foodType": "food"
}&amp;&amp;{
  "name": "MitaiwalahExp",
  "type": "expenseCategory",
  "storage": "Mitaiwalah12",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "name": "groupA",
  "storage": "Freezer"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6a26f08c-93cd-43f6-a9d9-bfee07f6d82d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_094" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="ed47d8ad-f8ec-4ace-ba00-ec4dbd802d39"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="77377628-3329-4f23-b7ad-f20718645861" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5815a3f7-2d48-4a4f-a4f5-bf342b68a49d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="9a29ce1f-565a-4b30-b2e5-388222b27371" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="c5ba20bf-56f6-4b69-98a8-7e9d7acf780f" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="12bb780f-616e-451e-87b0-c39bdf89b8d5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="a2daaa02-ed22-4a4d-a1a5-edf65845c0f6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="7980fa26-47ca-4132-bcce-5fbcbe997d9c" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a96509a3-c2b8-446c-b76d-697ebf546634" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="68eeee59-568f-4573-8f96-0a0fa55ab751" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="ea2e94e9-4d81-427a-a996-9d3d55616b04" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3d94cea6-1a0e-4f53-95e3-c098d631f597" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="f5d22693-8913-4513-b678-c3906e634b93"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Update_Inventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
            

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
		
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	///////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="f3ab3de4-fd51-46c5-9736-adf78726a6ff" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a6b5e77d-4d38-4053-88e3-9d2c0e88c064" name="Contains 1"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d8394197-aee3-4ccc-a684-9ab0ebdcd2e9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="2df8ce5a-c024-4daf-9377-25fd00c8ab8c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
       {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>36511f7d-9cc4-4801-abfd-340244e6c5b1</con:value></con:property><con:property><con:name>groupId</con:name><con:value>4d59a93e-b712-4045-8d4c-d9ad6c3c13df</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>7301c648-7db7-4e1d-99d5-cc708e9c1fd3</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value/></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="f216c9a4-ac22-4a28-b59a-c379a125d2d3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
       {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value/></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7841f871-808c-4010-bc70-3a8c69d502d8" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_103" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="85c17f92-a005-4a24-9efe-87fb92124cd3"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="594f06a8-184e-4310-a8b5-5ab266503661" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="dc07a878-c9b0-4fae-939c-acf1126a269c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="16ad6370-e27b-4fd6-914d-7f8d0ec1ec88" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e9ddf412-92bc-470d-89f5-2e43680bc76a" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="04b3a2eb-701d-4f9f-9535-53ce56de33d7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="f0c431e5-698b-4cd3-b49b-147f900177f6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4d8db56b-a4a9-4ac4-a7a8-c5ca9a6ae1dc" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1878ed31-4573-4716-9c52-752a4e998be7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="7bc53512-a1c1-4efd-baf4-d6d2e3fc731b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="6399c14b-3e68-48d8-a7fd-c07145168bbe" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="01bc479c-126b-4884-951f-52b5bad018a6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a5c631a9-94f4-4be1-a4e1-43ef39e90068"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="299a75dc-9a36-4faf-a422-e8140f1e2f1d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3d0a73ae-14fc-4da2-8530-00d7bddb3624" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="e6efbb4d-442d-42d4-81aa-379cd493766c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>37a33dff-e6e0-4304-abcf-9a919fbff975</con:value></con:property><con:property><con:name>itemId</con:name><con:value>efa01a94-92bc-4e8b-be1c-8f95829e02c0</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f333dd70-4acc-427d-9d10-657d33c891fc</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>6af4cd32-d4cd-43c3-a662-abc4140aa53f</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="d4505b6c-83fe-4e4f-b2f4-d99800b5aaf0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 163,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0b1cd043-9c8b-4ac2-acb0-703ada223352" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_104" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="b39304e8-d2b6-49e6-8312-6be3a7c6001e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="c7cc75f7-1b44-4f71-98d9-8e8da5a4f6f4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4ce0011a-0b39-4ed4-91ef-c779b7ebd20f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="76012c31-17ef-422f-9de8-36063363ee2e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="6944c77e-b1a1-4c92-8f57-e1959baf088d" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2cd69415-7531-415e-96e7-6e7c38b8ae06" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="d870c2b4-369f-4c80-955b-fcb64a83155a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="529798e3-b546-4064-b391-750e006a8cb2" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54adee35-f24b-427e-a19e-8c7418cab407" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="ce6dc2de-a9e6-4a28-adfa-c2273c8fd8e4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="94912d0c-0ce6-457c-af40-e312efb10ab2" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dd3e2f53-739b-4909-92f2-3ed12deea332" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="0160175f-172b-4e72-86b6-37fb040c4a48"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="308fe8cc-dd06-4af4-8582-31c4bf20b53e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae329abe-00eb-4301-84b5-0a11d37930e0" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def req = context.expand('${DataFile#inventoryId}');
def inputRequest  =  new JsonSlurper().parseText(req);
double quantity = inputRequest.items[0].groups[0].quantity;
log.info("Datasheet quantity::::"+ quantity);

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

double invQuantity = jsonRestStepResponse.items[0].groups[0].quantity;
log.info("invQuantity::::"+invQuantity);

assert quantity ==  invQuantity : "Inventory quantity is not matching with the datasheet quantity";</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d5113afc-4d3b-400d-813f-5a9a1bf3c297" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="36d626cc-d04c-4114-833a-7ca4044d26e3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 10.523,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>d6de99f7-bd40-4242-bd34-5621406aedc8</con:value></con:property><con:property><con:name>groupId</con:name><con:value>beb77bd1-7983-4706-b600-3251ed867500</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>9e396374-bca8-44a0-aed1-5a4a62626329</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="78912711-2c08-4e84-8a1f-6ca44f20c534"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 10.523,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6bf64825-bbe6-4fc1-9f5f-acf8e0d8fc54" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inventory_114" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="6e93d865-877f-48a9-83fe-5dbcd87424fd"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="e8d74a93-6e46-4f2f-9df3-ea0892c2c8df" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6fcd1bd6-33e6-4798-bd05-f7039d9ab19a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="4661aa05-01d1-40b9-851d-f8cbe444bf69" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="ff6a0496-b48d-47ac-b23e-8832dc8cb56b" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="aabb6c01-8c60-4c66-9aa7-3f0883440855" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="8467a5da-27fb-41d9-866b-180eb4c04835" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="aa7f3805-1da1-469e-af9e-15d18a7add18" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b8d42bdc-a899-4e18-8857-86e6f3fa4015" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="e72e547e-fbc2-47a5-a2ce-f6c0a8d96ab9"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep3 = "GetProductByID"
def restStep4= "GetProductByID_1"
def restStep5= "GetProductByID_2"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j &lt; itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}
	//End of Execute Pre Steps

	//Execute GetProductByID Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute GetProductByID_1 Step
	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);

	//Execute GetProductByID_2 Step
	
	def restStep5Result = testRunner.runTestStepByName(restStep5);			
	restStepStatus =restStep5Result.getStatus().toString();
	log.info(restStep5+": Status::"+restStepStatus); 
	restTestStepList.add(restStep5);
	restStepsStatusList.add(restStepStatus);
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="GetProductByID" id="03bc7442-af44-4d78-8bc9-af17901bc6a4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="GetProductByID-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetProductByID" id="aea54b97-5d7e-4a2d-8778-e19f1814b3c1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/</con:originalUri><con:assertion type="Simple Contains" id="97110954-5409-45f4-ae05-4fd2591ffd6c" name="Contains"><con:configuration><token>id":${DatFile#itemId0}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b165bc12-b5a4-4c0e-b0db-ba25bf4a0545" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputProductId = context.expand('${GetProductByID#id}');

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resNonSyscoProdId = json.id;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("NON SYSCO PRODUCT ID::"+"Service Reponse::"+ resNonSyscoProdId + "    Input Request::"+ inputProductId);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName );
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId );
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand );
log.info("TYPE::"+"Service Reponse::"+ resType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize);

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input request Customer Id";
assert inputProductId == resNonSyscoProdId : "Response Product Id is not maching with the input request Product Id";
assert resNonSyscoProdName != null : "Response Non Syco Product Name is null";
assert resMaterialId != null : "Response Material Id is null";
assert resSupplierId != null : "Response Supplier Id is null";
assert resBrand != null: "Response Brand is null";
assert resType != null : "Response Product Type is null";
assert resDescription != null : "Response Product Description is null";
assert resNickName != null : "Response Nick Name is null";
assert resAvgWtPerCase != null : "Response Avg Weight Per Case is null";
assert resPackSize != null : "Response Pack Size is null";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#itemId0}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetProductByID_1" id="61241b33-eebb-4fb8-b9e5-e824799acfea" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="GetProductByID-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetProductByID_1" id="aea54b97-5d7e-4a2d-8778-e19f1814b3c1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/</con:originalUri><con:assertion type="Simple Contains" id="97110954-5409-45f4-ae05-4fd2591ffd6c" name="Contains"><con:configuration><token>id":${DatFile#itemId1}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7580ef4e-f78b-4b86-8e60-b07c7fd5edbc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputProductId = context.expand('${GetProductByID_1#id}');

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resNonSyscoProdId = json.id;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("NON SYSCO PRODUCT ID::"+"Service Reponse::"+ resNonSyscoProdId + "    Input Request::"+ inputProductId);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName );
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId );
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand );
log.info("TYPE::"+"Service Reponse::"+ resType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize);

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input request Customer Id";
assert inputProductId == resNonSyscoProdId : "Response Product Id is not maching with the input request Product Id";
assert resNonSyscoProdName != null : "Response Non Syco Product Name is null";
assert resMaterialId != null : "Response Material Id is null";
assert resSupplierId != null : "Response Supplier Id is null";
assert resBrand != null: "Response Brand is null";
assert resType != null : "Response Product Type is null";
assert resDescription != null : "Response Product Description is null";
assert resNickName != null : "Response Nick Name is null";
assert resAvgWtPerCase != null : "Response Avg Weight Per Case is null";
assert resPackSize != null : "Response Pack Size is null";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#itemId1}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetProductByID_2" id="4e3edaba-bdb6-498f-8afe-a93557680af5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="GetProductByID-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetProductByID_2" id="aea54b97-5d7e-4a2d-8778-e19f1814b3c1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/</con:originalUri><con:assertion type="Simple Contains" id="97110954-5409-45f4-ae05-4fd2591ffd6c" name="Contains"><con:configuration><token>materialId":"${DataFile#additionalInput}"</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f2f40296-371c-4b1b-a129-d4a565d46915" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputProductId = context.expand('${GetProductByID_2#id}');

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
//def resNonSyscoProdId = json.id;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;

def resBrand = json.brand;
def resType = json.type;

def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("NON SYSCO PRODUCT ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputProductId);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName );
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId );
log.info("BRAND::"+"Service Reponse::"+ resBrand );
log.info("TYPE::"+"Service Reponse::"+ resType);

log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize);

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input request Customer Id";
assert inputProductId == resMaterialId : "Response Product Id is not maching with the input request Product Id";
assert resNonSyscoProdName != null : "Response Non Syco Product Name is null";
assert resMaterialId != null : "Response Material Id is null";
assert resBrand != null: "Response Brand is null";
assert resType != null : "Response Product Type is null";

assert resAvgWtPerCase != null : "Response Avg Weight Per Case is null";
assert resPackSize != null : "Response Pack Size is null";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#additionalInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="68c31176-0a77-48d7-8e9f-abfe21b0c494"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value/></con:property><con:property><con:name>supplierId</con:name><con:value>84401baa-b6a0-4b5a-b593-379e41c1c79a</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>0e2a0788-9966-4ece-a96c-f4e41db415c2</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>37ef95e3-bb64-41cc-9ff0-4bca777c200d</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>0718361</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="3582779e-3e8b-476c-a948-d82f5c4583cb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }, {
      "id": "${DataFile#itemId1}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 2,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}&amp;&amp;{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value/></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "biscuitwalah",
  "contactInformation": {
    "address": "2 somestyreet USA",
    "contactName": "RaviShankar",
    "emailAddress": "RaviShankar@gmail.com",
    "phoneNumber": "9897654923"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>0718361</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Sysco_Report_201603281526.xls</con:value></con:property><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Sysco_Report_201603291557.xls</con:value></con:property><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Sysco_Report_201603311630.xls</con:value></con:property><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Sysco_Report_DataSet1_201604201339.xls</con:value></con:property><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Reports\\Inv_Report_DataSet1_201605311535.xls</con:value></con:property></con:properties></con:testSuite><con:testSuite id="4fa362b8-88b6-4627-a372-bd2a4b4024a1" name="Sysco_Services" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="fc9344ec-ce0c-40ac-8b67-c3dcc9cc5a45" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Config" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SetConfigurations" id="07147141-8a85-4d2a-8e8d-ebc6133fafb2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel

def singleRun = context.expand( '${Data#singleRun1}' );
log.info("singleRun::::::::::::"+singleRun);
if(singleRun == ""){
	singleRun = "true";
}

if(singleRun == "false"){
	
	log.info("::::::MULTIPLE RUN::::::");
	def endPointValue = context.expand( '${Data#endPoint1}' );
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
} else {
	log.info("SINGLE RUN::::::");
	def sys = System.getProperty("user.home").replace("\\","\\\\");
	def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\EndPoint.xls";
	def sheetName = "Data";	
	
	//flush old data
	def fl_testCase = testRunner.testCase;
	def fl_testStep = fl_testCase.getTestStepByName("Data");
	try{
		fl_testCase.removeTestStep(fl_testStep);
	} catch(Exception e){}
	
	//end of flush old data	
	
	def testcaseName = context.testCase.name;
	def propertyName1 = "endPoint"
	int columnNumber1 = 1;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	
	
	def endPointValue = context.expand( '${Data#endPoint1}' );
	
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
	
	def propertyName2 = "dataSheetName"
	int columnNumber2 = 2;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);
	
	def propertyName3 = "tabName"
	int columnNumber3 = 3;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);
	
	def propertyName5 = "reportName"
	int columnNumber5 = 5;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

	testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName("Data").setPropertyValue("singleRun1","true");			
}

</script></con:config></con:testStep><con:testStep type="groovy" name="CreateReportFile" id="a82dcdd0-d875-4245-84f3-c07aece0ddf2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["CreateReportFile"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def CreateReportFile = context.CreateReportFile
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def reportPath=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\Reports";
def reportName = testRunner.testCase.getTestStepByName("Data").getPropertyValue("reportName1");	

log.info(reportPath);
log.info(reportName);

CreateReportFile.CreateReport(reportPath, reportName);		
</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="6ae17900-09bb-4ea9-8048-efe727e5a0f8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://qa-uom-services-postgres.crkqmj3qk07x.us-east-1.rds.amazonaws.com:5432/uom?user=uomadmin&amp;password=uomadmin</con:connectionString><con:query>DELETE FROM account where value ->> 'customerId' = '804732';
DELETE FROM inventory WHERE value ->> 'customerId' = '804732';
DELETE FROM supplier WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM nonsyscoproduct WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM "group" WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM revenue where value ->> 'customerId' = '804732';
DELETE FROM purchase where value ->> 'customerId' = '804732';</con:query><con:assertion type="JDBC Status" id="944a48cc-9ba9-4e69-9a81-fc058ae6e3a0" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="properties" name="Data" id="d1cbbfe0-7d65-499a-b93e-2b8eed934420"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>endPoint1</con:name><con:value>http://uom-qa.na.sysco.net</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>dataSheetName1</con:name><con:value>SyscoDataSet1.xls</con:value></con:property><con:property><con:name>tabName1</con:name><con:value>Data</con:value></con:property><con:property><con:name>reportName1</con:name><con:value>AllServcs_Report_DataSet1</con:value></con:property><con:property><con:name>singleRun1</con:name><con:value>true</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9dd1a7d9-c1a1-43a6-af0e-53f1257e0121" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC001_Acc_GetAccByCustId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="918e78e7-c011-430a-9758-11c89dce63e2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="bf26f8aa-192e-496b-a132-377fbbc06c88"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "GetAccountByCustomerId";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Create_Account Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute GetAccountByCustomerId Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);	
	restStepsStatusList.add(restStepStatus);
	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="270a93ff-6c08-4dea-bd46-fd90b8179835" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="f403907d-3375-49e7-b9bd-813caf8f9196" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAccountByCustomerId" id="6660d186-3f68-4b8a-9524-fd35ca66ad52" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts/mine" methodName="GetAccountByCustomerId-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAccountByCustomerId" id="e3ef8ddd-be98-47ea-acd7-6c9585bcd65c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine</con:originalUri><con:assertion type="Simple Contains" id="a0f68385-b67b-4da5-9ef2-4a53c661c040" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="38a2f3a6-59cf-4132-80cc-331f03ab53bf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
def inputCustId = context.expand( '${DataFile#cust}');

	def resOpCo = json.opCo;
	def resCustomerId = json.customerId;
	def resIsCogs = json.isCogs;

	log.info("Service Response:opCo::" + resOpCo);
	log.info("Service Response:=customer Id::" + resCustomerId);
	log.info("Service Response:isCogs::" + resIsCogs);

	assert resOpCo != null : " opCo is null";
	assert resCustomerId != null : "CustomerId is null";
	assert resIsCogs != null : "isCogs is null";
	assert resCustomerId == inputCustId : "Input customer Id is not matching with the response Customer ID";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="b1808b7f-49c2-4e4c-915a-025d51adc486"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="7f509574-ef4f-4b59-b29e-219573ff811a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="056eedfa-ff08-4a18-bf84-c0b743e6032e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC002_Acc_GetAccByCustId_Error" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="9e17f056-b160-4f16-b0e0-fabe42efb3d4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="cad69169-92fc-429f-9d2b-7c3b7a8b9615"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "GetAccountByCustomerId";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Add_Item Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);
	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);	
}</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAccountByCustomerId" id="6e6900e4-fcd2-4fa3-8aa3-3e378df32e98" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts/mine" methodName="GetAccountByCustomerId-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAccountByCustomerId" id="e3ef8ddd-be98-47ea-acd7-6c9585bcd65c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine</con:originalUri><con:assertion type="Simple Contains" id="af333672-821b-492e-b7d2-01290e93eb9d" name="Contains"><con:configuration><token>message":"Account Not Found"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="c834ffca-4f7d-437f-ac08-8b441e050743"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="eb2205a9-7d30-48c0-9fcd-a2e8e52cf784"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4cf0b7ec-5578-4d73-9042-ff43ff29975f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC003_Acc_GetAllAccounts" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="86f54fa7-2035-46ca-a63a-8ffa96e7f620"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAllAccounts" id="20877238-4e28-4e70-8b7f-257bba837528" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="GetAllAccounts-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllAccounts" id="2feb4042-334a-48ae-b7ca-1605b26eeb94" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#additionalInput}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="Simple Contains" id="2682e054-fa20-46a4-b1f1-7a8b2cdb4e34" name="Contains"><con:configuration><token>customerId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="f46d0c63-b58e-4a71-b491-c7baf5815d58" name="Contains 1"><con:configuration><token>opCo</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cd20face-08af-4a92-9c64-d2af0d794ef8" name="Contains 2"><con:configuration><token>isCogs</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0f26050d-eddd-4f15-9c46-aa878f342724" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;

int GetAllAccountsSize = json.accounts.size();
log.info("No Of Accounts::"+ GetAllAccountsSize);
for(int i=0;i &lt; GetAllAccountsSize;i++)
{
	def resOpCo = json.accounts[i].opCo;
	def resCustomerId = json.accounts[i].customerId;
	def resIsCogs = json.accounts[i].isCogs;

	log.info("Service Response:opCo::" + resOpCo);
	log.info("Service Response:=customer Id::" + resCustomerId);
	log.info("Service Response:isCogs::" + resIsCogs);

	assert resOpCo != null : " opCo is null";
	assert resCustomerId != null : "CustomerId is null";
	assert resIsCogs != null : "isCogs is null";
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${DataFile#limit}"/>
  <con:entry key="offset" value="${DataFile#offset}"/>
</con:parameters><con:parameterOrder><con:entry>offset</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="b7f417f2-9ba8-4a73-a4f1-db523c72e733"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "GetAllAccounts";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";


int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData9.split("&amp;&amp;");     
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("offset",itemArray[0]);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("limit",itemArray[1]);
     	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute GetAllAccounts Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);	
}</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="65e7a644-21fe-45ed-a718-62730ab2f8f6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>0&amp;&amp;10</con:value></con:property><con:property><con:name>offset</con:name><con:value>0</con:value></con:property><con:property><con:name>limit</con:name><con:value>10</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>G6VUDWrbXrFkL5lgkJzHGcyGcq77EJ5QeyVyH/7ExzA=</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="2aef8d80-1d07-464c-ab21-ed1875dda07f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>0&amp;&amp;10</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>G6VUDWrbXrFkL5lgkJzHGcyGcq77EJ5QeyVyH/7ExzA=</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d01f9843-7750-45c0-841c-d6d39fc4e288" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC004_Acc_UpdateAcc" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="042ab22e-8c49-4f24-9694-9cd50f29daec"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="94bf322d-b94e-496e-b728-066344205747"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "UpdateAccount";
def restStep3 = "GetAccountByCustomerId";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Create_Account Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute UpdateAccount Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);	
	restStepsStatusList.add(restStepStatus);

	//Execute GetAccountByCustomerId Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);	
	restStepsStatusList.add(restStepStatus);
	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="3cf9f31b-a926-440b-beb6-305083d82100" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6c85b240-c766-454f-bc67-3fb76532b8b1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UpdateAccount" id="24ea605c-cd3b-41f7-a26d-edfc52632428" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts/mine" methodName="UpdateAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateAccount" id="f3920feb-1456-4c65-940b-17d26507a157" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine</con:originalUri><con:assertion type="Simple Contains" id="b5794bb3-0a04-423a-8f88-3dc776650a06" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cb0bd3f8-d026-4980-b278-9409caef531f" name="Contains 1"><con:configuration><token>"isCogs":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0875ee9d-ed95-4c94-bcf9-35507f808c03" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;

	def resOpCo = json.opCo;
	def resCustomerId = json.customerId;
	def resIsCogs = json.isCogs;

	log.info("Service Response:opCo::" + resOpCo);
	log.info("Service Response:=customer Id::" + resCustomerId);
	log.info("Service Response:isCogs::" + resIsCogs);

	assert resOpCo != null : " opCo is null";
	assert resCustomerId != null : "CustomerId is null";
	assert resIsCogs != null : "isCogs is null";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAccountByCustomerId" id="0e900fd1-0d64-4dd5-af3c-daf70bb9c125" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts/mine" methodName="GetAccountByCustomerId-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAccountByCustomerId" id="e3ef8ddd-be98-47ea-acd7-6c9585bcd65c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine</con:originalUri><con:assertion type="Simple Contains" id="a0f68385-b67b-4da5-9ef2-4a53c661c040" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="96cce696-5e55-489c-83ac-8920e0c4f2ea" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
def inputCustId = context.expand( '${DataFile#cust}');
def inputOpCo = context.expand( '${DataFile#opco}');

	def resOpCo = json.opCo;
	def resCustomerId = json.customerId;
	def resIsCogs = json.isCogs;
	
	log.info("Service Response:opCo::" + resOpCo);
	log.info("Service Response:=customer Id::" + resCustomerId);
	log.info("Service Response:isCogs::" + resIsCogs);

	assert resOpCo != null : " opCo is null";
	assert resCustomerId != null : "CustomerId is null";
	assert resIsCogs != null : "isCogs is null";
	assert resCustomerId == inputCustId : "Input customer Id is not matching with the response Customer ID";
	assert resOpCo == inputOpCo : "OpCO is not matching with the response Customer ID";
	</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="ed9d443b-178e-471a-888e-bbd08baf5c01"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "isCogs": false
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "isCogs": true
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="c0cdfc8d-ad04-4213-9d57-e5baa4e404a5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "isCogs": false
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "isCogs": true
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2e0442a4-5c75-41d7-b36b-11cb8e1752cf" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC005_Acc_UpdateAcc_Error" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="8e015f5f-e3ad-4dbb-b18d-0bad63b58408"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="d466a49f-78cc-44fe-8267-583ed1aec5aa"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "UpdateAccount";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Create_Account Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute UpdateAccount Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);	
	restStepsStatusList.add(restStepStatus);

	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2dbec930-81bf-42c7-bd14-690c79bd6c2b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="071ff366-3fc7-47b3-87ad-933d83e5dd1c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UpdateAccount" id="d5dce514-2b7d-4d47-82b2-6a3c54a5fb4d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts/mine" methodName="UpdateAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateAccount" id="f3920feb-1456-4c65-940b-17d26507a157" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/accounts/mine</con:originalUri><con:assertion type="Simple Contains" id="b5794bb3-0a04-423a-8f88-3dc776650a06" name="Contains"><con:configuration><token>message":"Account can not be changed to non-COGS"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="472d9dc8-632e-4ebb-a66d-d189e23ff650"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "isCogs": true
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "isCogs": false
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="9735681f-4cc0-404a-969a-eaeaed87742d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "isCogs": true
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "isCogs": false
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2222f9b4-a744-492b-b002-8a090db208c7" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC006_Inv_GetClosedInvDates_AccForCOGS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="424737a9-b890-48f2-8b0c-249286f55633"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="52b50ad5-e458-49ff-9865-cde8f5f0942b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="b0d8eb6c-aa05-4541-8081-e417c997aeee" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="71d38b27-3b87-4c32-8481-7e0bcf9c5695" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d6b98081-fb06-4c95-acb5-1872f76c3253" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="55c92606-91fe-4ecb-8f86-4ecf15be26f1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ed858e39-9901-49ea-a970-035c1d6c6cbb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="77d670cf-67ff-449b-9ad3-5951a2c35e7e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7a993a93-3f0f-4466-b043-cf9bcf3af480" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="42379e17-935c-48eb-851b-18be04f70918" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b2c0fb27-65f6-48d1-baab-df7cf77b7177" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="7a13cbd0-50ee-412b-bc5f-057780bdc159"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Close_Inventory";
def restStep3 = "GetInventoryById"
def restStep4 = "GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName12 = "addnlGroup";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j &lt; itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Close_inventory Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs Step	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);	
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="41a5e800-7419-45c8-88c5-e447a1823a46" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5ccf0f11-4f98-432a-86c2-9c197c95dbaf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Close_Inventory" id="7284b720-5733-4f91-a5de-fd4b2fc20acd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Close_Inventory" id="c674ecc9-1178-4dfd-905a-845d1e2fa1ce" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories/426ecdc4-a17d-4846-bf1d-bcfeea92b01d/complete</con:originalUri><con:assertion type="Simple Contains" id="a3a2e268-ac32-4745-968e-7e07c8852d64" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c728df6-3644-478e-a010-34110c0da042" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId_new}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="53a4feb8-738a-4218-bb2d-be9254422604" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b6fbafef-8f14-4b45-a39e-c90d669d44a7" name="Contains 1"><con:configuration><token>"state":"closed"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="00bdae0f-f440-4481-8468-72c1699bbebe" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs" id="f8ff7d86-5e87-4f36-90e6-6a3e987bf188" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/closed" methodName="GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllClosedInventoryDatesWhenTheAccountIsFlaggedForCogs" id="63dbca24-9392-411e-9237-c1a487867df1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/closed</con:originalUri><con:assertion type="GroovyScriptAssertion" id="856208a5-70dc-47b0-b65d-c2f68cd7f8a8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

int ClosedInventorySize = json.closedInventories.size();
log.info("No Of Closed Inventories::"+ ClosedInventorySize);

for(int i=0;i &lt; ClosedInventorySize;i++)
{
def resOpco = json.closedInventories[i].opCo;
def resCustId = json.closedInventories[i].customerId;
def resId = json.closedInventories[i].id;
def resClosedDate = json.closedInventories[i].closedDate;


def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("ID::"+"Service Response::"+ resId );
log.info("Closed date::"+"Service Response::"+ resClosedDate);
               

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resId != null : "Closed inventory ID is null";
assert resClosedDate != null : "date is null";
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="7e8a18d4-c5db-4fef-b862-fcc63d009bc8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    },{                             "id": "${DataFile#itemId1}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>91f3f28d-06ca-40a8-a5e9-853a6f16d4cd</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>7f884175-dac0-4aba-be49-81929de070a7</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>c6d6a64d-dd15-420f-96e4-3aeddd996eea</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>53e19bb6-3a34-42d5-905c-b0e5168125db</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>41c640f1-e327-4bf9-a494-30dc5c01c589</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>f90e72f4-fc78-4dca-bafd-e1f0fcf1be87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="99fa6859-5dc4-4e51-8d5f-65e29e4cbf54"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    },{                             "id": "${DataFile#itemId1}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}&amp;&amp;{
  "name": "Mangoes",
  "materialId": "32623",
  "supplier": "${DataFile#supplierId}",
  "brand": "USMang",
  "description": "US Mangoes",
  "nickName": "US Mangoes",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e4bb5090-3f28-41db-bd70-7435859177c2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC007_Inv_CreateNewInventory" searchProperties="true"><con:settings/><con:testStep type="groovy" name="LoadData" id="e386b5cf-ae34-4ce0-a5bb-f1bbf2875f20"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="b654b640-48c9-4f67-b8c6-dcd0a870fa88"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateANewInventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){					
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
   
   	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	
	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateANewInventory Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="a09fa65f-2ff7-4987-acbe-a31e4fa7a4dc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8ab42f0a-c351-4c34-bcee-b3388a764a45" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateANewInventory" id="7a9f1c64-71a5-4b87-9291-b623a30c63bc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateANewInventory" id="ca67aff0-465b-417d-b275-d5dfd3858f04" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
	
}
</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="0a768c5a-35b1-4c85-bf35-4bb65385c097" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="513e354e-c612-4ddb-a8c2-a3b7d497c191" name="Contains 1"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0c8adeab-01a6-477e-8221-382369c11057" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="f46f58b2-aacb-4a9e-ac6f-a4f524bc3b06"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value/></con:property><con:property><con:name>itemId</con:name><con:value/></con:property><con:property><con:name>groupId</con:name><con:value/></con:property><con:property><con:name>supplierId</con:name><con:value/></con:property><con:property><con:name>newQuantity</con:name><con:value/></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="37df5461-8141-4291-b757-10b8916d14ba"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value/></con:property><con:property><con:name>itemId1</con:name><con:value/></con:property><con:property><con:name>groupId1</con:name><con:value/></con:property><con:property><con:name>supplierId1</con:name><con:value/></con:property><con:property><con:name>newQuantity1</con:name><con:value/></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8d83064b-428a-46de-8d42-2000da3bf381" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC008_Inv_CreateNewInventory_Error" searchProperties="true"><con:settings/><con:testStep type="groovy" name="LoadData" id="cb0f5bf5-9b5b-4e83-ba3f-0c452bf48572"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="c264416e-da86-456c-ad13-1af5b5f9c420"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateANewInventory";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){					
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
            

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

		
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateANewInventory Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f543269c-1491-4b63-89a8-207807cd655b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="dfa0d081-f8e1-4adc-b334-56b009541f62" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateANewInventory" id="085f6262-ca25-475d-b9f7-48d53477ba42" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateANewInventory" id="ca67aff0-465b-417d-b275-d5dfd3858f04" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer 067|0548|rohitservice1" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
	
}
</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="0a768c5a-35b1-4c85-bf35-4bb65385c097" name="Contains"><con:configuration><token>message":"Account Not Found"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="d0cd8002-443b-4544-a3d3-2926a0ac33aa"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value/></con:property><con:property><con:name>itemId</con:name><con:value/></con:property><con:property><con:name>groupId</con:name><con:value/></con:property><con:property><con:name>supplierId</con:name><con:value/></con:property><con:property><con:name>newQuantity</con:name><con:value/></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="102f2238-3952-42aa-bf57-77cda361a3ce"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value/></con:property><con:property><con:name>itemId1</con:name><con:value/></con:property><con:property><con:name>groupId1</con:name><con:value/></con:property><con:property><con:name>supplierId1</con:name><con:value/></con:property><con:property><con:name>newQuantity1</con:name><con:value/></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="407e4963-ccd3-4050-8ed6-6ebbeb10e24f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC009_Inv_GetAllInventoryForAcc" searchProperties="true"><con:settings/><con:testStep type="groovy" name="LoadData" id="cc183557-9876-42eb-8d1f-a85497c42828"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="01cfcb78-6197-4d2a-a83d-588c87ef01c4"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "GetAllInventoriesForAnAccount";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){					
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
            

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

		
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute GetAllInventoriesForAnAccount Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);	
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="30789e22-cc34-4bb2-abce-bda0edc4b0d0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="697404ca-76fe-4819-9250-b738bf9b12a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllInventoriesForAnAccount" id="3641441e-72b6-4b44-aebe-1c0482dee386" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="GetAllInventoriesForAnAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllInventoriesForAnAccount" id="7e782836-e489-4e82-ac3a-89b843a35200" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="dde74aa1-460d-4ce0-8bab-f8adf7e2cd8e" name="Contains"><con:configuration><token>inventories</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1d8cf9e2-5ab0-46f1-8304-4d2d9341bbb9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;

int GetAllInventoriesSize = json.inventories.size();
log.info("No Of inventories::"+ GetAllInventoriesSize);
for(int i=0;i &lt; GetAllInventoriesSize;i++)
{
	def resId = json.inventories[i].id;
	def resName = json.inventories[i].name;
	def resNumberOfItems = json.inventories[i].numberOfItems;

	log.info("Service Response:opCo::" + resId);
	log.info("Service Response:customer Id::" + resName);
	log.info("Service Response:isCogs::" + resNumberOfItems);

	assert resId != null : " id is null";
	assert resName != null : "name is null";
	assert resNumberOfItems != null : "numberOfItems is null";

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="41ad9544-a968-4060-9f00-0cf01964a658"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value/></con:property><con:property><con:name>itemId</con:name><con:value/></con:property><con:property><con:name>groupId</con:name><con:value/></con:property><con:property><con:name>supplierId</con:name><con:value/></con:property><con:property><con:name>newQuantity</con:name><con:value/></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="a779e127-3408-495c-b1a9-37ffd0534911"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value/></con:property><con:property><con:name>itemId1</con:name><con:value/></con:property><con:property><con:name>groupId1</con:name><con:value/></con:property><con:property><con:name>supplierId1</con:name><con:value/></con:property><con:property><con:name>newQuantity1</con:name><con:value/></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f55709b0-5fb2-457b-b4fd-e3c519b988d2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC010_Inv_GetCurrentOpenInventory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="3b75ab9c-ade6-421e-a771-ec53b1eb8c03"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="7a9e3012-1d43-460d-9ceb-2f5ad449c7e2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0b95154-0485-400c-8127-46eecdd3454c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="0c796f0b-29d5-4ed4-9e52-c88c830c435a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}

</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c5626d78-fbe2-43c1-981a-e4d833b8151d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="6c7235be-c404-48f3-adef-64a6cd12bc22" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2a9abbee-c689-4a70-8ebc-4efe6a2a3955" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="2f96a465-2593-47b2-a4a8-ad39e402d84d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Add_Item";
def restStep2 = "GetInventoryById";
def restStep3 = "GetCurrentOpenInventory";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Add_Item Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	//Execute GetCurrentOpenInventory Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);	
}

def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Add_Item" id="f27dedc3-b5b3-4f5d-85b3-ff7fae43a157" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add_Item" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e13c2559-7ced-4de6-9cf1-e8d61221a2c8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="5b909f80-db8d-4a50-868c-c9447d575ca6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ea609dcc-32b6-433c-a3d7-61b0fa4ac143" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetCurrentOpenInventory" id="d4a0da5f-de7a-4f38-bdec-0df5545ada75" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/current" methodName="GetCurrentOpenInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetCurrentOpenInventory" id="cb263ce3-ef2e-4a55-951c-68ecb4284f33" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/current</con:originalUri><con:assertion type="Simple Contains" id="e704ae0c-5bd9-4134-bb9c-b28fd564b3be" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="133dce5e-f021-46fe-adb4-6e0fd8d8ad7c" name="Contains 1"><con:configuration><token>"state":"open"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0ef35955-5805-4610-977f-670a81b63a54" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resitems_id = json.items.id;
def resPrice = json.items.price;
def resPriceUom = json.items.priceUom;
def resgroups = json.items.groups;
def resmaterialId = json.items.materialId;
def resPack = json.items.packSize.pack;
def resSize = json.items.packSize.size;
def resUom = json.items.packSize.uom;
def resName = json.items.name;
def resType = json.items.type;
def resbrand = json.items.brand;

def request = messageExchange.requestContent;
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

                log.info("OPCO::"+"Service Reponse::"+ resOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId);
                log.info("OPEN DATE::"+"Service Reponse::"+ resOpenDate);
                log.info("STATE::"+"Service Reponse::"+ resState);
                log.info("ITEM ID::"+"Service Reponse::"+ resitems_id);
                log.info("PRICE::"+"Service Reponse::"+ resPrice);
                log.info("PRICE UOM::"+"Service Reponse::"+ resPriceUom);
                log.info("GROUP::"+"Service Reponse::"+ resgroups);
                log.info("MATERIAL ID::"+"Service Reponse::"+ resmaterialId);
                log.info("PACK::"+"Service Reponse::"+ resPack);
                log.info("SIZE::"+"Service Reponse::"+ resSize);
                log.info("UOM::"+"Service Reponse::"+ resUom);
                log.info("NAME::"+"Service Reponse::"+ resName);
                log.info("TYPE::"+"Service Reponse::"+ resType);
                log.info("BRAND::"+"Service Reponse::"+ resbrand);
            
                
assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState != null : "Inventory State is null";
assert resitems_id != null : "Inventory items is null";
assert resPrice != null : "Inventory Price is null";
assert resPriceUom != null : "Inventory Price Uom is null";
assert resgroups != null : "Groups is null";
assert resmaterialId != null : "Inventory materialId is null";
assert resPack != null : "Pack is null";
assert resSize != null : "Size is null";
assert resUom != null : "UOM is null";
assert resName != null : "Name is null";
assert resType != null : "inventory Type is null";
assert resbrand != null : "Brand is null";








</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>withAllProductAttributes</con:entry><con:entry>withGroupDefinitions</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="e37b62e7-5e14-425d-8af3-4648764d70b3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0026906</con:value></con:property><con:property><con:name>groupId</con:name><con:value>9eb99c65-2476-4ae6-9166-112c61e4ded0</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>18b04a10-9e12-4e02-bb22-801fc5ddf19a</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="ea3f32e9-fa34-45d9-bfa9-5c1489172dec"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>0026906</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b58fe59b-956b-4bd5-bbc8-4a55ec58950c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC011_Inv_GetCurrentOpenInventory_Error" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="1d7a8629-eafa-4de6-a240-a361e898e00e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="56b00419-aa2d-44c9-b04e-0652be7bd98c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="64bc25fe-5e34-4da0-ac19-4b4a9ee97bd5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetCurrentOpenInventory" id="6a70e786-bc99-45b0-8287-a8716a52387e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/current" methodName="GetCurrentOpenInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetCurrentOpenInventory" id="cb263ce3-ef2e-4a55-951c-68ecb4284f33" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/currenttruetrue</con:originalUri><con:assertion type="Simple Contains" id="3f4c7b98-19fb-4aaf-aaac-57fdd30595be" name="Contains"><con:configuration><token>message":"There are no currently open inventories for the Account."</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>withAllProductAttributes</con:entry><con:entry>withGroupDefinitions</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="8681946d-a3fa-4ca9-b0fd-f34aa72ab464"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "GetCurrentOpenInventory";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();
	
	//Execute Create_Account Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute GetCurrentOpenInventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="a17dda17-23e7-4e0e-955b-e924547d2959"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>ce89f683-d271-4785-b6e4-e090418e95f7</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="1cfd8943-41e4-4075-b4f4-74bcfddd3909"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0a237c57-ec10-4215-b1ce-4aea90974a74" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC012_Inv_InventoryValuesForClosedDates" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="09c34127-a100-4da8-a358-f4d703c002b1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="aaaddc73-c65b-4c1d-aac5-96b452e0cb9d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="0e58ca26-b609-48ed-ad3b-9a1c107cd5b8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="609dd510-a238-4501-9af5-d7bf0c6fa64a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="650e4dde-68cd-4282-ab9a-1d0d14a2161f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="8541df1b-65c0-4bf8-96ae-68032e894571" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ed858e39-9901-49ea-a970-035c1d6c6cbb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="eda0da19-fc09-4bbe-9955-0009e86aa1d6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dae11850-163c-450e-9920-8b35c111c6ba" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6c5a9c3f-0252-491f-ba73-bcc38754e901"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Inventory";
def restStep2 = "CloseInventory";
def restStep3 = "GetInventoryById";
def restStep4 = "InventoryValuesForClosedDates";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName12 = "addnlGroup";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);
	
	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus); 

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);


	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Update_Inventory Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus); 

	//Execute CloseInventory Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus); 

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def openDate = jsonRestStep2Response.openDate;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("openDate",openDate);
	
	//Execute GetInventoryById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus); 

	def restStep3Response = testRunner.testCase.testSteps[restStep3].testRequest.response.contentAsString;
	def jsonRestStep3Response = new JsonSlurper().parseText(restStep3Response);
	def closedDate = jsonRestStep3Response.closedDate;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("closedDate",closedDate);

	//Execute InventoryValuesForClosedDates Step
	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus); 
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="c75d5de2-b0e5-42df-b06e-3b601d02e0f8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2812c394-d0e4-45ad-85de-59477a4dc302" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory" id="a0c2afda-79e3-4a4c-859a-0a4861fef2f7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9be544b2-a039-45a0-a24f-ea139c9ddcc8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId_new}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="9c3a5988-ece2-4835-88a6-93a97a0f2dc2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cc18de5e-7044-4aca-8d96-8b0433084be4" name="Contains 1"><con:configuration><token>"state":"closed"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="76bd73a6-c1d1-47dc-a3cb-a6f89c82f532" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="InventoryValuesForClosedDates" id="34cb0b02-5978-4d37-8b29-6f7ad6124b37" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/inventoryValues" methodName="InventoryValuesForClosedDates-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="InventoryValuesForClosedDates" id="af08bb50-f0c0-4393-b7fc-dba9b26aca5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/inventoryValues</con:originalUri><con:assertion type="Simple Contains" id="c16ce505-226d-4cf6-a08a-be4b10d482a6" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="firstDate" value="${DataFile#openDate}"/>
  <con:entry key="secondDate" value="${DataFile#closedDate}"/>
</con:parameters><con:parameterOrder><con:entry>firstDate</con:entry><con:entry>secondDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="bb2139f1-1480-44d7-81f6-1505bc0f0b85"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f7fc9e1a-6305-4061-b005-374b5aa5f8d9</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>b7cdfcc2-28c2-427b-9c2e-bae524fcfba6</con:value></con:property><con:property><con:name>openDate</con:name><con:value>2016-05-31T10:14:05.218Z</con:value></con:property><con:property><con:name>closedDate</con:name><con:value>2016-05-31T10:14:05.218Z</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>42ca372a-160d-4167-8b90-08e21dad336b</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="65f4e120-ae86-4ed7-88e3-1dd89905db34"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b5650313-dd4e-4424-b504-20c60797ea7d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC013_Inv_GetAllInventoryTimePeriods" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="247cd7a7-340f-44ba-bcb3-679d82352ec4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="96336076-3cfd-4a5c-a13b-3945fa22e97b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6beaf870-4ad9-4104-bbd5-fa9ea51e4b2a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="3b83898f-0d1d-497b-81c6-0e25f62c5646" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd64a56c-193a-469b-82a4-69264b1e21ad" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllInventoryTimePeriods" id="20d8d305-e573-40b1-829f-d76c086c3ce0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/timePeriods" methodName="GetAllInventoryTimePeriods-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllInventoryTimePeriods" id="bc8b4439-2ad0-450e-aba0-333ad619013c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/timePeriods</con:originalUri><con:assertion type="Simple Contains" id="e0a0cae9-099a-4393-8629-c1f3407194c8" name="Contains"><con:configuration><token>"from":</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="a9238889-3a71-4d32-88a5-68af6f83afb8" name="Contains 1"><con:configuration><token>"to":</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="397a1be1-87ef-40f9-a75d-7552244628e7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;

	def resEndInventory = json.timePeriods.endingInventory;
	def resFrom = json.timePeriods.from;
	def resTo = json.timePeriods.to;
	def resIsCurrent = json.timePeriods.isCurrent;
	
	log.info("Service Response:endingInventory::" + resEndInventory);
	log.info("Service Response:From::" + resFrom);
	log.info("Service Response:To::" + resTo);
	log.info("Service Response:isCurrent::" + resIsCurrent);

	assert resEndInventory != null : " Ending inventory  is null";
	assert resFrom != null : "From Date is null";
	assert resTo != null : "To Date is null";
	assert resIsCurrent != null : "isCurrent is null";
	</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a9c89a56-96ac-45f7-8fc5-0af5a8dc23bb"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "Create_Inventory";
def restStep3 = "GetAllInventoryTimePeriods";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();
	
	//Execute Create_Account Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Inventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute GetAllInventoryTimePeriods Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="6c3a4cc4-894d-434c-b6fc-e765fb523b87"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>ce89f683-d271-4785-b6e4-e090418e95f7</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="2a55e391-9c1c-48b3-8592-133b9233eea6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fb4aa9bf-3f84-4016-9be8-91aa9c2a468b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC014_Inv_GetInventoryById" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="f3ecc3b3-c5b2-4639-80f3-1d49df931ee8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="092ade32-f82e-4f8e-9d21-ec176683042c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="adfed09a-8ec1-49cc-ab64-6cc35142e09a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="120a1854-4b41-4b0f-b5da-4057b5992958" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}

</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="99dc2bac-83dc-45ac-a917-52c44ca0fd3f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="9c50fd48-d8a8-4a7f-97a7-26862f0996a3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="061d4027-4e38-44a5-bf0f-34bbfc21c74d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="36744392-0328-4699-821a-53184b0db72e"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Add_Item";
def restStep2 = "GetInventoryById";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Add_Item Step	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);	
	restStepsStatusList.add(restStepStatus);

	//Execute GetInventoryById Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);	
}

def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Add_Item" id="9b17c9d9-507c-4a1d-ab2a-51d9d350c657" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Add_Item" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="1e839105-9ae4-482d-9728-d12622cf625f" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="61934953-3a23-4726-a1e5-fe67a8cf18ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="de3fd28f-3508-4082-be93-75a9a29a034a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8d2bf7d5-1dec-480f-bfe2-4acb5682e1e1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="9422c702-16b5-411d-b43d-5ed77d5e2be3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId</con:name><con:value>e4febcda-26d2-44f7-9885-3876ea440e67</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>40755fad-4be4-4bad-95f8-34401e4fea08</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="38f08bc9-fe34-47f0-b558-567c49df67c9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="63312f4c-0f39-45ad-ba27-26fbe6d7431c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC015_Inv_UpdateInventoryContents" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="9f24700e-4ea8-4669-ae1e-36add8d5256d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="d09cc860-76d1-4e81-afbf-505c364ee141" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d5827520-0094-4cb0-bd3e-43484a16d5bb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="ec72290a-c02f-44ed-bc15-094eaca2b2f1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c6898d6d-fb28-454e-aafb-e7d0323b734c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="68791e55-8b03-4d5f-bccf-a162d44db8e4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7c56ec84-719b-46f8-9ad8-8c407eac4282" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="2cff3abd-ec83-494f-9215-d5e0b6095fd8"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Inventory";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus); 

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Update_Inventory Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus); 
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="0c97e920-7212-4985-be90-4b45b3d9271f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="573d9846-e096-4e9a-a96e-4bb949dbc0e8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="8a56ab52-6ad6-4e32-8051-dde2a58e4c16"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>1620673</con:value></con:property><con:property><con:name>groupId</con:name><con:value>6c4bc602-f752-412a-a0cb-1ae90b0a90fe</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>71e287f3-3452-46cb-a917-09497846bd6f</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="8e24fda1-1182-40c0-8773-d05abca86272"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>1620673</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "Freshfruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ad6aa2c6-4539-437b-85e0-ace8b9f7b7a5" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC015_1_Inv_CloseInventory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="5473082b-3b5c-4a55-8feb-e7f58403b2b4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2b91551b-5faa-453e-befa-52972446ab21" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="0e58ca26-b609-48ed-ad3b-9a1c107cd5b8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="2ec39cd0-f3b7-4bc8-b466-f183003eefe0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ed858e39-9901-49ea-a970-035c1d6c6cbb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="1ef7fd04-3508-4ee7-902c-ce6dd914b73b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ed858e39-9901-49ea-a970-035c1d6c6cbb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory" id="f890358f-ee64-408b-bd20-5f845edf80d7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{

}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3db95e43-2dc7-40e1-a24c-386d04bd2309" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;
def resTrackedChanges = json.trackedChanges;

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);
log.info("TRACKED CHANGES::"+"Service Response::"+ resTrackedChanges);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems == [] : "The Inventory is not a new one";
assert resTrackedChanges == [] : "The Inventory is not a new one";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="909f32cd-d68b-436f-a333-5ce3c0c369e4"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Inventory";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Inventory";
def restStep2 = "CloseInventory";
def restStep3 = "GetInventoryById";
//End of Actual Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName12 = "addnlGroup";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus); 

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def inventoryId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	//End of Execute Pre Steps

	//Execute Update_Inventory Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus); 

	//Execute CloseInventory Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus); 

	//Execute GetInventoryById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus); 
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Update_Inventory" id="3cebc9f9-5425-4c1f-a7f7-0536709d6dd3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Inventory" id="ae77756d-3cc9-4b37-8a58-60cd203dc83a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="4d08e0a4-1ba4-4a1e-8ead-4486c7ea3ed3" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83574f67-4c81-478b-b700-492b75413259" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory" id="e704d245-3b40-4beb-9899-1c008b3f7e1f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6f5c7ab9-ab37-4c8f-957a-e011d338ca0a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId_new}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="4271e05b-c7c5-43f1-9fa5-8a822a24d17c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>id":"${DataFile#inventoryId_new}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="cc18de5e-7044-4aca-8d96-8b0433084be4" name="Contains 1"><con:configuration><token>"state":"closed"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cfcb526e-5281-4eff-8b73-4d6ce63509fd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="100a0d83-a6d0-4f39-a6ca-366c8190671a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId</con:name><con:value>608844ce-e9b5-4676-b536-aa6da0139fcb</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>b1e8cc25-04e5-4131-83eb-9ba6622ec27e</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>ec832f0d-890d-4b2e-b2b6-d6b141cddf80</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="cdcfceb4-6894-46df-bcae-37796651adb9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>8403339</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="85598982-f948-4999-bd4b-2ff12d479bbf" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC016_Grp_GetGroups_typeExp" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="4ffce662-3f75-42dc-90f9-db6dd958627b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="ed6e4014-a968-40d5-92cb-67f20a644a3a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="9396f968-0f97-4c1c-b527-493cf4c2e94f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_Groups" id="0a5239f8-a445-4325-8634-581117f4efcd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="GetGroups-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Groups" id="32de6f1b-8298-43f5-a523-5c4decb17d0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups</con:originalUri><con:assertion type="Simple Contains" id="f4d80305-8914-46c4-a13b-e11e76c230a5" name="Contains"><con:configuration><token>"groups"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d61d62e7-0d88-4df2-b09e-00a89e3727ad" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
def inputCustId = context.expand( '${DataFile#cust}');
def inputOpCo = context.expand( '${DataFile#opco}');

int groupSize = json.groups.size();
log.info("No Of Accounts::"+ groupSize);

for (int i=0; i&lt; groupSize;i++)
{
	def resOpCo = json.groups[i].opCo;
	def resId = json.groups[i].id;
	def resCustomerId = json.groups[i].customerId;
	def resName=  json.groups[i].name;
	def resType=  json.groups[i].type;
	def resfoodType=  json.groups[i].foodType;
	def resdeleted=  json.groups[i].deleted;
	
	log.info("Service Response:opCo::" + resOpCo);
	log.info("Service Response:customer Id::" + resCustomerId);
	log.info("Service Response:Group Id::" + resId);
	log.info("Service Response:Name::" + resName);
	log.info("Service Response:Type::" + resType);
	log.info("Service Response:foodtype::" + resfoodType);
	log.info("Service Response:Deleted::" + resdeleted);

	assert resOpCo != null : " opCo is null";
	assert resCustomerId != null : "CustomerId is null";
	assert resId != null : "isCogs is null";
	assert resCustomerId == inputCustId : "Input customer Id is not matching with the response Customer ID";
	assert resOpCo == inputOpCo : "OpCO is not matching with the response Customer ID";
	assert resName != null : "Name is null";
	assert resType != null : "Type is null";
	assert resfoodType != null : "Food Type is null";
	assert resdeleted != null : "Deleted is null";

}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="type" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="83fb14cd-d729-4428-8468-19aa1c7f693e"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Get_Groups";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//End of Execute Pre Steps

	//Execute Get Groups Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="ea53bd76-b62e-4bbb-9021-7f68fcc1918a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value/></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>expenseCategory</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="cfc5c882-e31c-41bc-bacd-191a69e512e9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value/></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>expenseCategory</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a35ab25e-d095-45bf-8653-5c2c1cc0b4b3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC017_Grp_CreateNewGroup" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="bb0ab775-ddb4-4b19-8327-8ed7195735e6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="557c6da4-a6d0-48e0-9cb5-42d698e1113c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="1be14fec-34da-421d-af8e-392e64657fb7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="329cc596-f6b2-4330-b908-96d27ea4a6e2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2ceeb2a2-91c4-41ed-9748-6b95be23724e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e2341158-43a7-45cf-ab26-05a94c3ef90a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="7f8fa03e-96cf-44d4-9f01-2ddbfb60dc87"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);
	
	//End of Execute Pre Steps

	//Execute Create_Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="6737130f-7339-4e79-827e-510c7348a21c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>5f246e81-bc49-4a6d-b64c-15680613ea71</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="a8d8877d-8051-433f-85b0-6b0fb3e3f6d5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "cooler1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="76175c8d-ced5-4ffd-ae95-a03cd5a5f0cc" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC018_Grp_GetGroupById" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="b7c839da-443f-4df4-a495-d775174d7025"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="8508312a-16c1-455e-8ab3-c9e4d907ee95" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="22cca060-f968-40a1-a6e9-cb75dda43bf1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="635aaa28-79c3-494a-9841-344cf6a47f56" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="c48b6640-fbd9-4d56-b9da-1ea962501fd1" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d0e06be7-6311-4cd5-8734-3ef23894575d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetGroupById" id="19b77de9-9830-474b-8efc-bbf8173ca90d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="GetGroupById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetGroupById" id="cfac1aca-fae8-49a6-acbc-25dfcffe0f9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/%7BDataFile%23groupId%7D%20</con:originalUri><con:assertion type="Simple Contains" id="a1c1f8db-ebd8-4352-89bc-824a475c168d" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dd0e01e7-7072-49ef-a6df-2eba3adfbac5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpfoodType = json.foodType;
def resOpco = json.opCo;
def resCustId = json.customerId;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputGroupId = context.expand('${DataFile#groupId}');


log.info("Service Response:Group Id::" + resGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group foodType::" + resGrpfoodType);
log.info("Service Response: Opco::"+inputOpco);
log.info("Service Response: Customer ID::"+inputCustId);
log.info("Service Response: Group ID::"+inputGroupId);

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resGrpId != null : "Group ID is null";
assert resGrpName != null : "Group name is null";
assert resGrpType != null : "Group Type is null";
assert resGrpfoodType != null : "Group FoodType is null";
assert inputGroupId == resGrpId : "Response Group Id is not maching with the input Group Id";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="5a6dd154-576e-41e8-9e62-c0c0bd2210de"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";
def restStep2 = "GetGroupById"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);
	
	//End of Execute Pre Steps

	//Execute Create_Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);


	//Execute GetGroupById Step

	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="aafc6b33-4fe2-439e-95a6-f61d9c3a4185"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>293c87a0-63c6-4c84-add4-9320bea195ab</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="ecced4d6-a920-489d-bf1d-bf87cbe059f9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5e9ccf35-8b5b-4bc5-b399-675eef677e06" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC020_Grp_Delete Group" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="2c642f68-4f6f-4c60-a3f2-3711646fb276"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="41c25699-f6d8-4aed-814c-97dd6ab95ec3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="70e49d21-3ca5-426b-becc-e6c39384921f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="ddce90a1-3859-4e92-8104-a9bc313727d9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="f0e4f0fd-e6d4-4c6a-9d13-7abd7fd1d0ee"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	//End of Execute Pre Steps

	//Execute Delete Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="8d8feb89-0fa1-412b-8001-b1893615ecc8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b69d3317-2a5e-410f-a341-e23c84b6a3bf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#groupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="697177ca-a388-4d78-9f9a-f398ee9c0ae3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>eed44520-9c80-430c-8512-06eda5575a21</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="af9484fd-12e9-4a1d-9b4b-459cf810105f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e8c9be10-b7be-46be-8916-79513ef5ef82" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC019_Grp_UpdateGroup" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="343411a4-90c1-476d-a33c-9df2ab2f580b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel

def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="d4ac7f2f-2d08-440b-bbde-c29f96e6ed37" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="a4e36f71-9664-49ed-9d2c-6c6b84147745" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="76bfe772-1fb6-41a4-96b3-a1b54b4d0410" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="422db3b9-d3af-4eb5-a808-e4cbfca01ef8" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93b0414e-3950-4c40-b043-5fbc252b0900" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="51a21c66-1b88-43fe-8409-d4315dd02cbd"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	//End of Execute Pre Steps

	//Execute Update Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Update_Group" id="955f64fd-613a-4f5f-952d-ba7deeeaf612" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="UpdateGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Group" id="133681e7-b56b-42ae-b080-020fcf88448b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/12345</con:originalUri><con:assertion type="Simple Contains" id="1f862d62-22c5-4518-bd77-d72766ed11e5" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="bfea7766-69d6-41bc-a418-29ef9748b721" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0593f10d-a397-4bc1-ac88-b37ac20a9832" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);

def request = new JsonSlurper().parseText(context.expand('${DataFile#initialInput}'));
def newGroupName = request.name;
def newStorage = request.storage;
log.info("newGroupName from datasheet::::"+newGroupName);
log.info("newStorage from datasheet::::"+newStorage);

def updatedGroupName = jsonRestStepResponse.name;
log.info("updatedGroupName::::"+updatedGroupName);

assert newGroupName ==  updatedGroupName : "Group name is not matching with the datasheet";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="e605338a-f598-4a75-85f8-aff173059733"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>7d7571ce-bfb8-4a32-a12f-32e55f1a62ca</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "name": "fruitGroup33",
  "storage": "freezer"
}</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="a6f5bab6-d8c7-4249-bb92-2233abbcc8ae"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "name": "fruitGroup33",
  "storage": "freezer"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="99faff72-7e01-4f8f-baeb-536d83d7b5d7" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC021_Grp_Delete Group_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="a0cbefc1-2b72-4184-9558-22f0cd0088d6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="5b880ee6-cda1-40db-b912-68596cf99984" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="9a2ad59a-431f-414f-a23d-deb90b53d4e8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="a679fbd2-60a4-46a7-8b08-1ee48adfa214" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1dac3335-67b0-49d6-bf7f-ebf0c26db88f" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d16e0c2b-25fe-4928-83de-979ed7e6424f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="984c570a-2784-4d74-8a2e-601e38e7de16"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	//End of Execute Pre Steps

	//Execute Delete Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="564f5710-5842-479f-858a-9a7502ce23d4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>Invalid UUID string</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="eef6fafa-aadc-4a29-8eb3-8813bf14270b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>26f174a0-047b-4469-b048-0d7da6c504e6</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>665588</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="f18b10f9-6f52-4453-a080-98634dc24935"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>665588</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0e8d7ceb-0785-4c0f-b42a-0ccc9ceb7d6c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC022_Grp_CreateNewGroup_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="6685a052-c938-41fd-8901-28daf1810c9c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="5f63688d-a9e7-411f-aa6d-b16256d295b5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="b14bb82a-5042-4f55-8e20-3debc67801c1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="3a150e6e-332a-460c-a2ea-9751f138fc6e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>Type is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="36e14722-4824-4f7b-99de-758a05661558"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);
	
	//End of Execute Pre Steps

	//Execute Create_Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="883d4d46-d5c2-405c-86d6-643441eec012"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="548a8d0b-9fd7-4ad6-930d-ac8b0520cfbc"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e0ca5fd7-88bf-4990-af1b-bab2f23d94d4" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC023_Grp_GetGroups_typeLoc" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="fbb078ee-b376-4755-a5e6-0822fd18a027"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="c3469b96-bb1f-444a-9429-0d1234b77dc1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="74da61f0-092b-45be-b11c-a30e3ac27ab2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_Groups" id="1a196bfa-6552-44ee-9c06-f18a45ec6ce1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="GetGroups-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Groups" id="32de6f1b-8298-43f5-a523-5c4decb17d0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups</con:originalUri><con:assertion type="Simple Contains" id="2f770a32-c460-4bd0-98ab-d1eddb7fb682" name="Contains"><con:configuration><token>"groups"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0327bca2-496b-476c-9816-eb2743a03453" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
def inputCustId = context.expand( '${DataFile#cust}');
def inputOpCo = context.expand( '${DataFile#opco}');

int groupSize = json.groups.size();
log.info("No Of Accounts::"+ groupSize);

for (int i=0; i&lt; groupSize;i++)
{
	def resOpCo = json.groups[i].opCo;
	def resId = json.groups[i].id;
	def resCustomerId = json.groups[i].customerId;
	def resName=  json.groups[i].name;
	def resType=  json.groups[i].type;
	def resfoodType=  json.groups[i].foodType;
	def resdeleted=  json.groups[i].deleted;
	
	log.info("Service Response:opCo::" + resOpCo);
	log.info("Service Response:customer Id::" + resCustomerId);
	log.info("Service Response:Group Id::" + resId);
	log.info("Service Response:Name::" + resName);
	log.info("Service Response:Type::" + resType);
	log.info("Service Response:foodtype::" + resfoodType);
	log.info("Service Response:Deleted::" + resdeleted);

	assert resOpCo != null : " opCo is null";
	assert resCustomerId != null : "CustomerId is null";
	assert resId != null : "isCogs is null";
	assert resCustomerId == inputCustId : "Input customer Id is not matching with the response Customer ID";
	assert resOpCo == inputOpCo : "OpCO is not matching with the response Customer ID";
	assert resName != null : "Name is null";
	assert resType != null : "Type is null";
	assert resfoodType != null : "Food Type is null";
	assert resdeleted != null : "Deleted is null";

}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="type" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="afe2e538-3c1a-4366-a621-0a7126d79509"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Get_Groups";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//End of Execute Pre Steps

	//Execute Get Groups Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="2204ae1b-98b6-4ccc-b155-3a1c68dde828"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value/></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>location</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="69e2f7b0-ce40-4ed2-84d4-fe288538a101"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value/></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>location</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2ae12ee7-19db-427b-ac0c-f60aab73b149" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC024_Grp_GetGroups_typeInvalid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="88a14672-28bd-4dbb-b4fc-0e1b25980201"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="a3c323b6-5098-48f3-b0a1-231c8418f630" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="945c8962-7a11-41ac-90a6-18f111426d93" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_Groups" id="a9e5d8d1-efc3-4ca8-b21e-a0b8a47eaf81" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="GetGroups-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Groups" id="32de6f1b-8298-43f5-a523-5c4decb17d0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups</con:originalUri><con:assertion type="Simple Contains" id="2f770a32-c460-4bd0-98ab-d1eddb7fb682" name="Contains"><con:configuration><token>is not a valid GroupType</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="type" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="c534e1b4-0de7-4d56-8da1-8502f7f161e9"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Get_Groups";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//End of Execute Pre Steps

	//Execute Get Groups Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="9f8306f3-28d3-4c2c-af44-e170483cbb58"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value/></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>food</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="c3a204a3-b230-4b3e-b8fd-8b5208a23532"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value/></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>food</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4961b069-cf05-4472-b429-b4fcbbd80328" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC025_Prod_GetAllNonSyscoProducts&amp;PreparedItemsforAnAccount" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="81ba7673-5b00-453a-beaf-74e69324f56f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2e63f012-ff4b-42e7-ac4c-ef1ec1b8b025" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="2b1b40b0-4b87-4ef4-bb55-bb37b27a3447" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="7b06a0ad-8fee-4b02-a9d9-a44a1974bff1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="fe318f93-dbfa-42dc-b62f-64fa524815b7" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e8122c31-f0df-4423-89be-5df89555cd64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="34ef9e6f-e24a-4b2a-890f-6f8d7997278d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f69168a9-5165-4b76-a993-0428b3cf611c" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="40dc65a1-bb0d-4c8d-b403-8bf0c783adbd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="4a5d4b53-af98-4229-b87a-039e7fcd92bd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b94471e7-ad9b-4b35-a016-3f83e33972f6" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="89b37bd6-1f4e-4cd3-b2da-3b6aeff8693f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllNonSyscoProducts&amp;PreparedItemsForAnAccount" id="79b5ba08-3e25-4e82-8b75-cafc9ff2a6eb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="GetAllNonSyscoProducts&amp;PreparedItemsForAnAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllNonSyscoProducts&amp;PreparedItemsForAnAccount" id="6b3b39d2-103b-48b6-838c-bb671e8c2b2b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="eccba745-f9da-495c-baf4-5edb85dc1ed7" name="Contains"><con:configuration><token>materialId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7e947b81-72a4-4e2f-aaf1-817aaf7f8623" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;

int productsSize = json.products.size();
log.info("No Of products::"+ productsSize);

for (int i=0; i&lt; productsSize;i++)
{
	def resPrductId = json.products[i].id;
	def resMaterialId = json.products[i].materialId;
	def resName=  json.products[i].name;
	def resType=  json.products[i].type;
	
	log.info("Service Response:Product ID::" + resPrductId);
	log.info("Service Response:Material Id::" + resMaterialId);
	log.info("Service Response:Name::" + resName);
	log.info("Service Response:Type::" + resType);

	assert resPrductId != null : " Product ID  is null";
	assert resMaterialId != null : "Material ID is null";
	assert resName != null : "Name is null";
	assert resType != null : "Type is null";

}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>limit</con:entry><con:entry>offset</con:entry><con:entry>withProductAttribute</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="903fbcc3-f644-4e59-89a9-67634c453f1f"><con:settings/><con:config><script><![CDATA[import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_NonSyscoProduct";
def restStep2 = "GetAllNonSyscoProducts&PreparedItemsForAnAccount"

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i <= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&&");
     for(int j = 0;j < itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j < itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Create_NonSyscoProduct Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def itemId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	//Execute GetAllNonSyscoProducts&PreparedItemsForAnAccount Step

	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);]]></script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="5a44f8ab-d377-4a8d-8738-7b599f564e46"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>8097ea97-18d8-46fe-b7d0-32f941fbfc1d</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>4bf41673-07d3-4ef5-bb27-efabe337de63</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>363bf805-3e15-42d4-8f58-fe474352014d</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>c6b4f564-910e-47db-a099-116dbc71e85f</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="2e35fb42-e57c-4e2b-89d8-433074dcb0cb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f78f9b17-012b-4d92-add9-28b4f2d56cb9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC026_Prod_InsertNonSyscoProductOrPreparedItem" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="b45f4f45-a564-4d2b-83bf-8b41e43ecc78"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f47cfdc1-1a1c-42e2-9e57-b882e704a4ae" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="25298ec7-bed0-41f3-9010-2fce870d07ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="18616702-f90c-44d4-8083-a7fe81207ad5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="ae7fbf31-b03e-4657-b75c-fe80f0ccc1e8" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="58dc38c9-72d1-4c3c-bd04-ad5a0667487a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="f73f40b9-134d-45b0-846b-a5e5b0941bac" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="41dafcc5-e4c3-4e27-bc1d-b3dd149cd579" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3afaf5e8-d7aa-4be2-884a-eb947f3725ca" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="52bf5280-4e96-4d05-8782-a5400f7f9bdb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2b360501-695d-4c89-aa3b-29992d97b234" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="63cb1975-80e1-490a-9902-120e9a2c826b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="4233ebb2-5336-4c94-8553-76902c81fa56"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_NonSyscoProduct";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Create_NonSyscoProduct Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def itemId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="3118a1fe-41b1-4154-91b5-4e7a7c53ae7e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>e9f69d3e-56dd-4723-8980-3f84fbea88d9</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>c3b7a7c1-21f9-46b2-9750-c2282603673a</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>72cf6f2e-3187-43f1-9cef-7b3cae04b856</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>e8c36b04-83e8-4ef6-935e-a67033e30647</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="00cd2b73-b254-4bcd-b02b-3ab34e015094"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="724886d7-09ec-4f8e-8314-b0e2acdf13cc" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC027_Prod_GetProductByID" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="f62ef364-1f23-4409-9c15-a156c04c9b87"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="e5a8ea1f-43ce-4dcf-8626-c445b2113b29" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e3a480e5-a3fb-4200-a6cb-a3127c11802b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="6f1e6b51-6c09-4220-8568-03b59e55f058" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="fdbacfb8-c746-49ea-94e3-99cc7c179122" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="741ee650-1d8b-4346-8e9d-4387abbfbb21" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="389287d6-17c0-4b2e-af34-7488bfe76abb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="680b7077-2589-4eb0-9e23-228d9bc64634" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="38ef315b-7527-4ba8-b03c-d5865bb23030" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="9333bd4e-caea-497b-aff0-f847b81c7a57" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4caaedc3-f669-47bc-a302-089c56f5db38" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1091b509-0730-4e31-8b08-d95e73d64a07" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetProductByID" id="724e0d72-2970-4168-81ba-0f68a4ab0bdf" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="GetProductByID-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetProductByID" id="aea54b97-5d7e-4a2d-8778-e19f1814b3c1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/</con:originalUri><con:assertion type="Simple Contains" id="97110954-5409-45f4-ae05-4fd2591ffd6c" name="Contains"><con:configuration><token>id":${DatFile#itemId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="756c5d2a-c65d-43cb-a8c6-c4cabb2bb812" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resId = json.id;
def resName = json.name;
def resMaterialId = json.materialId;
def resSupplier = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAverageWeightPerCase = json.averageWeightPerCase;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputProductId = context.expand('${DataFile#itemId}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("Product id::"+"Service Response::"+ resId );
log.info("Name::"+"Service Response::"+ resMaterialId);
log.info("Supplier Id::"+"Service Response::"+ resSupplier);  
log.info("Brand::"+"Service Response::"+ resBrand);   
log.info("Description::"+"Service Response::"+ resDescription);   
log.info("Nick Name::"+"Service Response::"+ resNickName);   
log.info("Type::"+"Service Response::"+ resType);   
log.info("Average Weight Per Case::"+"Service Response::"+ resAverageWeightPerCase);   
              

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resId != null : "Product Id is null";
assert resMaterialId != null : "Material Id is null";
assert resSupplier != null : "Supplier Id is null";
assert resBrand != null : "Brand is null";
assert resDescription != null : "Description is null";
assert resNickName != null : "NickName is null";
assert resType != null : "Type is null";
assert resAverageWeightPerCase != null : "Average Weight per case isnull";
assert inputProductId == resId : "Response Product Id is not maching with the input Product Id";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#itemId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="d864d555-656c-42ae-8c7f-41e70f913a97"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_NonSyscoProduct";
def restStep2 = "GetProductByID"

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Create_NonSyscoProduct Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def itemId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	//Execute Get Product By ID Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="335698ec-bb51-480e-a979-d23290a008ae"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>4f8ed8c0-cd6c-40aa-b70c-8a0eee6c2a10</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>7447e392-6891-4454-953f-9bfcb8c89514</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>f6dad7ef-ba12-40db-8770-12afc3c0511d</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>94564b63-d8b5-4346-bf32-9f0cad35e447</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="4e8ad1c7-937b-410d-8b8a-5f6d559fd608"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="18a79f56-347e-428d-89a3-abe6cddd8c96" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC028_Prod_UpdateAProduct" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="7156aef7-af75-4412-8abb-ecac8ac5d24b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="6b10b912-a9be-4510-aeff-db0038f9415d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5e2de4bb-7f65-4e90-beb2-ee92ad4811b0" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="c309004b-f99e-4a99-9bb0-4085c1455113" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4a8e3449-d277-4d91-a353-54c7344e75b8" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9779a5f3-c1bd-4eba-8891-34db2e5f2163" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="bc0f1eca-9b5a-4d1f-8fba-ae9e7d28c9a4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="a7b89348-7e96-4591-9328-e61c426ee465" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9d61e9df-8c1d-4b46-9d62-290bd5491c90" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="91c1bb9a-d4cc-41b3-b231-628549094c9e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="9f3ac389-1c2c-44ad-98a2-58e3251cff61" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8e6936db-9a44-4035-85ca-398de8937f83" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Product" id="959aafd2-b941-4706-8022-469691123936" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="UpdateAProduct-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Product" id="257f5982-4cbc-4fad-80cd-df1975ccafcb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/3165bc2f-acc2-4ee0-a3d0-115c2c42452b</con:originalUri><con:assertion type="Simple Contains" id="8835581b-97c7-4b43-994b-c0c0de577f71" name="Contains"><con:configuration><token>materialId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ba3ace57-f3f0-438b-989a-2473f0809875" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
//def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
//def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
//log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
//assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#itemId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="de0dd7b3-98b4-4582-9cb3-2454f36a00ab"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_NonSyscoProduct";
def restStep2 = "Update_Product"

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Create_NonSyscoProduct Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def itemId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	//Execute Update_Product Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="6a137ff9-a723-4821-951e-8c42a142fab8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>2ff0b2bf-02e7-48eb-b3b9-1729c5e65026</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>6ccb4a42-817a-4bcd-9988-7412d8939458</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "materialId": "987654",
  "name": "Sweets",
  "description": "Sweetshop",
  "nickName": "Sweets",
  "brand": "Sweets",
  "supplier": "${DataFile#supplierId}",
  "averageWeightPerCase": 10,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>0d8b80a4-9762-45da-af7f-2e1f42023bf7</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>b302882a-35b0-481c-9d6b-91e41f95edf6</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="6bd45df9-5cf1-491d-931f-53648623bc20"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "materialId": "987654",
  "name": "Sweets",
  "description": "Sweetshop",
  "nickName": "Sweets",
  "brand": "Sweets",
  "supplier": "${DataFile#supplierId}",
  "averageWeightPerCase": 10,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="59f5a832-4b27-432e-ad2a-d0af8d704180" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC029_Prod_UpdateAProduct_InvalidID" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="dd7ff458-cdd9-462d-990d-d62c7413cc62"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="dd958dbe-6493-4778-aac1-7b6df08c1743" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="ef45ea01-d6c3-4a09-a321-7df1dc2f5f5b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="3ae7bd97-0d3b-4695-b9c9-870a41bc89e4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5571c1db-c12d-452c-9965-b332300fb69a" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2702e397-a5d8-4f2e-b03c-bb3829bf585f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="55692768-1688-48ff-a256-4cda46329b87" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b58723c5-efda-4a78-afee-a12951f8a8d7" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b870b2b6-4a6f-4be1-bd5f-53e3fac2adcc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="67f7c261-79db-49ba-8102-33aee4eea51a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1e3dca3f-6020-48b8-bb0f-1e3fb4288496" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3b14bf0a-a6cd-48a5-8cd5-f2042e9d71dd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Product" id="0c9bf869-32ae-400e-b043-d374afb0a3df" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="UpdateAProduct-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Product" id="257f5982-4cbc-4fad-80cd-df1975ccafcb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/3165bc2f-acc2-4ee0-a3d0-115c2c42452b</con:originalUri><con:assertion type="Simple Contains" id="8835581b-97c7-4b43-994b-c0c0de577f71" name="Contains"><con:configuration><token>Sysco Product with id ${DataFile#additionalInput} does not exist</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#additionalInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6b4de526-3072-4616-a881-03aa4a6f35c6"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_NonSyscoProduct";
def restStep2 = "Update_Product"

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Create_NonSyscoProduct Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def itemId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	//Execute Update_Product Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="388c31e0-b58b-47c3-9164-eb97e2f1b291"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>6aca19f4-10bc-4892-9b5f-df342da830b2</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>0be12a3b-ced5-46d4-ad04-5090b5f6decb</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "materialId": "987654",
  "name": "Sweets",
  "description": "Sweetshop",
  "nickName": "Sweets",
  "brand": "Sweets",
  "supplier": "${DataFile#supplierId}",
  "averageWeightPerCase": 10,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>123456</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>4bf90b50-d4dd-4c25-9610-df9d01d9687a</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>01cd3706-3b37-4ca7-94aa-8a0bf9516e99</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="25b0445a-397c-4a74-a9ec-cfd1066ea6fa"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "materialId": "987654",
  "name": "Sweets",
  "description": "Sweetshop",
  "nickName": "Sweets",
  "brand": "Sweets",
  "supplier": "${DataFile#supplierId}",
  "averageWeightPerCase": 10,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>123456</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="59a06571-78a7-4b44-8704-8ded1a9f5aa0" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC030_Prod_Delete Product" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="2f54ffd4-9f07-4e97-b797-baa6cef0c746"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="6108d802-1092-4f89-a5ff-04fc2b60a67e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="476039ea-0aab-4c65-9b65-1953a4ffd9f2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="b4771237-eb32-4b45-aa7b-fb2642af389a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="18176809-2c42-4f28-9125-4d3c97de3735" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2eff4113-1ac1-46dc-96a5-099de54a3058" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="25f20b06-732b-457f-bed2-27c014279f74" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="58fdfb51-b061-45c9-8035-239d24179c30" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="75548e46-cfcc-4f09-8b3b-2a3e2d47b608" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="11e745c9-8ef4-474c-a1d9-9fe5d0eca319" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="8ce52765-6f6f-405c-99ac-b08cac7460d6" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="034caf29-f91a-4e81-9576-811b9128f5f4" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Product" id="0f74c9b3-c2a8-4c30-925d-920f1ed39e10" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="DeleteProduct-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Product" id="4896cf12-3f9c-4770-bcce-9cf9a8508848" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/103cce9f-0bd7-4a3f-b5bb-92030d52d082</con:originalUri><con:assertion type="Simple Contains" id="24d21cd9-8aa8-4f36-be40-2792488cb12f" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="193ba389-5b38-4615-b696-6513a7e0f322" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def inputItemId = context.expand('${DataFile#itemId}');

def resItemId = json.id;
def resItemName = json.name;
def resMaterialId = json.materialId;
def resSupplier = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAverageWeightPerCase = json.averageWeightPerCase;
def resPack = json.packSize.pack;
def resSize = json.packSize.size;
def resUom = json.packSize.uom;
def resDeleted = json.deleted;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("Item ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
log.info("Service Response:Group Name::" + resItemName);
log.info("Service Response:Group Type::" + resMaterialId);
log.info("Service Response:Group Name::" + resSupplier);
log.info("Service Response:Group Type::" + resBrand);
log.info("Service Response:Group Type::" + resType);
log.info("Service Response:Group Name::" + resDescription);
log.info("Service Response:Group Type::" + resNickName)
log.info("Service Response:Group Type::" + resAverageWeightPerCase);
log.info("Service Response:Group Name::" + resPack);
log.info("Service Response:Group Type::" + resSize)
log.info("Service Response:Group Name::" + resUom);
log.info("Service Response:Group Type::" + resDeleted)

assert inputItemId == resItemId : "Response Item Id is not maching with the input request Item Id";
assert resItemName != null : "Item Name is null";
assert resMaterialId != null : "Material ID is null";
assert resSupplier != null : "Supplier is null";
assert resBrand != null : "Brand is null";
assert resType != null : "Type is null";
assert resDescription != null : "Description is null";
assert resAverageWeightPerCase != null : "Average Weight Per case is null";
assert resPack != null : "Pack is null";
assert resSize != null : "Size is null";
assert resUom != null : "UOM is null";
assert resDeleted != null : "Deleted is null";
assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#itemId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="89abc29c-90ff-4a09-b7d1-6fd20c90f8a7"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_NonSyscoProduct";
def restStep2 = "Delete_Product";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Create_NonSyscoProduct Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def itemId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	
	//Execute Delete_Product Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="11369e59-5333-4b66-8b36-02b4873d032b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>b0e15314-e4d0-4579-a4b3-cfdab9f78023</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>9052b92f-b4b1-47b9-9f97-a21d447889da</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>79881c67-1eb9-484e-b27a-2b38df9b7b8e</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>dc89ae8a-78ee-4cd8-a56a-7a50a7be2fd3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="d14c59d3-e8af-4601-81a8-dee8b3963579"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="840d8a4c-f129-4618-9290-d5e312f27ff5" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC031_Prod_Delete Product_InvalidProd" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="0992ee67-1379-46b4-8b31-8fa64feb4ae9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="7a4aac7e-b439-4b0a-b3de-f1cb3ff1eebc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="855a87d2-0e7f-4c39-86bd-b885b6b0e495" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="4a95051d-ecda-491d-84eb-c1ba16689617" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="0bd5cd5f-9135-4ee3-9848-5bcb11f50ef5" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0a6f0050-c0dc-43c9-8ffd-970143f279ff" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="35ce3a29-c44f-44fc-b3af-1a7381fc5da2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="40c29f4d-69e7-492d-a715-d03be6ec91ad" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3594a1eb-4431-4e44-b85b-23d2628e7ffe" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="a477fcc1-a82d-454d-91c0-ee4ac7de9aa3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1dfc056e-fd84-496a-86c9-4e1b480c2608" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ffa90094-2d61-403f-ab8e-05f0f9dec51a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Product" id="1a700448-74c5-461c-86a2-b03ada0c2c80" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products/{id}" methodName="DeleteProduct-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Product" id="4896cf12-3f9c-4770-bcce-9cf9a8508848" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/products/103cce9f-0bd7-4a3f-b5bb-92030d52d082</con:originalUri><con:assertion type="Simple Contains" id="24d21cd9-8aa8-4f36-be40-2792488cb12f" name="Contains"><con:configuration><token>"Sysco Product with id ${DataFile#additionalInput} does not exist"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#additionalInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="01fe2dcf-6fde-41cd-a9bb-c0c7ef5270ef"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_NonSyscoProduct";
def restStep2 = "Delete_Product";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Create_NonSyscoProduct Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def itemId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);

	
	//Execute Delete_Product Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="3a9b35b0-452a-45d0-82a2-2640d0d1c1b1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId</con:name><con:value>78b02113-59fd-4dff-ada4-a8483a204a1c</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>4d751065-5e78-4b72-9046-6dfe3510e42c</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>additionalInput</con:name><con:value>123456</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>190cf91f-a409-4703-af35-b6b0a0be71d7</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>fb9af29d-b226-441d-8c33-fb8deeb50d28</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="4ecf358e-83bf-4510-8763-073d7a582ab0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#createdGroupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
       
  ]
}
</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}&amp;&amp;{
  "name": "fruitGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>123456</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="efa22d4d-c5c7-4287-993d-4d19d38131ab" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC032_Sup_GetListOfSuppliers" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="6da8c1f4-fb65-495b-bc9e-3dc2fcd8143e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="a2486ca7-4f43-4022-8057-2cea15cd75bf" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d95ad7e-2eef-454e-b547-10790e0a36bc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="7aff5188-8202-4703-912f-9654324c0028" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="739e0d79-ec03-4623-8c00-6ef327ff8604" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b13044df-b4fd-4c59-b879-efd272a5443f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_ListOfSuppliers" id="7b477078-f992-4a6f-a931-f563307fafcd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="GetListOfSuppliers-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_ListOfSuppliers" id="0273178a-e7a3-4f9d-ab84-7aa756bda5ee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="c8ef209e-fdea-4bfe-b239-39b1bdd2172b" name="Contains"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0437da59-175f-4ba2-8860-715a0dbc71f4" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputCustId = context.expand('${DataFile#cust}');
def inputOpco = context.expand('${DataFile#opco}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

int supplierSize = json.suppliers.size();
log.info("No Of Suppliers::"+ supplierSize);
for(int i=0;i &lt; supplierSize;i++)
{
	def resSupplierId = json.suppliers[i].id;
	def resSupplierName = json.suppliers[i].name;
	def resSupplierConInfo = json.suppliers[i].contactInformation;
	def resOpco = json.suppliers[i].associatedAccount.opCo;
	def resCustId = json.suppliers[i].associatedAccount.customerId;
	def resNotes = json.suppliers[i].notes;	
	
	log.info("Service Response:Supplier Id::" + resSupplierId);
	log.info("Service Response:Opco::" + resOpco);
	log.info("Service Response:Customer Id::" + resCustId);
	log.info("Service Response:Supplier Name::" + resSupplierName);
	log.info("Service Response:Contact Info::" + resSupplierConInfo);
	log.info("Service Response:Notes::" + resNotes);
	
	log.info("Input Request:Customer Id::" + inputCustId);
	log.info("Input Request:Opco::" + inputOpco);
	log.info("Is Supplier deleted:::"+json.suppliers[i].deleted);
	
	assert resSupplierId != null : " Supplier Id is null";
	assert resSupplierName != null : "Supplier Name is null";
	assert resSupplierConInfo != null : "Supplier Contact Information is null";
	assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
	assert resNotes == resNotes : "Response Notes is not matching with the input request Notes";
	assert json.suppliers[i].deleted == false : "The Supplier is deleted";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6f9ca9b2-154f-42ec-b1d7-59c4b8083021"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Get_ListOfSuppliers";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def supplierId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Get_ListOfSuppliers Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="c4e5a2d3-9c0e-49b7-8b1f-fd95368d37ba"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>63415cd2-1c6e-45fe-be57-c6d7bfaa2ba6</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="30afca65-deac-4f3a-85f0-8abc13b6ce77"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="43519d2f-0ca6-4580-bc01-955cda629b1a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC033_Sup_Create_New_Supplier" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="d0e69a75-06d1-4fb6-9b37-3f9550432845"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="b28ff266-1c80-4c88-880a-4851eac7bbd1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fc35e876-02d4-4def-becf-7053ae89ca9c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="88fb5627-4f11-4277-b63a-edf9f8bdf55f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2b32b3f5-949c-4e89-9050-67b52195af39" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7b3b09f5-4cc6-49f5-82ae-52060350721d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="fbe1600c-c432-4cc5-a80d-5c62cec1c99b"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Supplier";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	// End of Execute Pre Steps
	
	//Execute Create_Supplier Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def supplierId = jsonrestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="f64642cd-e965-449a-834f-b62cabbffc07"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>dbf78b72-1ad5-4037-82ab-bdea10c87bc0</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="a473764b-c7e8-4239-b84a-079c9c62933f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7e49c677-a4ca-4e7b-9d4d-18874375b9eb" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC034_Sup_GetaSupplierById" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="de5a0fa1-69e6-4197-8a68-c129a1a731b9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f27d5af3-5f23-469d-bd57-568ca82e5097" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5fc13c67-2b6c-4f7f-8974-6d74730d09e1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="04d349e6-915d-49e0-92bf-63d2ecf88d0a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="9eaf39b8-feef-4f52-af36-e3868e38946e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0c1e27fb-0f80-4b3b-aba2-3fb4ee656f23" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetASupplierById" id="bda5264c-a724-4ae7-8a1a-ee52388e08de" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers/{supplierId}" methodName="GetASupplierById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetASupplierById" id="191ea909-0b88-4b64-8db2-5105aea92de7" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers/6cb9070d-ca66-4f36-9bde-a89530b8d1f9</con:originalUri><con:assertion type="Simple Contains" id="89f245d4-760a-4235-9aa8-c4646b07e91c" name="Contains"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="162ca6e9-de7b-4e5d-ab15-5db775b6c08c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputCustId = context.expand('${DataFile#cust}');
def inputOpco = context.expand('${DataFile#opco}');
def inputSupplierId = context.expand('${DataFile#supplierId}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierId = json.id;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resCustId = json.associatedAccount.customerId;
def resNotes = json.notes;

log.info("Service Response:Supplier Id::" + resSupplierId);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Customer Id::" + resCustId);
log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Id::" + inputSupplierId);
log.info("Input Request:Customer Id::" + inputCustId);
log.info("Input Request:Opco::" + inputOpco);

assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert resSupplierName != null : "Supplier Name is null";
assert resSupplierConInfo != null : "Supplier Contact Information is null";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert resNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="supplierId" value="${DataFile#supplierId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="b52501d7-3b7d-48f3-84fa-3ed44f7b0745"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "GetASupplierById";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def supplierId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute GetASupplierById Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="edd3e84f-5c0f-4e16-b846-7b476a3b53f3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>0f6cfb3f-7aaf-474c-8b03-eb60d6072ae4</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="3c08f91f-f39a-45db-823d-afecb20606c6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="53128d81-4fce-42fd-836d-b3a451706170" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC035_Sup_GetaSupplierById_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="dee2975f-64f4-48ff-8716-d3d6d6357ab8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="ca104a61-acab-4906-963f-c1207be80abf" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4e10c02e-41d1-4b1e-9e2b-8dcdf9cf9cff" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="995ec1f9-6a6a-4c27-ae9b-c697bd4d4254" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="52f576c7-3fcf-45bd-b5ba-f6308b5b3bcd" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3cc6b017-008c-4ccc-a955-69725fe175a2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetASupplierById" id="52ad9edc-cbe8-43e4-8e1f-c7658225d1c2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers/{supplierId}" methodName="GetASupplierById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetASupplierById" id="191ea909-0b88-4b64-8db2-5105aea92de7" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers/6cb9070d-ca66-4f36-9bde-a89530b8d1f9</con:originalUri><con:assertion type="Simple Contains" id="89f245d4-760a-4235-9aa8-c4646b07e91c" name="Contains"><con:configuration><token>"Invalid UUID string: ${DataFile#additionalInput}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="supplierId" value="${DataFile#additionalInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="8dd3ffbb-dbe6-4391-95ab-2af69ac2daf5"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "GetASupplierById";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def supplierId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute GetASupplierById Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="958e7a41-e773-4964-97c0-4dbeb266855c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>e2e585c5-7388-45d6-96cf-e61b968533bc</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>123456</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="fc928f7b-47a4-42e6-b0ef-3c1a393e161f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>123456</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f6c84823-06dd-4ecc-88f3-3280a1e894ff" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC036_Sup_Update_Supplier" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="0f11007a-eb43-4ccf-8eff-2ae77afc4d8c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="39850b97-56d5-4983-844f-ccb2a34d0533" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d244578d-d2ac-49e3-b9e8-a7727e9ace88" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="99767b0b-0aef-45b8-8598-87ff1eadbc06" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e56da7b7-009d-4096-a5f3-b04a9b503971" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="96b067ff-89b6-4d11-bf9a-946f0626d62f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Supplier" id="63e436af-a42d-49e8-8956-e2f6d93da174" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers/{supplierId}" methodName="UpdateSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Supplier" id="848f1b5f-0c6e-48b1-9f47-333aada87dc2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers/66feabbe-68ae-48c3-94a7-3e60386b835b</con:originalUri><con:assertion type="Simple Contains" id="3e3ffa26-32fc-42bc-852e-cc38f6d220a7" name="Contains"><con:configuration><token>id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b939a22b-1e4f-4951-af56-ef200a6b6e52" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2520b3b7-dbc1-4699-bb34-630eb26e11e7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resCustId = json.associatedAccount.customerId;
def resNotes = json.notes;
def resSupplierId = json.id;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:CustomerId::" + resCustId);
log.info("Service Response:Notes::" + resNotes);
log.info("Service Response:SupplierId::" + resSupplierId);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:CustomerId::" + inputCustId);
log.info("Input Request:Notes::" + inputNotes);
log.info("Input Request:SupplierId::" + inputSupplierId);

assert inputSupplierId == resSupplierId : "Response Supplier Id is not maching with the input request Supplier Id";
assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputCustId == resCustId : "Response CustomerId is not matching with the input request CustomerId";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="supplierId" value="${DataFile#supplierId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="eca32a68-e297-4599-861e-53276187e0aa"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Supplier";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def supplierId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Update_Supplier Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="e588a4f6-cd14-4e97-9ede-88e2923e8abf"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>e1204ba4-a5ba-4edb-b538-b0b2ccb8ea84</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "name": "Sweetswalah",
  "contactInformation": {
    "address": "Street USA",
    "contactName": "Savi",
    "emailAddress": "Savi@gmail.com",
    "phoneNumber": "9897654383"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="141bfc32-d13c-40a9-941c-a1cc4a34bcaf"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "name": "Sweetswalah",
  "contactInformation": {
    "address": "Street USA",
    "contactName": "Savi",
    "emailAddress": "Savi@gmail.com",
    "phoneNumber": "9897654383"
  },
  "notes": "string"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4d6eadc0-f6fb-4390-ac03-079205b23ab1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC037_Sup_Update_Supplier_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="b78d112a-6865-4e19-8c80-6887583488df"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="60d141ef-7289-45b9-9df5-b185a1ef4027" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4b69297b-69d3-4825-a306-5d5715f85db5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="5eab038f-6fd3-4e7c-9ba2-9cedb41c24b6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1c0ad5da-d8c7-4212-97ea-72895a0765b4" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b8558e97-70cc-4eb9-ac24-00431758739f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Supplier" id="212a62fb-9e5b-4b24-b94c-65346915393e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers/{supplierId}" methodName="UpdateSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Supplier" id="848f1b5f-0c6e-48b1-9f47-333aada87dc2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers/66feabbe-68ae-48c3-94a7-3e60386b835b</con:originalUri><con:assertion type="Simple Contains" id="3e3ffa26-32fc-42bc-852e-cc38f6d220a7" name="Contains"><con:configuration><token>"Invalid UUID string: ${DataFile#initialInput}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="supplierId" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="5d182458-e104-48f4-85fc-b4f76dd807e5"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Update_Supplier";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def supplierId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Update_Supplier Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="b930ad27-be2e-46c3-9b47-aadafab44541"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>fc600fe5-1610-4113-a6b5-7319dd161bcf</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>123456</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "name": "Sweetswalah",
  "contactInformation": {
    "address": "Street USA",
    "contactName": "Savi",
    "emailAddress": "Savi@gmail.com",
    "phoneNumber": "9897654383"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="9243c71f-e94a-4204-9173-97962decbad1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>123456</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "name": "Sweetswalah",
  "contactInformation": {
    "address": "Street USA",
    "contactName": "Savi",
    "emailAddress": "Savi@gmail.com",
    "phoneNumber": "9897654383"
  },
  "notes": "string"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="04ee3936-02cc-4218-bfeb-27b42e3aa2b3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC038_Sup_Delete_Supplier" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="df2a9e92-774c-4cb4-aa83-a715322f9495"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="45b73bb1-54cb-40b6-bf83-7e0a9983b01e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="9371b1fa-61ea-4f9e-b35d-e40ca8d1f900" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="cafafcbc-5281-4856-bdf2-82daa29fb77f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="57c0f4e0-df7c-46df-8c56-04002aa20ef7" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9ad79154-88ad-4be6-9aaa-ccb7b3bc9aa1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Supplier" id="3084b0c6-6bd5-4fe5-8362-45c6474d85ce" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers/{supplierId}" methodName="DeleteASupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Supplier" id="84c6c8e7-7b7a-4696-8e75-3418f6639c37" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers/0fba1bbf-4d87-4289-905e-5b12e8107532</con:originalUri><con:assertion type="Simple Contains" id="70b1f19a-fce9-4d84-8636-6d7b28ffb3aa" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="430f49e2-f84b-4836-9790-e6f3d5ec6856" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="supplierId" value="${DataFile#supplierId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="e97f61dd-050d-4648-8245-916e6ba9e8a6"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Supplier";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def supplierId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Delete_Supplier Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="33c4b30c-975e-485d-ba18-0e8bd9694572"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>e67cc626-30c4-4dcc-8f5f-77929e6ae8e8</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value/></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="814df3fb-b6a9-4951-9f30-d5c9f5ff8430"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f74cf76c-aa10-4d6b-8773-cecc217c21dc" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC039_Sup_Delete_Supplier_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="bf00c567-883e-4600-a422-e56f6fc8d961"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="417c26c7-0b9a-4337-a726-e46ab270a929" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="7f3a1bef-3658-4962-97f9-da1d2e8ff3dd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="20909e39-83e9-44f7-b568-6d8e40b37437" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9408faee-3e18-4f2c-9238-6bf8084c0386" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Supplier" id="701b7072-92d8-48fa-802d-2248ebe18e3d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers/{supplierId}" methodName="DeleteASupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Supplier" id="84c6c8e7-7b7a-4696-8e75-3418f6639c37" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/suppliers/0fba1bbf-4d87-4289-905e-5b12e8107532</con:originalUri><con:assertion type="Simple Contains" id="c5b91a04-0857-4c53-a638-a51f9c8f2ce6" name="Contains"><con:configuration><token>Supplier with id ${DataFile#additionalInput} does not exist</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="supplierId" value="${DataFile#additionalInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>supplierId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="5bf8e9f0-9be5-4178-bbbd-b8481da695dd"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Supplier";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Supplier";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	
	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def supplierId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

// End of Execute Pre Steps
	
	//Execute Delete_Supplier Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="03990549-0b8f-45b9-b635-29f58d68ab64"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>6d6be074-bfb2-42d8-bece-4cab53628685</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>77825585-55ea-4d70-82ae-a5b</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="f309997d-c125-4631-9476-f6846625ec84"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>77825585-55ea-4d70-82ae-a5b</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c08c5e1b-279e-4092-b3e2-b5d6e3df46b8" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC040_Rev_CreateRevenue" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="effe9b19-de1a-458c-8c52-be02b9e25220"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="ef7eec50-e777-4b9c-be5f-84c538d17b3f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="a8eed180-5dea-4f68-a17a-eae6f2602532" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="a32ae93a-752a-45e0-bfa0-8981d4acd340" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="ebc4638f-b914-48e6-a974-a88b2c8e65cb"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="9a5247a3-9c3c-423c-ade7-c36f794a6bc8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="7d9e1b5a-642b-4284-961c-39cbdd34df78"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="376d8b9a-aa1a-48c0-a7ce-564b703065b1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC041_Rev_CreateRevenue_Error" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="dcb4ae41-33ac-4cec-9ed6-9247ad35ed92"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="3440cec6-1a67-4f3d-b073-1b6a65413379" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="2a9f610a-e326-4d2c-b7ca-4c98bf1fc424" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="Simple Contains" id="35047155-af4a-48e8-8708-635710870b7d" name="Contains"><con:configuration><token>Unable to process JSON</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="1544303f-0a1d-4d1c-a76a-5c7def4ba336"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="7bf6a6f6-3329-4720-b823-c2d4e67aab94"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>NA</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="80bb3736-519a-4306-9059-f4a6b35459f3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>NA</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7782e12b-dc27-43c6-b126-00251aecfb0f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC042_Rev_CreateRevenue_DateFormatError" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="0925a24e-2317-46d8-a112-892385de8aef"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="82380823-a52b-45e8-af44-b2495b57a969" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="5877a380-6e72-43ef-98e2-652c1da1d009" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="Simple Contains" id="35047155-af4a-48e8-8708-635710870b7d" name="Contains"><con:configuration><token>start date must be a valid DateTime</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="093df883-6de9-46c3-943b-1d9d40af330d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="f2118300-93a1-4e80-8940-b30fbaf0c6b5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016/05/02",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="42354159-dcff-4102-93d5-1ad68333ce1b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016/05/02",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fdf2b947-0dc1-4c26-8009-e4cb31394030" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC043_Rev_CreateRevenue_StartAfterEndError" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="d5231397-59f6-434d-88f9-e4afdbff82bc"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="28a595ec-0321-48d3-a2f4-d503e4925b07" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="47f4e74a-1e93-443a-8af5-38f7e841fc51" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="Simple Contains" id="35047155-af4a-48e8-8708-635710870b7d" name="Contains"><con:configuration><token>start date must be before end date</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="5715d66b-5d87-49af-a03f-ec1bce9b80b4"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="0784fb55-2e73-438b-a4a0-43b7236f660f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-07T09:06:14.217Z",
  "endDate": "2016-05-06T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="7a7200e1-a31a-4bac-95bb-fffa58531241"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-07T09:06:14.217Z",
  "endDate": "2016-05-06T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="57821f37-f911-40d9-aaaf-f4e13fc77bab" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC044_Rev_CreateRevenue_InvalidAccError" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="4d33c961-6562-4ac0-883f-7f4c0da01e1e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="905f4775-7cbc-439b-b3f1-f9d9656bc5f0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="0e60e111-7d92-4466-9f3a-43934f35afde" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|456675|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="Simple Contains" id="35047155-af4a-48e8-8708-635710870b7d" name="Contains"><con:configuration><token>Account Not Found</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="275d003d-b8b1-4c5a-9476-b6d513240b78"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="cac297e0-0612-425f-82d4-83612dc3e36f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>80344732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="be61b31d-fb60-4daf-8fc3-5d78502210b8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>80344732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="14ecd3a7-de77-43d6-abdd-a8faf966624d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC045_Rev_GetRevenuesBetweenDates" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="690947a4-6016-4ab5-8772-e63db3f7c430"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="28f57314-59b8-4363-a8a8-176ec44e4992" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRevenuesBetweenDates" id="2ffe9bd7-432d-40a2-8413-57ac37fd01d2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="GetRevenuesBetweenDates-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRevenuesBetweenDates" id="69e71d7f-1bb5-4cf8-b769-59d3f3161b2c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="Simple Contains" id="47247e35-4e11-4a6c-b9da-f35361f5356a" name="Contains"><con:configuration><token>revenues</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="57c9f5fa-6839-4bf2-8489-9d52d04b1cef" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper ;
import java.util.Date;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputStartDate = context.expand('${DataFile#startDate1}');
def inputEndDate = context.expand('${DataFile#endDate1}');

Date inStDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", inputStartDate );
Date inEnDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", inputEndDate );

int revSize = json.revenues.size();
log.info("No Of Revenues::"+ revSize);

for(int j = 0 ; j < revSize;j++){
	def resOpco = json.revenues[j].opCo;
	def resCustId = json.revenues[j].customerId;
	def resRevId = json.revenues[j].id;
	def resStartDate = json.revenues[j].startDate;
	def resEndDate = json.revenues[j].endDate;
	
	Date stDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", resStartDate );
     Date enDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", resEndDate );
     
     boolean isStartDateValid = stDate.after(inStDate) && stDate.before(inEnDate);
	boolean isEndDateValid = enDate.after(inStDate) && enDate.before(inEnDate);
	
	log.info("isStartDateValid::"+ isStartDateValid);
	log.info("isEndDateValid::"+ isEndDateValid);	
	log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
	log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
	log.info("REVENUE ID::"+"Service Response::"+ resRevId);
	log.info("START DATE::"+"Service Response::"+ resStartDate + "    Input Request::"+ inputStartDate);
	log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
	
	assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
	assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
	assert resStartDate != null : "Revenue start date is null";
	assert resEndDate != null : "Revenue end date is null";
	assert resRevId != null : "Revenue Id is null";
	assert isStartDateValid == true : "Response Start date is not falling between the input start and end Dates";
	assert isEndDateValid == true : "Response End date is not falling between the input start and end Dates";
			
	int traxnValueSize = json.revenues[j].transactions.value.size();
	log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);
	for(int i = 0 ; i < traxnValueSize; i++)
	{
		def txnValue = json.revenues[j].transactions.value[i];
		log.info("TRANSACTION VALUE::"+"Service Response::"+ txnValue); 
		assert txnValue != null : "Transaction value is null";	
	}
}]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="startDate" value="${DataFile#startDate1}"/>
  <con:entry key="endDate" value="${DataFile#endDate1}"/>
</con:parameters><con:parameterOrder><con:entry>startDate</con:entry><con:entry>endDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="bd7638ea-1244-4de2-8922-06783a37bff5"><con:settings/><con:config><script>import java.util.Date;

String stdate = '2016-05-13T04:44:17.531Z'
String endate = '2016-05-15T04:44:17.531Z'
Date sDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", stdate )
Date eDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", endate )

String date = '2016-05-14T04:44:17.531Z';
Date dDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", date );
dDate.after(sDate) &amp;&amp; dDate.before(eDate);

</script></con:config></con:testStep><con:testStep type="groovy" name="Run" id="3f447fe2-2d83-42d0-8470-ea921927ca9d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "GetRevenuesBetweenDates";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);

	def dateArray = propData9.split("&amp;&amp;");
	log.info("dateArray:::::"+dateArray);
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("startDate"+i,dateArray[0]);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("endDate"+i,dateArray[1]);	
                       

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="ec555609-40c4-4dbc-8401-623c3aa3fe9e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-04-26T09:06:14.217Z",
  "endDate": "2016-04-26T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>startDate1</con:name><con:value>2016-04-30T04:03:43.626Z</con:value></con:property><con:property><con:name>endDate1</con:name><con:value>2016-05-02T22:03:43.626Z</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="f93582c3-fdec-4847-a0b5-8b9182f41172"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>2016-04-30T04:03:43.626Z&amp;&amp;2016-05-02T22:03:43.626Z</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d4a4f629-5932-44ea-9043-d603e2900876" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC046_Rev_GetRevenuesById" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="3f5e560a-af20-44de-aa5f-d7e1d2ff1402"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2e256838-b981-4f21-9010-b9a41e64d090" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="b07230f0-9fce-4498-87ef-f2c2fbff76a2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="b4b58714-faa2-4b36-b1e2-b77f7421f0f7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRevenueById" id="677b7300-8fb9-4438-8448-7db5a8bb2aa6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues/{revenueId}" methodName="GetRevenueById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRevenueById" id="93438a4d-c4bc-4de3-96cd-4f38743c8df0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="1d55f494-ede2-4221-89da-e903e6c3e98a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                def txnValue = json.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ txnValue); 
                assert txnValue != null : "Transaction value is null";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputRevId = context.expand('${DataFile#revenueId}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("REVENUE ID::"+"Service Response::"+ resRevId+ "    Input Request::"+ inputRevId);
log.info("START DATE::"+"Service Response::"+ resStartDate );
log.info("END DATE::"+"Service Response::"+ resEndDate);
                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resStartDate != null : "Revenue start date is null";
assert resEndDate != null : "Revenue end date is null";
assert inputRevId == resRevId : "Response Revenue Id is not maching with the input Revenue Id";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="revenueId" value="${DataFile#revenueId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="9ec8a9bc-a0ea-4bb0-acda-d6c450904bc0"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";
def restStep3 = "GetRevenueById";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def revenueId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueId",revenueId);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueOutput",restStep2Response);

	//Execute GetRevenueById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="442065be-c1cf-46b5-ae98-c6ce144b9a5c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":777.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>revenueId</con:name><con:value>489cf9e9-1a1c-4e9b-9329-8840673cfe2a</con:value></con:property><con:property><con:name>revenueOutput</con:name><con:value>{"id":"489cf9e9-1a1c-4e9b-9329-8840673cfe2a","startDate":"2016-05-02T09:06:14.217Z","endDate":"2016-05-02T09:06:14.217Z","transactions":[{"value":777.02}],"opCo":"067","customerId":"804732"}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="faca4298-b943-4cdf-a9b9-db1d992bc26a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":777.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ba8214ce-126c-4425-b408-7b7795906e9c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC047_Rev_GetRevenuesById_Error" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="3e394cec-b581-4384-9a4d-721f34ee40be"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="26915f78-edd8-41ed-baf8-2af74c8482a9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="99d9b577-af3f-45cd-8fad-ceba6be6ee71" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="70caad88-3516-4b5c-bb3c-9d9c245f57bd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetRevenueById" id="9ba2b5a2-60cf-4f99-97a9-c4aa88b5232d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues/{revenueId}" methodName="GetRevenueById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRevenueById" id="93438a4d-c4bc-4de3-96cd-4f38743c8df0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:assertion type="Simple Contains" id="e48c3794-6ed9-46cf-bf8c-f30f2b2a5af5" name="Contains"><con:configuration><token>Revenue with id ${DataFile#revenueId} does not exist</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="revenueId" value="${DataFile#revenueId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="474cd859-2201-43be-83df-afeccfe25dfc"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";
def restStep3 = "GetRevenueById";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def revenueId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueId","12345678901234567890");
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueOutput",restStep2Response);

	//Execute GetRevenueById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="92987917-8e86-4edd-80f3-3c10874b1617"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":777.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>revenueId</con:name><con:value>12345678901234567890</con:value></con:property><con:property><con:name>revenueOutput</con:name><con:value>{"id":"2388c567-c4d7-4df7-86d1-f471f7b2c169","startDate":"2016-05-02T09:06:14.217Z","endDate":"2016-05-02T09:06:14.217Z","transactions":[{"value":777.02}],"opCo":"067","customerId":"804732"}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="349bf083-c399-4826-8a3c-18762da07d4a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":777.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8499bc1a-5fad-412c-a615-61e346cdbaca" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC060_Rev_UpdateRevenue" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="e0488f80-178b-49ec-ae23-8f5df4bbd2c2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="9d939444-cd06-4aed-b858-f743ee7ca1c7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="304e5faa-24ef-48cf-94e8-5930199b99e9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12852a4c-0a44-4a5e-aeb0-e73fc9c69666" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UpdateRevenue" id="9e6065b6-a7d3-4de0-b40e-8489cdaa22e3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues/{revenueId}" methodName="UpdateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateRevenue" id="ebf8225e-8a6b-492b-9a76-bfae98b6281d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="375ef88e-833d-4091-9bc8-cbb9f90a92c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputRevId = context.expand('${DataFile#revenueId}');

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId+ "    Input Request::"+ inputRevId);            

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert inputRevId == resRevId : "Response Revenue Id is not maching with the input Revenue Id";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="revenueId" value="${DataFile#revenueId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6037a1c4-23e7-4227-98cd-3a78bc7b89f3"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";
def restStep3 = "UpdateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def revenueId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueId",revenueId);	

	//Execute GetRevenueById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="2f824322-f124-489f-b1c3-c982fdc12cfa"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>revenueId</con:name><con:value>f52756b1-c1d1-4e6d-9b54-582b63c669f4</con:value></con:property><con:property><con:name>revenueOutput</con:name><con:value>{"id":"6d0e2a85-bbab-4ec7-be52-70d0727cc2fa","startDate":"2016-04-26T09:06:14.217Z","endDate":"2016-04-26T09:06:14.217Z","transactions":[{"value":777.02}],"opCo":"067","customerId":"804732"}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="abf5e462-ce58-47af-bb95-6965d8001cee"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="68e35eaf-0b1c-40d6-bb23-6ab8bd445f87" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC061_Rev_UpdateRevenue_RevIdError" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="1876b08e-9df9-4a5c-90da-d7ad14c70d73"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2f0dfe55-ced1-427c-94d9-0042773102b6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="1ce8c289-6114-40ac-9ad1-72349b13dcaa" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="0b5fe2c2-d3b6-4a68-93b5-aaffa0e2a0a2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UpdateRevenue" id="d51c9b1e-88e0-4271-9c68-9b6b2896a02c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues/{revenueId}" methodName="UpdateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateRevenue" id="ebf8225e-8a6b-492b-9a76-bfae98b6281d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:assertion type="Simple Contains" id="433eb22c-69fc-460a-bd39-7090cfe5528d" name="Contains"><con:configuration><token>Revenue with id ${DataFile#revenueId} does not exist</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="revenueId" value="${DataFile#revenueId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="c62e9f7a-02f1-4578-b560-fdbce5666516"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";
def restStep3 = "UpdateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def revenueId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueId","12345678900987654321");	

	//Execute GetRevenueById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="bfd186e4-4670-4a43-b989-880ec1fbcca3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>revenueId</con:name><con:value>12345678900987654321</con:value></con:property><con:property><con:name>revenueOutput</con:name><con:value>{"id":"6d0e2a85-bbab-4ec7-be52-70d0727cc2fa","startDate":"2016-04-26T09:06:14.217Z","endDate":"2016-04-26T09:06:14.217Z","transactions":[{"value":777.02}],"opCo":"067","customerId":"804732"}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="36f3b76c-6036-437a-a6b9-3f88ca94b018"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="579d5c54-2545-465f-855d-e58ff0ed6722" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC065_GetAllFoodCosts_SyscoProduct" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="b05760e2-d384-48d3-a7ff-582de833ec99"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request_1" id="b112c3de-92bf-40e2-a4f3-1aa6534f6af1"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://qa-uom-services-postgres.crkqmj3qk07x.us-east-1.rds.amazonaws.com:5432/uom?user=uomadmin&amp;password=uomadmin</con:connectionString><con:query>DELETE FROM inventory WHERE value ->> 'customerId' = '${Data#cust1}';
DELETE FROM "group" WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "${Data#cust1}"}';
DELETE FROM revenue where value ->> 'customerId' = '${Data#cust1}';
DELETE FROM purchase where value ->> 'customerId' = '${Data#cust1}';</con:query><con:assertion type="JDBC Status" id="944a48cc-9ba9-4e69-9a81-fc058ae6e3a0" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2abda374-05b9-469d-98f6-a18295b6bc53" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="9781076e-ed7d-4c41-9b1f-11ab9c66f5a2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="6b7881fc-ed00-4a6a-8e4a-d15c0f738d56" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3a9eb522-24df-40cd-8f0a-68b8a1c8867a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="41ada9e8-1edd-4bfe-a2b4-793d56f9c051" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4df38801-727f-4c86-b3c1-6f3c0fe3992f" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="633c2f63-6ecb-4bea-b08c-a2673a574608" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="4355e475-310e-43ad-a21f-e7b6b574527a"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "CloseInventory"
def restStep3 = "GetInventoryById"
def restStep4 = "SetDate"
def restStep5 = "Create_Revenue";
def restStep6 = "CloseInventory_1"
def restStep7 = "GetAllFoodCostsForARangeAndOffset";
def restStep8 = "Create_Purchase";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";
def propertyName12 = "addnlGroup";


int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();
	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	
     //preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);
	

	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);

//	//Execute CloseInventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def CloseInventoryId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("CloseInventoryId",CloseInventoryId);
	def closeInventoryDate = jsonRestStep2Response.id;

	//Execute GetInventoryById Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute SetDate Step	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);
	
	//Execute Create_Purchase Step	
	def restStep8Result = testRunner.runTestStepByName(restStep8);			
	restStepStatus =restStep8Result.getStatus().toString();
	log.info(restStep8+": Status::"+restStepStatus); 
	restTestStepList.add(restStep8);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Revenue Step	
	def restStep5Result = testRunner.runTestStepByName(restStep5);			
	restStepStatus =restStep5Result.getStatus().toString();
	log.info(restStep5+": Status::"+restStepStatus); 
	restTestStepList.add(restStep5);
	restStepsStatusList.add(restStepStatus);

	//Execute CloseInventory_1 Step	
	def restStep6Result = testRunner.runTestStepByName(restStep6);			
	restStepStatus =restStep6Result.getStatus().toString();
	log.info(restStep6+": Status::"+restStepStatus); 
	restTestStepList.add(restStep6);
	restStepsStatusList.add(restStepStatus);

	//Execute GetAllFoodCostsForARangeAndOffset Step	
	def restStep7Result = testRunner.runTestStepByName(restStep7);			
	restStepStatus =restStep7Result.getStatus().toString();
	log.info(restStep7+": Status::"+restStepStatus); 
	restTestStepList.add(restStep7);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,true);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="c9cc88bf-0504-499e-a07a-da44b64a5301" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4f41aa72-1063-40ad-9f6f-8a12b1f0498e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory" id="59275a2e-8635-4e17-896e-9d66d17e19e5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="24c4a511-6e79-4261-82d5-f2dc95303af6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="5986dd36-77d3-4fef-b5ea-edeb808987b6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="6a84dbff-f18b-4c10-9fc1-9d3a8bb5c7b1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/71fdc86e-12ac-4b0b-966c-289f97562742</con:originalUri><con:assertion type="Simple Contains" id="650d2fe2-92a0-463c-833f-355782682ce5" name="Contains"><con:configuration><token>closedDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="336a87b5-ebf0-4c66-9031-a1a9cd1c2491" name="Contains 1"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ce50776b-3d21-42a2-829a-af26dc725073" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetDate" id="ab58573d-fc86-427a-a65c-dd3c9b1c77e0" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper ;
def restStep12Response = testRunner.testCase.testSteps["GetInventoryById"].testRequest.response.contentAsString;
def jsonRestStep12Response = new JsonSlurper().parseText(restStep12Response);	
def timeStampStr = jsonRestStep12Response.closedDate;

def propertyStepName = "DataFile";
def timeTillSeconds = timeStampStr.substring(0, 20 );
int microSeconds = timeStampStr.substring(20, 23 ).toInteger();
def timeZone =  timeStampStr.substring(23, 24 );
log.info("Old Date with Time ::"+timeStampStr);

def newPurchaseDateWithTime = timeTillSeconds+(microSeconds+2)+timeZone;
log.info("newPurchaseDateWithTime::"+newPurchaseDateWithTime);
def newRevenueStartDateWithTime = timeTillSeconds+(microSeconds+4)+timeZone;
log.info("newRevenueStartDateWithTime::"+newRevenueStartDateWithTime);
def newRevenueEndDateWithTime = timeTillSeconds+(microSeconds+6)+timeZone;
log.info("newRevenueEndDateWithTime::"+newRevenueEndDateWithTime);

testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseDate",newPurchaseDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueStartDate",newRevenueStartDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueEndDate",newRevenueEndDateWithTime);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="4fa4feef-fdd7-4d5a-be3b-0875c0ce63a3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="23b7bf05-75ca-4158-b781-ae7b4cd54b56" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = requestJson.supplier;
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Revenue" id="824f4215-1dd7-40f4-87db-78a43d489e90" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Revenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="b54e6855-a50a-41cc-91b6-694ccf86f4d9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory_1" id="b8559028-86d6-468e-91b2-40383f18b31a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory_1" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b6a4e2fb-1aa3-4811-ba91-455a1615b306" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#CloseInventoryId}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#CloseInventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllFoodCostsForARangeAndOffset" id="0f60ce9c-b6ea-4071-988c-e3e279ff217e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/foodCosts" methodName="GetAllFoodCostsForARangeAndOffset-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllFoodCostsForARangeAndOffset" id="a0ba8283-4c65-4e48-ae37-729a099f5d62" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/foodCosts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="1c77754d-ae49-4c22-8e78-da165bb1003d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resPeriodstart = json.foodCosts.periodStart;
def resPeriodEnd = json.foodCosts.periodEnd;
def resbeginningInventoryValue = json.foodCosts.foodCostTotals.beginningInventoryValue;
def resTotalPurchases = json.foodCosts.foodCostTotals.totalPurchases;
def resCostOfGoodsForSale = json.foodCosts.foodCostTotals.costOfGoodsForSale;
def resCostOfGoodsSold = json.foodCosts.foodCostTotals.costOfGoodsSold;
def resEndingInventoryValue = json.foodCosts.foodCostTotals.endingInventoryValue;
def resTotalFoodSales = json.foodCosts.foodCostTotals.totalFoodSales;
def resFoodCostPercentage = json.foodCosts.foodCostTotals.foodCostPercentage;
def resgroupId = json.foodCosts.foodCostsByCategory.groupId;
def resbeginningInventoryValue_1 = json.foodCosts.foodCostsByCategory.beginningInventoryValue;
def resTotalPurchases_1 = json.foodCosts.foodCostsByCategory.totalPurchases;
def resCostOfGoodsForSale_1 = json.foodCosts.foodCostsByCategory.costOfGoodsForSale;
def resCostOfGoodsSold_1 = json.foodCosts.foodCostsByCategory.costOfGoodsSold;
def resEndingInventoryValue_1 = json.foodCosts.foodCostsByCategory.endingInventoryValue;


log.info("Periodstart::"+ resPeriodstart);
log.info("PeriodEnd::"+ resPeriodEnd);
log.info("BeginningInventoryValue::"+ resbeginningInventoryValue);
log.info("TotalPurchases::"+ resTotalPurchases);
log.info("CostOfGoodsForSale::"+ resCostOfGoodsForSale);
log.info("CostOfGoodsSold::"+ resCostOfGoodsSold);
log.info("EndingInventoryValue::"+ resEndingInventoryValue);
log.info("FoodCostPercentage::"+ resFoodCostPercentage);
log.info("GroupId::"+ resgroupId);
log.info("BeginningInventoryValue_1::"+ resbeginningInventoryValue_1);
log.info("TotalPurchases_1::"+ resTotalPurchases_1);
log.info("CostOfGoodsForSale_1::"+ resCostOfGoodsForSale_1);
log.info("CostOfGoodsSold_1::"+ resCostOfGoodsSold_1);
log.info("EndingInventoryValue_1::"+ resEndingInventoryValue_1);

assert resPeriodstart != null : "Period Start is null";
assert resPeriodEnd != null : "PeriodEnd is null";
assert resbeginningInventoryValue != null : "BeginningInventoryValue is null";
assert resTotalPurchases != null : "Period Start is null";
assert resCostOfGoodsForSale != null : "Period Start is null";
assert resCostOfGoodsSold != null : "Period Start is null";
assert resEndingInventoryValue != null : "Period Start is null";
assert resFoodCostPercentage != null : "Period Start is null";
assert resgroupId != null : "Period Start is null";
assert resbeginningInventoryValue_1 != null : "BeginningInventoryValue_1 is null";
assert resCostOfGoodsForSale_1 != null : "resCostOfGoodsForSale_1 is null";
assert resTotalPurchases_1 != null : "TotalPurchases_1 is null";
assert resCostOfGoodsSold_1 != null : "CostOfGoodsSold_11 is null";
assert resEndingInventoryValue_1 != null : "EndingInventoryValue_1 is null";
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="906d8025-c6c9-4adc-bd77-91bfb34d6275" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);
def beginningInventoryValue = jsonRestStepResponse.foodCosts.foodCostTotals.beginningInventoryValue;
def totalPurchases = jsonRestStepResponse.foodCosts.foodCostTotals.totalPurchases;
def endingInventoryValue = jsonRestStepResponse.foodCosts.foodCostTotals.endingInventoryValue;
def totalFoodSales = jsonRestStepResponse.foodCosts.foodCostTotals.totalFoodSales;

def costOfGoodsSold = jsonRestStepResponse.foodCosts.foodCostTotals.costOfGoodsSold
def foodCostPercentage = jsonRestStepResponse.foodCosts.foodCostTotals.foodCostPercentage

double COGS = beginningInventoryValue[0].toInteger() + totalPurchases[0].toInteger() - endingInventoryValue[0].toInteger() ;
double FCPercentage = (COGS/totalFoodSales[0].toDouble()).round(2);
log.info("COGS::"+COGS);
log.info("FCPercentage::"+FCPercentage);

assert costOfGoodsSold[0].toDouble() ==  COGS : "Cost of goods sold is not calculated as per the formula";
assert foodCostPercentage[0].toDouble() ==  FCPercentage : "Food Cost Percentage is not calculated as per the formula";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="b23800f2-0307-4bc9-874e-bec2f18d04e6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>024596</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>c84f59a4-701f-49d1-955c-077b741714e9</con:value></con:property><con:property><con:name>itemId</con:name><con:value>1282169</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f99457db-d76a-4f03-a3ad-12f7e49469ef</con:value></con:property><con:property><con:name>supplierId</con:name><con:value/></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"sysco",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 111,
  "items": [
    {
       "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 122
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":2200.02}
  ]
}</con:value></con:property><con:property><con:name>CloseInventoryId</con:name><con:value>c984797a-6e8d-41a2-befd-efcfdc934f99</con:value></con:property><con:property><con:name>purchaseDate</con:name><con:value>2016-05-31T10:21:49.26Z</con:value></con:property><con:property><con:name>revenueStartDate</con:name><con:value>2016-05-31T10:21:49.28Z</con:value></con:property><con:property><con:name>revenueEndDate</con:name><con:value>2016-05-31T10:21:49.30Z</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>3a303fe9-3496-4f6c-95ec-299b440f3ea9</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="63de7818-8fb8-41d0-9e95-b21707ba001b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>024596</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>1282169</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "Chicken",
  "type": "expenseCategory",
  "storage": "Freezer",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value/></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"sysco",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 111,
  "items": [
    {
       "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 122
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":2200.02}
  ]
}</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="948fccf9-8719-43cc-8953-26af794296cc" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC062_Rev_UpdateRevenue_ValueError" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="3d0db8c0-013a-418c-842f-7808a7ac01d7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="1c199415-65a4-4e9e-ad0e-72e7f501e3f1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="5b3125e2-b26e-415f-a0af-df60fa7c29c1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="cc17a15a-58df-44ca-b1ad-d56fbded086f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UpdateRevenue" id="6836b305-b137-4a73-a835-dff2ff7c2449" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues/{revenueId}" methodName="UpdateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateRevenue" id="ebf8225e-8a6b-492b-9a76-bfae98b6281d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:assertion type="Simple Contains" id="433eb22c-69fc-460a-bd39-7090cfe5528d" name="Contains"><con:configuration><token>value failed: each transaction must have a value</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="revenueId" value="${DataFile#revenueId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a2e3cf96-30ae-4de1-a499-984a9fc2484d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";
def restStep3 = "UpdateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def revenueId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueId",revenueId);	

	//Execute GetRevenueById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="c28743a6-26f6-4140-a481-1b40403bb171"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {}
  ]
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>revenueId</con:name><con:value>ca111204-c8b6-4484-b086-405b042ed9c5</con:value></con:property><con:property><con:name>revenueOutput</con:name><con:value>{"id":"6d0e2a85-bbab-4ec7-be52-70d0727cc2fa","startDate":"2016-04-26T09:06:14.217Z","endDate":"2016-04-26T09:06:14.217Z","transactions":[{"value":777.02}],"opCo":"067","customerId":"804732"}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="f575cb8f-671c-4f8e-bff2-a7fb37591e3d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {}
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="68f4a85d-6ad7-4627-9efd-0e6a412aa441" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC063_Rev_UpdateRevenue_StDateError" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="0948e090-8dd2-4af2-8d1d-f8b8779a7ef6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="921bf955-72ad-4892-aa60-0034a8dd1208" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="bd0b13cf-315d-4b4c-942d-3928120c9af0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5ac739ee-6506-4163-9451-1b7731ab52ab" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UpdateRevenue" id="58e7a849-2001-49b2-aa9b-33c6ea58ffec" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues/{revenueId}" methodName="UpdateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateRevenue" id="ebf8225e-8a6b-492b-9a76-bfae98b6281d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:assertion type="Simple Contains" id="433eb22c-69fc-460a-bd39-7090cfe5528d" name="Contains"><con:configuration><token>value failed: start date is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="revenueId" value="${DataFile#revenueId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="4d85052c-3dfa-41e6-8f32-f3a9bf231099"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";
def restStep3 = "UpdateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def revenueId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueId",revenueId);	

	//Execute GetRevenueById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="c2a49248-700e-4f58-a8b8-3652339ae604"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>revenueId</con:name><con:value>c49f72ed-f435-4b4d-91cb-bc4e3c2cd6d9</con:value></con:property><con:property><con:name>revenueOutput</con:name><con:value>{"id":"6d0e2a85-bbab-4ec7-be52-70d0727cc2fa","startDate":"2016-04-26T09:06:14.217Z","endDate":"2016-04-26T09:06:14.217Z","transactions":[{"value":777.02}],"opCo":"067","customerId":"804732"}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="e6ef9b68-76e6-4640-98db-8a5775c459c1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "endDate": "2016-05-02T23:59:59.217Z",
  "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="87152e35-5925-43a7-95bc-811b9a5a8b8f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC064_Rev_UpdateRevenue_EnDateError" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="acf65255-5802-4ae2-8fc0-ef441f4a55eb"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);


def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f0265a5b-9858-4798-a0ca-b30bfa3561ec" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="41d26e04-a722-40a1-9a78-143c79f84223" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateRevenue" id="12c480f7-94e8-450f-ac0f-6c7155645530" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateRevenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="afbab1b6-960a-4831-b6bb-868074789634" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UpdateRevenue" id="49a80cda-fb33-4694-84d3-84026150895e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues/{revenueId}" methodName="UpdateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateRevenue" id="ebf8225e-8a6b-492b-9a76-bfae98b6281d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues/</con:originalUri><con:assertion type="Simple Contains" id="433eb22c-69fc-460a-bd39-7090cfe5528d" name="Contains"><con:configuration><token>value failed: end date is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="revenueId" value="${DataFile#revenueId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>revenueId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="41a6939b-d904-4986-a79f-6b13204c4fcc"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport


//Actual Test Steps to be executed
def restStep1 = "Create_Account";
def restStep2 = "CreateRevenue";
def restStep3 = "UpdateRevenue";


//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
        
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	
	//Execute Create_Account Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute CreateRevenue Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def revenueId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueId",revenueId);	

	//Execute GetRevenueById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="367739df-842e-44e3-8d52-a56274ad6693"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
   "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property><con:property><con:name>groupId0</con:name><con:value/></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>revenueId</con:name><con:value>39e474ef-ba94-4c9c-b684-b8f9d7b36e54</con:value></con:property><con:property><con:name>revenueOutput</con:name><con:value>{"id":"6d0e2a85-bbab-4ec7-be52-70d0727cc2fa","startDate":"2016-04-26T09:06:14.217Z","endDate":"2016-04-26T09:06:14.217Z","transactions":[{"value":777.02}],"opCo":"067","customerId":"804732"}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="aa81e0af-ee8c-448b-b855-1b68b030923b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "startDate": "2016-05-02T09:06:14.217Z",
  "endDate": "2016-05-02T09:06:14.217Z",
  "transactions": [
    {"value":400.02}
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "2016-05-02T00:0:01.217Z",
   "transactions": [
    {"value":111.02}
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c5b6a291-147d-4603-a45c-9cdc924b9a48" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC048_Create_Purchase" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="c913f333-fcc2-405c-9595-bb7d338db92a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="8f7342b8-6765-45eb-a9e4-575769b9733c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="6fa89941-620d-477d-9957-5a15017c625d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4847b2e7-580e-45a8-9d7a-5da0483cb186" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="bd86f2d9-c7f7-4000-a4af-f9d137d6c904" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7fc140db-cf42-4639-be01-0181e555f0aa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="b099fe80-5df5-44f4-99c5-72128e5e86cb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="35d8870d-3d2f-4f6c-a851-b243bc5edb2d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="1c68f405-4c35-491e-8c69-25e43109813a"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
//def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
//def tStep = tCase.testSteps["JDBC Request"];
//tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="bab24841-ea9f-4a0e-be88-9acc39c67ab7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef5d27b-40a0-47eb-91ec-cc25f498d38d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="10d1c547-ddf1-46af-9148-de6578c6a3e9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="894bc9b8-b2a0-4bad-885c-13ac0e745e81" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="fecba151-155f-416f-9a76-3983c238a0da"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>a499eabc-0d4f-46aa-a96c-63f5525e03ff</con:value></con:property><con:property><con:name>itemId</con:name><con:value>6855e9d5-aa82-4d0a-921a-99ae6253c5ad</con:value></con:property><con:property><con:name>groupId</con:name><con:value>8816f16a-80b8-447c-a758-f179f3dcc249</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>c27b186d-c840-4d4d-9563-ad53788b4225</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="939c4edc-ac44-4dbd-b86a-7dfc4d82c2c1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ee578a38-25e6-45b4-a27a-bde424cd25e1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC049_GetAllPurchases" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="69d2733f-2e08-47c4-9503-c193267e9783"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="78c9e99e-358f-467a-8efe-dae4cae5ec61" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="ad7ce90e-8c23-4e80-b581-06af3ae4fa66"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Get_All_Purchases";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);


	def dateArray = propData11.split("&amp;&amp;");
	log.info("dateArray:::::"+dateArray);
     testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("fromDate"+i,dateArray[0]);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("toDate"+i,dateArray[1]);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);
	
	//End of Execute Pre Steps

	// Execute Get_All_Purchases Step
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_All_Purchases" id="8af9eba8-488f-4040-944e-17741c22573b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="GetAllPurchases-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_All_Purchases" id="b97b1184-0ab7-4125-9b20-ff092ff7acea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="Simple Contains" id="dbc0927e-6776-4492-83e4-44b53d35c178" name="Contains"><con:configuration><token>purchases</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ba38b22b-9b83-4332-9dc5-1ed3c810a4c6" name="Contains 1"><con:configuration><token>suppliers</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358aad10-9eca-4d6e-a396-0654c08f1ab6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputCustId = context.expand('${DataFile#cust}');
def inputOpco = context.expand('${DataFile#opco}');

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

int supplierSize = json.suppliers.size();
log.info("No Of Suppliers::"+ supplierSize);
for(int i=0;i &lt; supplierSize;i++)
{
	def resSupplierId = json.suppliers[i].id;
	def resSupplierName = json.suppliers[i].name;
	def resSupplierConInfo = json.suppliers[i].contactInformation;
	def resOpco = json.suppliers[i].associatedAccount.opCo;
	def resCustId = json.suppliers[i].associatedAccount.customerId;
	def resNotes = json.suppliers[i].notes;	
	
	log.info("Service Response:Supplier Id::" + resSupplierId);
	log.info("Service Response:Opco::" + resOpco);
	log.info("Service Response:Customer Id::" + resCustId);
	log.info("Service Response:Supplier Name::" + resSupplierName);
	log.info("Service Response:Contact Info::" + resSupplierConInfo);
	log.info("Service Response:Notes::" + resNotes);
	
	log.info("Input Request:Customer Id::" + inputCustId);
	log.info("Input Request:Opco::" + inputOpco);
	log.info("Is Supplier deleted:::"+json.suppliers[i].deleted);
	
	assert resSupplierId != null : " Supplier Id is null";
	assert resSupplierName != null : "Supplier Name is null";
	assert resSupplierConInfo != null : "Supplier Contact Information is null";
	assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
	assert resNotes == resNotes : "Response Notes is not matching with the input request Notes";
	
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bce37b03-7ecd-4318-92ff-bde4ae221cda" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;
import java.util.Date;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def inputStartDate = context.expand('${DataFile#fromDate1}');
def inputEndDate = context.expand('${DataFile#toDate1}');

Date inStDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", inputStartDate );
Date inEnDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", inputEndDate );

int purchaseSize = json.purchases.size();
log.info("No Of Purchases::"+ purchaseSize);

for(int i=0;i &lt; purchaseSize;i++)
{	
	def resOpco = json.purchases[i].opCo;
	def resCustId = json.purchases[i].customerId;
	def resPurchaseId = json.purchases[i].id;
	def resSupplierId = json.purchases[i].supplier;
	def resDate = json.purchases[i].date;
	def resInvoiceNumber = json.purchases[i].invoiceNumber;
	def resInvoiceTotal = json.purchases[i].invoiceTotal;
	
	int itemSize = json.purchases[i].items.size();
	log.info("ITEM SIZE::"+itemSize);
	
	def inputOpco = context.expand('${DataFile#opco}');
	def inputCustId = context.expand('${DataFile#cust}');
	
	Date responseDate = Date.parse( "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", resDate );
     
     boolean isResponseDateValid = responseDate.after(inStDate) &amp;&amp; responseDate.before(inEnDate);
	
	log.info("isResponseDateValid::"+ isResponseDateValid);	
	log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
	log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
	log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId);
	log.info("DATE::"+"Service Reponse::"+ resDate);
	log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber);
	log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal);
	log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );
	
	for(int j = 0 ; j &lt; itemSize ; j++){   
		def resItem = json.purchases[i].items[j];	
		log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem);       
		assert resItem != null : "Response Item details is not matching with the input request Item details";                
	}
	
	assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
	assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
	assert resSupplierId != null  : "Response SupplierId is not matching with the input request SupplierId"; 
	assert resDate != null  : "Response Purchase Date is not matching with the input request Purchase Date"; 
	assert resInvoiceNumber != null  : "Response Invoice Number is not matching with the input request Invoice Number"; 
	assert resInvoiceTotal != null  : "Response Invoice Total is not matching with the input request Invoice Total"; 
	assert resPurchaseId != null : "Purchase Id is null";
	assert json.purchases[i].deleted == false : "Purchase is deleted";

}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fromDate" value="${DataFile#fromDate1}"/>
  <con:entry key="withSupplierDefinitions" value="true"/>
  <con:entry key="toDate" value="${DataFile#toDate1}"/>
</con:parameters><con:parameterOrder><con:entry>withSupplierDefinitions</con:entry><con:entry>fromDate</con:entry><con:entry>toDate</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="88d92dc3-caf1-4dd7-8d90-3647bcde0c0d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>fromDate1</con:name><con:value>2016-04-30T09:06:14.217Z</con:value></con:property><con:property><con:name>toDate1</con:name><con:value>2016-05-07T04:44:17.531Z</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="857ee848-1145-4c42-a7c6-24f4e16c6c89"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>2016-04-30T09:06:14.217Z&amp;&amp;2016-05-07T04:44:17.531Z</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="25fee6ad-af03-41a3-8c34-d50df76ce947" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC050_Categorize_Sysco_Purchases" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="294d4b2c-33a0-4e9e-8f91-43ea37a58ed8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="bbe6f88d-775d-4832-99b5-15275e1aafb7" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="10f0e72c-ed5e-400b-9ebd-99113a57e76a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="534cea14-032f-4415-b313-51d2b00a83a5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="3783cf54-604a-4af5-846a-b5b3dfdf80d2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ce3dcbf0-6826-481d-8c96-a10eb4da64d5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="eb4a51ad-c45e-46fc-8478-1fb7365110d8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="197e2e09-7520-4db9-bf37-bf4638703fda" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="86f206f1-d63d-46b9-9da6-db9d83b60257"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "Categorize_Sysco_Purchases"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);


	//Execute Categorize_Sysco_PurchasesStep	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="d2801753-e801-4dd8-ae6e-93a9b8e23b72" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4811d85-084a-4561-8c5a-acc4d60e8eb1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="ecb557f0-6d9c-4b56-98ac-61402db2a977" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fa1008c3-acb4-44bf-a255-cba7a907a0ce" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Categorize_Sysco_Purchases" id="0a66e286-c5f9-4ece-9c71-8f1e960a5e16" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/categorize" methodName="CategorizeSyscoPurchases-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Categorize_Sysco_Purchases" id="4ef84e2e-bf7a-4b54-b81e-7beff5d1a31a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/categorize</con:originalUri><con:assertion type="Simple Contains" id="5f8c7184-7764-47e7-926c-418b4df9091e" name="Contains"><con:configuration><token>Categorization started</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="b44eebfd-f108-4dc7-93dc-1173d8b22a2d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>0659193d-ae30-4194-b5a4-2820b3864473</con:value></con:property><con:property><con:name>itemId</con:name><con:value>79a56127-f025-4b90-ac7f-960ff3c5c18b</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f56f5788-3976-49ed-ac62-5f6ec95867a9</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>5aec221a-317f-42dd-b71c-1693469a70ea</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="d8e507af-0d88-4c40-8abb-c7149da73dd8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f125ac34-efab-4f0d-b98f-33def98d93c7" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC051_Update_Purchase" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="799d5325-f6ef-40c3-a5ed-5c6a15c5ec01"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="1a79138a-ebff-4a10-a916-7c8299c15819" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="0c12bd82-df39-4dc4-9bda-31cfa5080779" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4a84fb9-1e7a-4739-a1dd-f2fccf995e42" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="e964cfe8-f2dc-43fe-b362-5c0eebb5a124" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="96666c1b-d3f4-498d-ae82-13a67f2e6ad8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="7379911c-e2b4-411e-ae24-5587c5503176" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51182fa8-613e-4bb4-8a04-fd7ea145f8b0" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="50dd7ec3-bdd9-4737-99a7-7e8e05d8479c"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "Update_Purchase"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def purchaseId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseId",purchaseId);


	//Execute Update_Purchase Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="c698ae68-e704-4834-a577-30302e96aef2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ad935a49-0a15-4989-85e9-fbd5ffe567ad" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="33a9dea1-60b7-4feb-bef2-0ee7fec08acd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e313631d-9859-43f1-a53f-65041316794c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Purchase" id="baaa0932-36dc-45ec-9714-6b1226c50079" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/{id}" methodName="UpdateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Purchase" id="46a487d9-ce4d-4cdc-89fd-a92adeeb56ee" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3baf2afe-353d-4894-9a00-f0c7b41a0e2c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;
def inputPurchaseId = context.expand('${DataFile#purchaseId}');

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId + "    Input Request::"+ inputPurchaseId);

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId == inputPurchaseId : "Response Purchase Id  is not matching with the input request Purchase Id "; 
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#purchaseId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="edb50eab-7255-46df-ab5d-6378a4c2461c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>4a86c332-0bb8-46cb-b16e-8fd06c649386</con:value></con:property><con:property><con:name>itemId</con:name><con:value>a9f4b9a3-8c25-47d6-a750-4d26cafbb4a2</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f8848086-3585-4566-98a8-5722033ecfb7</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>13597b72-ed92-45e8-b0bb-30da59272bbe</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "963",
  "invoiceTotal": 0,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId": "${DataFile#groupId}",
      "currentExtendedPrice":500
    }
  ]
}</con:value></con:property><con:property><con:name>purchaseId</con:name><con:value>f14565a8-fc24-4768-bf2c-bddd2aca29df</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="70564335-a9b9-480c-88c1-14d932266752"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "963",
  "invoiceTotal": 0,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId": "${DataFile#groupId}",
      "currentExtendedPrice":500
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bf0bff04-ee3c-4173-a398-8b5ade3ebe20" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC052_Delete_Purchase" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="6ec821c4-c122-4c20-aac8-12bcee25c054"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="3e7c0cd9-c3bf-4aba-9da3-b5d634c09d68" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="816aa183-68cb-4783-bead-873f1b619351" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="750980f2-a404-4bad-8ca7-1b3c672e7365" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="e926913f-6bd2-46cf-9676-6e909498e8ff" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="749a225d-c7be-43e9-b719-c9f0b3222242" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="fe20ec9e-320f-4034-897f-7428b77e7439" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="eae7addb-a912-4055-bc46-f638e1759d7c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="d0e31107-99c1-4fd5-b76a-76ba7708cce2"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "Delete_Purchase"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def purchaseId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseId",purchaseId);


	//Execute Delete_Purchase Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="6490ab31-5873-4f54-8eff-14624f055a32" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0a293f8b-e707-4e74-af03-0de88c901805" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="5244eda2-27e0-4908-b691-eb255d55671f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78056cc3-05a9-4eeb-ac9a-7884925c0127" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Purchase" id="3720d31e-2c7a-43fc-9902-5d15c64884c4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/{id}" methodName="DeletePurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Purchase" id="f49e6c12-4973-4508-ae6e-f1e318afdc27" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:assertion type="Simple Contains" id="649c3e94-3cbe-406e-9472-84e974d26d47" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="92435e68-b480-4a00-b0ee-77311e9f8496" name="Contains 1"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b82d9aae-ee7d-4e56-92bb-1ed4342cdf35" name="Contains 2"><con:configuration><token>invoiceNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d2db0fd8-2e0d-4c1f-8e3b-9ccf6c85bc9a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def inputPurchaseId = context.expand('${DataFile#purchaseId}');
def inputCustId = context.expand('${DataFile#cust}');
def inputOpco = context.expand('${DataFile#opco}');

def resPurchaseId = json.id;
def resSupplier = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;
def resItems_id = json.items.id;
def resgroupId = json.items.groupId;
def resCurrentExtendedPrice = json.items.currentExtendedPrice;
def resDeleted = json.deleted;
def resSyscoPurchase = json.syscoPurchase;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("Purchase ID::"+"Service Reponse::"+ resPurchaseId + "    Input Request::"+ inputPurchaseId);
log.info("Service Response:Group Name::" + resSupplier);
log.info("Service Response:Group Type::" + resDate);
log.info("Service Response:Group Name::" + resInvoiceNumber);
log.info("Service Response:Group Type::" + resInvoiceTotal);
log.info("Service Response:Group Type::" + resItems_id);
log.info("Service Response:Group Name::" + resgroupId);
log.info("Service Response:Group Type::" + resCurrentExtendedPrice)
log.info("Service Response:Group Type::" + resDeleted);
log.info("Service Response:Group Name::" + resSyscoPurchase);

assert inputPurchaseId == resPurchaseId : "Response Item Id is not maching with the input request Item Id";
assert resSupplier != null : "Supplier is null";
assert resDate != null : "Date is null";
assert resInvoiceNumber != null : "Invoice number is null";
assert resInvoiceTotal != null : "Invoice total is null";
assert resItems_id != null : "item id is null";
assert resgroupId != null : "Group id is null";
assert resCurrentExtendedPrice != null : "Current Extended Price is null";
assert resDeleted != null : "Deleted is null";
assert resSyscoPurchase != null : "Sysco Purchase is null";
assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#purchaseId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="d7f5fede-d538-44ba-b495-1e344fe94e6d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>151b2e05-50f1-45a1-bca4-6f6165a00ba9</con:value></con:property><con:property><con:name>itemId</con:name><con:value>6ad309a0-ea4d-407d-8d12-71706ecfe070</con:value></con:property><con:property><con:name>groupId</con:name><con:value>9e50fa61-e15a-41ae-8490-6922d6260e46</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>726f1479-3ffd-4fc2-aac6-c4c8717927a0</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>purchaseId</con:name><con:value>9e92b141-fae1-47cc-8875-eda7e33878aa</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="0ba3291b-8ae8-4d51-90d1-85cdf0ab03ff"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="11899072-b8af-49fd-b27c-ca706c5cee55" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC054_Update_Purchase_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="6108f691-5539-4579-b87b-7d77c9d440e4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="f1728e70-690a-4d03-9f75-e5454b752819" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="a470bc80-d347-4cca-86b3-20118da80d8d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dd024c0a-ccd0-40eb-9b80-0eb1746138bc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="49aa6fdc-ebb2-4725-bd85-130bb648a0e6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8ebec7c9-8615-49b8-951f-c6dc07792cd8" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="b6eebb0f-1984-45ac-abe9-379c51ddc897" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db057a1d-4eb2-4a33-8701-260cf2114fa9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="27558b27-0f6b-4191-8c7a-b059aa5c258f"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "Update_Purchase"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def purchaseId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseId",purchaseId);


	//Execute Update_Purchase Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="574d7ebf-8867-4dbd-a20c-34033f0b85d0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="31d5ca2b-d118-4f74-86d0-cb25a0c857b2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="789e2f37-f44f-4461-8bd3-2d93369d48ae" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e4bcfaa3-57f4-4ca1-94b7-a37660ef2b16" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Purchase" id="ee120cfd-49ab-4f61-b706-2eecd0fd1e78" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/{id}" methodName="UpdateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Purchase" id="46a487d9-ce4d-4cdc-89fd-a92adeeb56ee" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:assertion type="Simple Contains" id="17415a29-3e6f-4c7e-8ba9-1ae603bd53a2" name="Contains"><con:configuration><token>"Invalid UUID string: 123456"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="123456" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="38a5ff96-f472-49b0-a7f1-28f946002d02"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>03b0f170-3303-4c45-8c76-7dcde6755fa2</con:value></con:property><con:property><con:name>itemId</con:name><con:value>6b77166a-e2e2-4444-9d90-698244ae89b4</con:value></con:property><con:property><con:name>groupId</con:name><con:value>7b1128bd-4f9c-49bd-9189-e34671924afb</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>02b65c51-9fa2-4f1f-8f00-81facb3c58b3</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "963",
  "invoiceTotal": 0,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId": "${DataFile#groupId}",
      "currentExtendedPrice":500
    }
  ]
}</con:value></con:property><con:property><con:name>purchaseId</con:name><con:value>c57cf89c-9b68-403b-b839-56ea328bd235</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="e7635628-9a66-43ee-a984-ef0c7eea48bf"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "963",
  "invoiceTotal": 0,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId": "${DataFile#groupId}",
      "currentExtendedPrice":500
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3b383882-b7f1-4b31-be84-18810e794ca0" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC053_GetPurInventorychaseById" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="6139b50a-b1e8-4a24-bfe4-4c97a798ae95"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="2f40e0e5-c191-43fa-b6bc-887cf8b4dfc8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="bddaa73e-23ce-4be8-9ef9-63c325ec65e0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="637efdc9-d59f-411e-8a30-36a3432b6e90" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="d55d442e-e24f-4de1-963c-a45e831c1ec3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="39c0eec2-5ca6-4c59-bf8d-70bc8d168582" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="45f67bbf-a71c-4406-9458-4eb3222e8479" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="854b7665-ee3a-45b6-b2d1-304746ca927c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="67a21846-7d87-471c-84bc-5ffd7155c1e3"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "GetPurinventorychaseById";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def purchaseId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseId",purchaseId);
	

	//Execute GetPurinventorychaseById Step

	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="ab31582e-86e4-471c-a923-bbbb07b76db8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="08782ffa-0680-4f7a-a083-0135924d93f7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="58b324f5-37de-4541-899e-ec788bb30508" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="69f5a091-6b6a-4c79-9780-8d20654b5736" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetPurinventorychaseById" id="ba4b5fb6-bab7-4255-bb22-374c62f7b9f2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/{purchaseId}" methodName="GetPurinventorychaseById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetPurinventorychaseById" id="c8c13625-b9cf-4417-b406-c4d9ea773d87" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:assertion type="GroovyScriptAssertion" id="940da050-a7d9-42a6-afc6-95c967d437e5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;
def resfoodPurchasesTotal = json.purchasesValue.foodPurchasesTotal;

def inputPurchaseId = context.expand('${DataFile#purchaseId}');
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}')

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;

log.info("OPCO::"+"Service Reponse::"+ resOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId );
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );
log.info("Food Purchases Total :"+"Service Reponse::"+ resfoodPurchasesTotal );

assert  resOpco == inputOpco: "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId != null : "Purchase Id is null";
assert resDate != null : "Date is null";
assert resInvoiceNumber != null : "Invoice number is null";
assert resInvoiceTotal != null : "Invoice number is null";
assert resPurchaseId != null : "Invoice number is null";
assert resfoodPurchasesTotal != null : "Invoice number is null";
assert resPurchaseId == inputPurchaseId : "Response Purchase Id  is not matching with the input request Purchase Id "; 
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="purchaseId" value="${DataFile#purchaseId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>purchaseId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="6b2f1715-7d79-4596-9a9c-5054bd584486"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>d6553555-5d42-4787-a52d-d36fff9448a8</con:value></con:property><con:property><con:name>itemId</con:name><con:value>ebc1bc6c-30d7-44e8-9a2a-f54701e7d959</con:value></con:property><con:property><con:name>groupId</con:name><con:value>ef86392a-dd12-4d74-a6a0-d6b4d21dedd3</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>c76c1fe9-40f7-4368-b23f-9a49720f4644</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>purchaseId</con:name><con:value>93c04af8-a91c-4e42-bbb5-cb6c23767b82</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="bd971290-c0a8-4208-ae13-ba6685f8dff9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7341e07e-5171-4905-af4c-08bcab652ae4" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC055_Delete_Purchase" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="36c2d6a2-37c7-4df7-bc9e-58a869fc0b7b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="9dd6bfca-6196-4ec2-a715-580d37c37e94" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="542de206-1399-4ae6-99e6-054fd3698258" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5c0dfb5d-953a-484c-b16e-663e918c8ef2" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8d30bfca-a81b-4ef5-837b-69762b4a1bf3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="29ba051a-ecad-409b-9c6f-4748e8ea196c" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="ac0434c2-2f70-4319-a759-d8ccc6eeff8b" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="90072015-9567-4a16-85cf-6d6100d586d7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="521c34ec-ac3b-4386-b127-c942e4c291ef" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="56d0caa5-5a1b-465b-901c-7f7c7332f2b3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="a142af79-6a4f-48cc-9210-93d85c7d8151"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "Delete_Purchase"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def purchaseId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseId",purchaseId);


	//Execute Delete_Purchase Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="4a62af0b-7dc0-45f3-a06d-6b7eb2815562" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54404191-4502-479c-b595-106ac33aa3f9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="3f42eded-d748-4756-9ba2-a03effbb0148" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="2e79219c-4ff7-46e8-8f48-1f8754e90735" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Purchase" id="14ed0396-af7d-4cf0-a507-cf82d76f5f81" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/{id}" methodName="DeletePurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Purchase" id="f49e6c12-4973-4508-ae6e-f1e318afdc27" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:assertion type="Simple Contains" id="f98362b3-5ff7-4474-8205-f33a82c77586" name="Contains"><con:configuration><token>"Invalid UUID string: 12346"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="12346" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="c76dbb21-d0fb-438b-a862-c3b2a82a8a93"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>53ebbe11-1664-4837-95a3-248111bcb90f</con:value></con:property><con:property><con:name>itemId</con:name><con:value>49556ec7-51b1-4508-ba8d-d03ecabc96ca</con:value></con:property><con:property><con:name>groupId</con:name><con:value>44c48731-5e37-4117-af4a-395a1f2bfd1f</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>9ba2d668-aa6d-4f3d-b815-b23576189b93</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>purchaseId</con:name><con:value>4391a516-9c5f-48d4-9bc2-382885f31239</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="378a79a9-dd21-4f6a-af95-a20a2945ab9a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ee597ad2-1e4a-477f-8939-6a1833148802" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC056_GetPurInventorychaseById_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="7fe160c9-ca50-4e03-b7a2-54799359fa09"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="13335f8d-6ace-4925-a50a-d826f73350a1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="a044cbab-fa51-4bb2-a9db-94373b0bb9d4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4083d5b9-b9c8-49ce-8557-a3bd9b637880" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0186be0e-f2c8-4d01-99fd-178c3f62f4c3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="4670d412-4aac-4651-b61f-828c6eb904b1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="a00e84e1-754d-4452-a7d4-32edfde99b5b" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="39d8c7fa-1ac0-48c5-a3df-f8a1ff7ca5c6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="446a0708-fefa-4165-a6ef-05acc15030b0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="8d01dcf0-58f3-4c22-a041-37d933c2194e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="42222ee0-7461-4b2a-94ef-c8fe31b2acb9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="495f3b8e-975c-4b8f-841b-3e22f1144baf"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "GetPurinventorychaseById";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def purchaseId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseId",purchaseId);
	

	//Execute GetPurinventorychaseById Step

	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="c5aa4a57-64e3-4a01-8e6e-d0a1588c14a1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="60edb60d-34be-471f-86de-03812a15363d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="412c0f25-c2ea-480b-b4c5-6c2d70985e7f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="02460657-7f95-4c33-b7f2-7b80e0767e6e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetPurinventorychaseById" id="3b444742-23ce-4bf0-9b11-3c86b297d2bc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/{purchaseId}" methodName="GetPurinventorychaseById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetPurinventorychaseById" id="c8c13625-b9cf-4417-b406-c4d9ea773d87" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:assertion type="Simple Contains" id="75749d9b-b24a-48bf-96ba-32d38178537b" name="Contains"><con:configuration><token>"Invalid UUID string: 123456"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="purchaseId" value="123456" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>purchaseId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="a8f01dbc-eb02-4384-bb0d-ea6d500d6f66"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>9011976b-fe99-4dda-add8-fe3c5e39e544</con:value></con:property><con:property><con:name>itemId</con:name><con:value>4ab42518-7b3e-4844-80d4-1ea0bfe1c3fb</con:value></con:property><con:property><con:name>groupId</con:name><con:value>66852fa6-c7e7-4ca6-a599-a182f7d17c25</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>24e7082f-1135-48d3-a82a-e67ee3db87ff</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>purchaseId</con:name><con:value>32d7c332-fa0a-4814-8e7b-949009f4076a</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="fff92ab4-e9fa-421f-9a9b-5a430dc95416"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="606f35c1-a881-4175-9885-9a2742dad01d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC057_Create_Purchase_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="ffb7eaca-8d22-4688-b847-2c8d0407c096"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="544bc305-fa06-4e43-bf76-cd6e3eb69cf0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="c4c7cebe-cc49-4188-afc2-68c71695ce69" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="684cb908-1c4d-4ac8-b61e-80b292fabd6a" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9f562900-2c94-4a38-85f9-8faf28bf1bd0" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="69ce377b-f262-464a-83c9-5c1b25137499" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="14461470-51f1-4525-bc84-9caabf76ed8f" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f60b94ac-0eb0-4123-8b9f-b952dfcf679b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="8dbd5e5b-2e39-454a-b6e8-cb7dfbc941f0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="7b0ce8eb-1231-430c-a20e-3da094d3db92" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2950ae5c-b45a-4a42-8d2a-b648b449df94" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="07eaf74b-39f4-4ca1-86ac-30df284a484d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="2ce1e3f6-f686-4683-8090-5647d999a7fb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a0195817-2e5d-4157-aa5e-22cdae3d7060" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="beef895e-85f9-4447-b287-b12549d666eb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="Simple Contains" id="a8651d13-794e-4389-a0b6-be7382885852" name="Contains"><con:configuration><token>supplier must be 'sysco' or a UUID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="9c5af861-73c7-4dc8-993a-210468c424d8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>6b7c5605-b077-4a1f-937c-9f320d70e021</con:value></con:property><con:property><con:name>itemId</con:name><con:value>0c83303d-2c01-42a9-85dc-50c13ea81a52</con:value></con:property><con:property><con:name>groupId</con:name><con:value>9939f08a-b415-4c37-a952-11687524bac6</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>dbb76e2d-a338-4fd4-b6fd-e001498c4e48</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"123456",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="ec5174d1-1300-47a0-8074-a2ebd7a7e9f8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"123456",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0577a485-52d1-4591-ace1-9b09c5834d6d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC058_Create_Purchase_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="c2e9b83d-dcff-416a-acef-0045e7addf95"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="4e2f5fb5-7bfc-4e29-b301-8f9144272638" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="aa940bde-35e8-4aa3-9f48-6bae3d908b3f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="3397b0b1-0eaf-4a54-8395-48e2b1ef83e7" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e3425638-69f8-4922-86fc-9d72949b504b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="e2b23064-66a0-46a2-95da-58bcce902886" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="e08b7c21-daae-4c3c-a09a-9474ab0012c4" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="778f531e-0d19-4d74-8236-e5a25924ee53" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="c220f06f-a68d-4a3c-b4ba-ec3899072964" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b483002b-1c57-43b7-9194-1d95b307b98e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4e03e8c9-8162-486a-a3d0-4b3fce9d3e3c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="01b51138-7b0c-46af-84f5-3176775b1854"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="94386b6a-c138-4437-886c-e7fff216fa7b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6eb94490-ff46-4671-b3b9-fc9a04258d33" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="aa61296c-e6a3-4dab-9cb6-f908a8500d51" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="Simple Contains" id="a8651d13-794e-4389-a0b6-be7382885852" name="Contains"><con:configuration><token>groupId must be a UUID</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="40e358e6-3542-47af-b017-5d9bdfb26e83"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>a96f9303-d309-40e1-91de-aa928d2bef0c</con:value></con:property><con:property><con:name>itemId</con:name><con:value>de30f46a-1d22-48aa-8896-462bc7c0093c</con:value></con:property><con:property><con:name>groupId</con:name><con:value>5b1f9510-1c1b-4346-98fc-3098164704c2</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>1a3499cb-b3db-46dd-9c63-955b421ce366</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"123456",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="7c97eff9-3eef-499c-8b68-b94b21cc26c4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"123456",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1cb61dca-1ec1-4aff-92ab-a4c14ea5a9d1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC059_GetAllFoodCosts_NonSyscoProduct" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="96dde885-d294-4479-b3ac-364581b69fe0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="ca5230ee-4a49-49b3-b993-36de7ee4e13d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="b9381959-238c-4c67-bac6-620750e5e26a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d63910e6-24d2-4ed7-8237-dd8a341065f2" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="65011500-3c17-42cf-9106-17e2d91e4a1c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="547e44b2-5062-429a-976c-4b52b45ee80f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d63910e6-24d2-4ed7-8237-dd8a341065f2" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="65011500-3c17-42cf-9106-17e2d91e4a1c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="b3d9ff9d-a463-4030-a4d7-12ff59122859" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="736b70a6-8c07-4e05-94cb-79cb1c04427b" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d15cb392-9f42-40ce-8dce-329c4a500083" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="93a18fc0-acb6-42e9-affe-d5204ac196ba" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="d6e907e8-b535-49e6-b209-6aa965afcf86" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6c3b92ce-896c-43f5-9502-f98108ac4629" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="73006901-32f4-4b14-8e56-57e0cde954eb"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "CloseInventory"
def restStep3 = "GetInventoryById"
def restStep4 = "SetDate"
def restStep5 = "Create_Purchase";
def restStep6 = "Create_Revenue";
def restStep7 = "CloseInventory_1"
def restStep8 = "GetAllFoodCostsForARangeAndOffset";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";
def propertyName12 = "addnlGroup";


int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);
	
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();
	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	 //preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);
	

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);

//	//Execute CloseInventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def CloseInventoryId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("CloseInventoryId",CloseInventoryId);
	def closeInventoryDate = jsonRestStep2Response.id;

	//Execute GetInventoryById Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute SetDate Step	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);
	
	//Execute Create_Purchase Step	
	def restStep5Result = testRunner.runTestStepByName(restStep5);			
	restStepStatus =restStep5Result.getStatus().toString();
	log.info(restStep5+": Status::"+restStepStatus); 
	restTestStepList.add(restStep5);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Revenue Step	
	def restStep6Result = testRunner.runTestStepByName(restStep6);			
	restStepStatus =restStep6Result.getStatus().toString();
	log.info(restStep6+": Status::"+restStepStatus); 
	restTestStepList.add(restStep6);
	restStepsStatusList.add(restStepStatus);

	//Execute CloseInventory_1 Step	
	def restStep7Result = testRunner.runTestStepByName(restStep7);			
	restStepStatus =restStep7Result.getStatus().toString();
	log.info(restStep7+": Status::"+restStepStatus); 
	restTestStepList.add(restStep7);
	restStepsStatusList.add(restStepStatus);

	//Execute GetAllFoodCostsForARangeAndOffset Step	
	def restStep8Result = testRunner.runTestStepByName(restStep8);			
	restStepStatus =restStep8Result.getStatus().toString();
	log.info(restStep8+": Status::"+restStepStatus); 
	restTestStepList.add(restStep8);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="6f22face-2078-4fc4-97c4-2eabe6c1d4d4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="211b0f8b-0fd2-4823-86e5-cd84d3d995f6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory" id="a2cead7c-027b-422d-834b-567bb377efa8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc870d77-9035-431a-89cf-bbe00acaf416" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="d85f22d3-ede0-4a2f-b395-e18b9719f0a5" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="6a84dbff-f18b-4c10-9fc1-9d3a8bb5c7b1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/71fdc86e-12ac-4b0b-966c-289f97562742</con:originalUri><con:assertion type="Simple Contains" id="3db0f40e-44d3-4e94-a974-f385fb9b2abc" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54469c3b-da36-41c7-8001-0c5aee5e294e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetDate" id="c4717cf6-fa7c-4e84-9356-4522b1bfd96a" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper ;
def restStep12Response = testRunner.testCase.testSteps["GetInventoryById"].testRequest.response.contentAsString;
def jsonRestStep12Response = new JsonSlurper().parseText(restStep12Response);	
def timeStampStr = jsonRestStep12Response.closedDate;

def propertyStepName = "DataFile";
def timeTillSeconds = timeStampStr.substring(0, 20 );
int microSeconds = timeStampStr.substring(20, 23 ).toInteger();
def timeZone =  timeStampStr.substring(23, 24 );
log.info("Old Date with Time ::"+timeStampStr);

def newPurchaseDateWithTime = timeTillSeconds+(microSeconds+2)+timeZone;
log.info("newPurchaseDateWithTime::"+newPurchaseDateWithTime);
def newRevenueStartDateWithTime = timeTillSeconds+(microSeconds+4)+timeZone;
log.info("newRevenueStartDateWithTime::"+newRevenueStartDateWithTime);
def newRevenueEndDateWithTime = timeTillSeconds+(microSeconds+6)+timeZone;
log.info("newRevenueEndDateWithTime::"+newRevenueEndDateWithTime);

testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseDate",newPurchaseDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueStartDate",newRevenueStartDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueEndDate",newRevenueEndDateWithTime);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="46a43f4f-10a4-4d2d-8a0e-01b7137effce" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="ebff6946-cd79-4433-80e3-3dfbafc46dff" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Revenue" id="4386813e-efec-4403-b3d6-27a1924827a3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Revenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d59ac48c-c1c7-46a7-9854-6e82b1e62090" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "The Revenue Id is null";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory_1" id="06f50f20-a3de-4d87-831b-f79025578195" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory_1" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4971dcf-af10-4e70-95a2-b3e048994dfe" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#CloseInventoryId}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#CloseInventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllFoodCostsForARangeAndOffset" id="4b06b0c2-9925-450e-9fc7-bf8dc01a1bea" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/foodCosts" methodName="GetAllFoodCostsForARangeAndOffset-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllFoodCostsForARangeAndOffset" id="a0ba8283-4c65-4e48-ae37-729a099f5d62" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/foodCosts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4f70799a-6b86-45bd-b2c9-d776243b9f37" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resPeriodstart = json.foodCosts.periodStart;
def resPeriodEnd = json.foodCosts.periodEnd;
def resbeginningInventoryValue = json.foodCosts.foodCostTotals.beginningInventoryValue;
def resTotalPurchases = json.foodCosts.foodCostTotals.totalPurchases;
def resCostOfGoodsForSale = json.foodCosts.foodCostTotals.costOfGoodsForSale;
def resCostOfGoodsSold = json.foodCosts.foodCostTotals.costOfGoodsSold;
def resEndingInventoryValue = json.foodCosts.foodCostTotals.endingInventoryValue;
def resTotalFoodSales = json.foodCosts.foodCostTotals.totalFoodSales;
def resFoodCostPercentage = json.foodCosts.foodCostTotals.foodCostPercentage;
def resgroupId = json.foodCosts.foodCostsByCategory.groupId;
def resbeginningInventoryValue_1 = json.foodCosts.foodCostsByCategory.beginningInventoryValue;
def resTotalPurchases_1 = json.foodCosts.foodCostsByCategory.totalPurchases;
def resCostOfGoodsForSale_1 = json.foodCosts.foodCostsByCategory.costOfGoodsForSale;
def resCostOfGoodsSold_1 = json.foodCosts.foodCostsByCategory.costOfGoodsSold;
def resEndingInventoryValue_1 = json.foodCosts.foodCostsByCategory.endingInventoryValue;


log.info("Periodstart::"+ resPeriodstart);
log.info("PeriodEnd::"+ resPeriodEnd);
log.info("BeginningInventoryValue::"+ resbeginningInventoryValue);
log.info("TotalPurchases::"+ resTotalPurchases);
log.info("CostOfGoodsForSale::"+ resCostOfGoodsForSale);
log.info("CostOfGoodsSold::"+ resCostOfGoodsSold);
log.info("EndingInventoryValue::"+ resEndingInventoryValue);
log.info("FoodCostPercentage::"+ resFoodCostPercentage);
log.info("GroupId::"+ resgroupId);
log.info("BeginningInventoryValue_1::"+ resbeginningInventoryValue_1);
log.info("TotalPurchases_1::"+ resTotalPurchases_1);
log.info("CostOfGoodsForSale_1::"+ resCostOfGoodsForSale_1);
log.info("CostOfGoodsSold_1::"+ resCostOfGoodsSold_1);
log.info("EndingInventoryValue_1::"+ resEndingInventoryValue_1);

assert resPeriodstart != null : "Period Start is null";
assert resPeriodEnd != null : "PeriodEnd is null";
assert resbeginningInventoryValue != null : "BeginningInventoryValue is null";
assert resTotalPurchases != null : "Period Start is null";
assert resCostOfGoodsForSale != null : "Period Start is null";
assert resCostOfGoodsSold != null : "Period Start is null";
assert resEndingInventoryValue != null : "Period Start is null";
assert resFoodCostPercentage != null : "Period Start is null";
assert resgroupId != null : "Period Start is null";
assert resbeginningInventoryValue_1 != null : "BeginningInventoryValue_1 is null";
assert resCostOfGoodsForSale_1 != null : "resCostOfGoodsForSale_1 is null";
assert resTotalPurchases_1 != null : "TotalPurchases_1 is null";
assert resCostOfGoodsSold_1 != null : "CostOfGoodsSold_11 is null";
assert resEndingInventoryValue_1 != null : "EndingInventoryValue_1 is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="db0dfb19-70be-4d04-8ab2-21219f95b98b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>7344ab13-1670-421f-b3ee-98b9cdf4d3e1</con:value></con:property><con:property><con:name>itemId</con:name><con:value>92381e78-adcb-4878-b083-274023019e51</con:value></con:property><con:property><con:name>groupId</con:name><con:value>fc03bb7d-9ecf-4802-8432-1904ca590fb9</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>c88986c4-38d1-494c-9321-20921f0fcf16</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":400.02}, 
{"value":790.12} 

  ]
}</con:value></con:property><con:property><con:name>CloseInventoryId</con:name><con:value>4631f410-aac2-41d4-a034-fa0c9a327132</con:value></con:property><con:property><con:name>purchaseDate</con:name><con:value>2016-05-31T10:25:05.447Z</con:value></con:property><con:property><con:name>revenueStartDate</con:name><con:value>2016-05-31T10:25:05.449Z</con:value></con:property><con:property><con:name>revenueEndDate</con:name><con:value>2016-05-31T10:25:05.451Z</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>e6f064dc-423e-484a-9057-c0db8242755b</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="661eff86-33b1-4b3a-a2f7-e22c0aff0488"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":400.02}, 
{"value":790.12} 

  ]
}</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2ce87a44-3bc0-424f-817b-4575f9d9d27e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC066_Update_Purchase_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="04a63ab1-af1b-4082-8c5c-cae079c4e470"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="ab75e877-8a65-48aa-8444-51f4d7a60b84" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="1813070d-2db0-4100-98ef-9f1ec0be65bb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="a685173b-1c05-4170-9e58-a5b96e0ae1d5" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="21c53416-9e42-45f6-80cc-3e3fc5057b55" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="ef402863-daf8-44d8-b533-f5ba868ac79f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f430403f-27ff-4808-9794-cd6697d3c8a2" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="012b0207-3af3-45bd-8511-2b4cf8ff050d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="c95cacc0-63f0-47b1-b739-218ec5888c6a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="901dffa5-8530-48be-8649-db685a067943" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4b4f785e-75bc-4f46-b2c1-dc6e59c65630" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="0f4e47e2-ae2f-4864-bb64-01b0d72b47b1"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "Update_Purchase"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();

	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def purchaseId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseId",purchaseId);


	//Execute Update_Purchase Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="7509137d-df0f-406b-b21d-031853e86513" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="421e40ae-44f4-41a4-b6a2-c14880cc82fa" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e4bcfaa3-57f4-4ca1-94b7-a37660ef2b16" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update_Purchase" id="7a8cf51f-dac7-4d0c-bc99-6594ab46e5b2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases/{id}" methodName="UpdateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update_Purchase" id="46a487d9-ce4d-4cdc-89fd-a92adeeb56ee" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases/</con:originalUri><con:assertion type="Simple Contains" id="17415a29-3e6f-4c7e-8ba9-1ae603bd53a2" name="Contains"><con:configuration><token>groupId must be a UUID"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${DataFile#purchaseId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="7b027f8c-5a78-4f00-aad2-7d21c924c5fe"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>b9d21bdd-7883-4115-b788-55e2472ef2d0</con:value></con:property><con:property><con:name>itemId</con:name><con:value>bd0f6160-909b-4e14-a6cc-1e6bfffb7791</con:value></con:property><con:property><con:name>groupId</con:name><con:value>f3d88c30-55bf-45ce-bc03-d5ab68eb9765</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>17820148-17ef-4f88-bdb9-a7c0dcd0fec7</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "963",
  "invoiceTotal": 0,
  "items": [
    {
      "id": "123456",
      "groupId": "1234569",
      "currentExtendedPrice":500
    }
  ]
}</con:value></con:property><con:property><con:name>purchaseId</con:name><con:value>4440db2d-8209-4756-81ee-fe7295ed4279</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="7305b7ab-3440-4dac-9bcf-5e247d026188"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "963",
  "invoiceTotal": 0,
  "items": [
    {
      "id": "123456",
      "groupId": "1234569",
      "currentExtendedPrice":500
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9b3ded10-a3d9-4f8f-acaf-6dcccbfcf385" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC067_Create_Purchase_Err" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="d5f300b4-c3e7-444f-bd7a-b7fc2d2b2a54"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="1d4c9e34-d8b1-4c68-aee7-5838eaa16212" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="799e5e72-643b-4e05-a438-5c70e893b457" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4ff3081c-6c50-4920-8f47-b4320b6753e3" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="27dba85e-2ed4-4ce8-8997-dea2298e4825" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="737b5a8d-6049-42ed-b072-43103bdeb993" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="436279e4-6474-4c63-bae7-b516df0adcc0" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5d787ebc-43a0-4eb2-a968-cd94e6e91f15" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="e1a1ba74-60e0-4b7a-98c6-f80006e160c8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1eb792d8-46cf-4644-80e1-fdde5691e521" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c7c1b3a5-5f6b-454c-b366-c3005d7bda76" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="66e6daee-95d6-4372-b53d-26a5886b071d"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Create_Purchase";
def restStep3 = "Create_Purchase_1";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);	

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);
	
	//Execute Create_Purchase Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Purchase_1 Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);


	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="6d9f49b5-8e71-465e-af9d-558cb0c5fb5a" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="d12a64f1-37a7-4129-a26e-39d820691726" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="894bc9b8-b2a0-4bad-885c-13ac0e745e81" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase_1" id="6d54573e-9483-4065-a19c-8778439199f8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase_1" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="Simple Contains" id="145ad5fb-1f62-43d2-a69e-f38e8a76c454" name="Contains"><con:configuration><token>Duplicate purchases are not allowed</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="844ea82f-4c4f-4ede-ad17-dc08b33e469f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>957bea47-18cb-49b0-926c-00e3f7f7cccc</con:value></con:property><con:property><con:name>itemId</con:name><con:value>6b7502ca-fbd5-44b4-8e7a-b6cb3e818d0a</con:value></con:property><con:property><con:name>groupId</con:name><con:value>7dddf578-823c-4c8a-9f00-23a897eeea8d</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>49644ee3-7fdb-4a45-88af-b9ba634c6e91</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="88671797-159e-4fed-b188-1f99a67fa218"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "2016-05-02T04:44:17.531Z",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="55018de4-2f28-4705-b333-d34450901e46" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC068_FoodCostCalculation" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="6b682c6f-a379-4504-92f9-75384fb45eb3"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="8da9f849-de73-45f6-ae13-0a794daba756" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="3aab98f0-aa15-4ad6-815f-bcfe7652ce57" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="b4235a8d-0231-4b0c-bcfe-4ccbedb842d7" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4c1b29b1-fb10-4457-8faa-d88ff13cc1cf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="374ec662-7a4f-4fe1-87b5-7d459623db84" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4df38801-727f-4c86-b3c1-6f3c0fe3992f" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="633c2f63-6ecb-4bea-b08c-a2673a574608" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="62f9ef24-6227-49c7-a99c-21b82a188a0f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="162f2b92-e458-48c8-9451-8147bf3afd0a" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a8ad3393-8d59-4028-8e4f-ae8237440a70" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="352ac324-97b8-444f-8691-67b65685a376" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="f8096eae-20ad-44b7-9631-23ec8c5497e2" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="273c276c-32ab-44ec-a910-6500443e0c4d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="94065278-87aa-418d-89d7-9884ffde3c21"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "CloseInventory"
def restStep3 = "GetInventoryById"
def restStep4 = "SetDate"
def restStep5 = "Create_Purchase";
def restStep6 = "Create_Revenue";
def restStep7 = "CloseInventory_1"
def restStep8 = "GetAllFoodCostsForARangeAndOffset";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";
def propertyName12 = "addnlGroup";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();
	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

     //preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);
	
	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);

//	//Execute CloseInventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def CloseInventoryId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("CloseInventoryId",CloseInventoryId);
	def closeInventoryDate = jsonRestStep2Response.id;

	//Execute GetInventoryById Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute SetDate Step	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	//restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);
	
	//Execute Create_Purchase Step	
	def restStep5Result = testRunner.runTestStepByName(restStep5);			
	restStepStatus =restStep5Result.getStatus().toString();
	log.info(restStep5+": Status::"+restStepStatus); 
	restTestStepList.add(restStep5);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Revenue Step	
	def restStep6Result = testRunner.runTestStepByName(restStep6);			
	restStepStatus =restStep6Result.getStatus().toString();
	log.info(restStep6+": Status::"+restStepStatus); 
	restTestStepList.add(restStep6);
	restStepsStatusList.add(restStepStatus);

	//Execute CloseInventory_1 Step	
	def restStep7Result = testRunner.runTestStepByName(restStep7);			
	restStepStatus =restStep7Result.getStatus().toString();
	log.info(restStep7+": Status::"+restStepStatus); 
	restTestStepList.add(restStep7);
	restStepsStatusList.add(restStepStatus);

	//Execute GetAllFoodCostsForARangeAndOffset Step	
	def restStep8Result = testRunner.runTestStepByName(restStep8);			
	restStepStatus =restStep8Result.getStatus().toString();
	log.info(restStep8+": Status::"+restStepStatus); 
	restTestStepList.add(restStep8);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="7ec51884-e2ba-4a83-921f-0e47910f278f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6983fe47-9ffc-4946-b7f8-07bb802e93b9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory" id="de796d5c-6893-45f6-80be-8b43e8b41b04" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="389cd6d9-06f1-4432-bb88-057db4aef985" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="4af7d85d-a2ef-4b0f-a387-cebba3728537" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="6a84dbff-f18b-4c10-9fc1-9d3a8bb5c7b1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/71fdc86e-12ac-4b0b-966c-289f97562742</con:originalUri><con:assertion type="Simple Contains" id="3db0f40e-44d3-4e94-a974-f385fb9b2abc" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b8b1c7c3-0af7-4423-9e86-7e5ff2be1cc9" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetDate" id="4e15deb7-e1e3-4869-8720-1c98e52c2972" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper ;
def restStep12Response = testRunner.testCase.testSteps["GetInventoryById"].testRequest.response.contentAsString;
def jsonRestStep12Response = new JsonSlurper().parseText(restStep12Response);	
def timeStampStr = jsonRestStep12Response.closedDate;

def propertyStepName = "DataFile";
def timeTillSeconds = timeStampStr.substring(0, 20 );
int microSeconds = timeStampStr.substring(20, 23 ).toInteger();
def timeZone =  timeStampStr.substring(23, 24 );
log.info("Old Date with Time ::"+timeStampStr);

def newPurchaseDateWithTime = timeTillSeconds+(microSeconds+2)+timeZone;
log.info("newPurchaseDateWithTime::"+newPurchaseDateWithTime);
def newRevenueStartDateWithTime = timeTillSeconds+(microSeconds+4)+timeZone;
log.info("newRevenueStartDateWithTime::"+newRevenueStartDateWithTime);
def newRevenueEndDateWithTime = timeTillSeconds+(microSeconds+6)+timeZone;
log.info("newRevenueEndDateWithTime::"+newRevenueEndDateWithTime);

testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseDate",newPurchaseDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueStartDate",newRevenueStartDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueEndDate",newRevenueEndDateWithTime);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="a7afc1a3-a33e-49e5-a166-941cbabe26f8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="23b7bf05-75ca-4158-b781-ae7b4cd54b56" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Revenue" id="290177e9-c282-4b50-8bc9-0f39d0b15edb" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Revenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6578243d-99aa-42b6-93b2-2b5225b3c7fb" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
//def inputRevId = context.expand('${DataFile#revenueId}');

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
//log.info("REVENUE ID::"+"Service Response::"+ resRevId+ "    Input Request::"+ inputRevId);            

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
//assert inputRevId == resRevId : "Response Revenue Id is not maching with the input Revenue Id";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory_1" id="428bf80b-522f-411c-b3eb-a8907afdc323" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory_1" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="eff2b97c-7bbe-422c-af15-60dcfe08aa3c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#CloseInventoryId}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#CloseInventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllFoodCostsForARangeAndOffset" id="3fe72593-fb80-49c9-856d-a976e161b4e0" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/foodCosts" methodName="GetAllFoodCostsForARangeAndOffset-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllFoodCostsForARangeAndOffset" id="a0ba8283-4c65-4e48-ae37-729a099f5d62" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/foodCosts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6278da62-bae9-4f0b-bd28-d8b41c27cfee" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);
def beginningInventoryValue = jsonRestStepResponse.foodCosts.foodCostTotals.beginningInventoryValue;
def totalPurchases = jsonRestStepResponse.foodCosts.foodCostTotals.totalPurchases;
def endingInventoryValue = jsonRestStepResponse.foodCosts.foodCostTotals.endingInventoryValue;
def totalFoodSales = jsonRestStepResponse.foodCosts.foodCostTotals.totalFoodSales;

def costOfGoodsSold = jsonRestStepResponse.foodCosts.foodCostTotals.costOfGoodsSold
def foodCostPercentage = jsonRestStepResponse.foodCosts.foodCostTotals.foodCostPercentage

double COGS = beginningInventoryValue[0].toInteger() + totalPurchases[0].toInteger() - endingInventoryValue[0].toInteger() ;
double FCPercentage = (COGS/totalFoodSales[0].toDouble()).round(2);
log.info("COGS::"+COGS);
log.info("FCPercentage::"+FCPercentage);

assert costOfGoodsSold[0].toDouble() ==  COGS : "Cost of goods sold is not calculated as per the formula";
assert foodCostPercentage[0].toDouble() ==  FCPercentage : "Food Cost Percentage is not calculated as per the formula";

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b767f46a-5368-48ac-b103-115f667f8e8a" name="Script Assertion 1"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resPeriodstart = json.foodCosts.periodStart;
def resPeriodEnd = json.foodCosts.periodEnd;
def resbeginningInventoryValue = json.foodCosts.foodCostTotals.beginningInventoryValue;
def resTotalPurchases = json.foodCosts.foodCostTotals.totalPurchases;
def resCostOfGoodsForSale = json.foodCosts.foodCostTotals.costOfGoodsForSale;
def resCostOfGoodsSold = json.foodCosts.foodCostTotals.costOfGoodsSold;
def resEndingInventoryValue = json.foodCosts.foodCostTotals.endingInventoryValue;
def resTotalFoodSales = json.foodCosts.foodCostTotals.totalFoodSales;
def resFoodCostPercentage = json.foodCosts.foodCostTotals.foodCostPercentage;
def resgroupId = json.foodCosts.foodCostsByCategory.groupId;
def resbeginningInventoryValue_1 = json.foodCosts.foodCostsByCategory.beginningInventoryValue;
def resTotalPurchases_1 = json.foodCosts.foodCostsByCategory.totalPurchases;
def resCostOfGoodsForSale_1 = json.foodCosts.foodCostsByCategory.costOfGoodsForSale;
def resCostOfGoodsSold_1 = json.foodCosts.foodCostsByCategory.costOfGoodsSold;
def resEndingInventoryValue_1 = json.foodCosts.foodCostsByCategory.endingInventoryValue;


log.info("Periodstart::"+ resPeriodstart);
log.info("PeriodEnd::"+ resPeriodEnd);
log.info("BeginningInventoryValue::"+ resbeginningInventoryValue);
log.info("TotalPurchases::"+ resTotalPurchases);
log.info("CostOfGoodsForSale::"+ resCostOfGoodsForSale);
log.info("CostOfGoodsSold::"+ resCostOfGoodsSold);
log.info("EndingInventoryValue::"+ resEndingInventoryValue);
log.info("FoodCostPercentage::"+ resFoodCostPercentage);
log.info("GroupId::"+ resgroupId);
log.info("BeginningInventoryValue_1::"+ resbeginningInventoryValue_1);
log.info("TotalPurchases_1::"+ resTotalPurchases_1);
log.info("CostOfGoodsForSale_1::"+ resCostOfGoodsForSale_1);
log.info("CostOfGoodsSold_1::"+ resCostOfGoodsSold_1);
log.info("EndingInventoryValue_1::"+ resEndingInventoryValue_1);

assert resPeriodstart != null : "Period Start is null";
assert resPeriodEnd != null : "PeriodEnd is null";
assert resbeginningInventoryValue != null : "BeginningInventoryValue is null";
assert resTotalPurchases != null : "Period Start is null";
assert resCostOfGoodsForSale != null : "Period Start is null";
assert resCostOfGoodsSold != null : "Period Start is null";
assert resEndingInventoryValue != null : "Period Start is null";
assert resFoodCostPercentage != null : "Period Start is null";
assert resgroupId != null : "Period Start is null";
assert resbeginningInventoryValue_1 != null : "BeginningInventoryValue_1 is null";
assert resCostOfGoodsForSale_1 != null : "resCostOfGoodsForSale_1 is null";
assert resTotalPurchases_1 != null : "TotalPurchases_1 is null";
assert resCostOfGoodsSold_1 != null : "CostOfGoodsSold_11 is null";
assert resEndingInventoryValue_1 != null : "EndingInventoryValue_1 is null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="0e45c548-0e96-4776-a00f-22fcda269595"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>3093fc45-2fd4-44b2-9ac9-dd670f0e9cc7</con:value></con:property><con:property><con:name>itemId</con:name><con:value>884a68da-4d41-4bd6-8c1e-c0e6f781a45b</con:value></con:property><con:property><con:name>groupId</con:name><con:value>fc473bbc-9bd2-4c60-9a67-803eed045600</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>bf7e7db1-9ddc-4a2c-a840-1457fa1f72f2</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":555.55} 
  ]
}</con:value></con:property><con:property><con:name>CloseInventoryId</con:name><con:value>19849f21-6db2-4b7f-b82b-7ae37ca3acb2</con:value></con:property><con:property><con:name>purchaseDate</con:name><con:value>2016-05-31T10:25:49.633Z</con:value></con:property><con:property><con:name>revenueStartDate</con:name><con:value>2016-05-31T10:25:49.635Z</con:value></con:property><con:property><con:name>revenueEndDate</con:name><con:value>2016-05-31T10:25:49.637Z</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>efd33922-e7e9-4cf2-a6eb-7b6855eb5791</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="cf22543a-904d-4c04-91d8-cd8b0b7e2833"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
      "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":555.55} 
  ]
}</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8f25ca93-2d2e-4c51-b554-a4430dfe68b4" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC069_FoodCostCalculation_Error" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="74227c16-e7e5-4274-80f7-7b94b5a477b1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);

def propertyName12 = "addnlGroup"
int columnNumber12 = 12;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber12,propertyName12,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="ebfecf93-a7d9-47c3-9cf7-67a01a66d644" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c27bb32c-363e-49fc-bcd6-84bdbfc4da64" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="d337c7ca-a0e9-4434-ae96-0fc10a6f28f6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4df38801-727f-4c86-b3c1-6f3c0fe3992f" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="633c2f63-6ecb-4bea-b08c-a2673a574608" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_1" id="75e5ffaf-583d-4488-8ac6-2590c28dc9ce" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#addnlGroup}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4df38801-727f-4c86-b3c1-6f3c0fe3992f" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="633c2f63-6ecb-4bea-b08c-a2673a574608" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="52b26b23-0b52-456d-9d50-3b3e2059649f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="4d543843-7db2-4c5f-be8f-4b629c1cfb74" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="578fc657-aa0c-4e7c-a9a7-741480bf2667" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="26e3b14c-114c-4028-8a3f-6854600c5cd9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5b06077f-1f7b-470c-b247-bed037496949" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6f0596bd-d6e5-46a7-bac3-3e85350cc7e7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="4e35faf0-97c7-4437-9b66-a042e3ec66a9"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep2_1 = "Create_Group_1";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "CloseInventory"
def restStep3 = "GetInventoryById"
def restStep4 = "SetDate"
def restStep5 = "Create_Purchase";
def restStep6 = "Create_Revenue";
def restStep8 = "GetAllFoodCostsForARangeAndOffset";
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";
def propertyName12 = "addnlGroup";



int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);
	def propData12 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName12+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName12,propData12);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();
	
	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep2_1
	def preRestStep2Result_1 = testRunner.runTestStepByName(preRestStep2_1);			
	restStepStatus =preRestStep2Result_1.getStatus().toString();
	log.info(preRestStep2_1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2_1);
	restStepsStatusList.add(restStepStatus); 

	def preRestStep2_1Response = testRunner.testCase.testSteps[preRestStep2_1].testRequest.response.contentAsString;
	def jsonPreRestStep2_1Response = new JsonSlurper().parseText(preRestStep2_1Response);
	def groupId_1 = jsonPreRestStep2_1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId_1",groupId_1);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
	restStepStatus =preRestStep4Result.getStatus().toString();
	log.info(preRestStep4+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep4);
	restStepsStatusList.add(restStepStatus);

	def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
	def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
	def itemId = jsonPreRestStep4Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId",itemId);
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId",inventoryId);

//	//Execute CloseInventory Step	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	def restStep2Response = testRunner.testCase.testSteps[restStep2].testRequest.response.contentAsString;
	def jsonRestStep2Response = new JsonSlurper().parseText(restStep2Response);
	def CloseInventoryId = jsonRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("CloseInventoryId",CloseInventoryId);
	def closeInventoryDate = jsonRestStep2Response.id;

	//Execute GetInventoryById Step	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);

	//Execute SetDate Step	
	def restStep4Result = testRunner.runTestStepByName(restStep4);			
	restStepStatus =restStep4Result.getStatus().toString();
	log.info(restStep4+": Status::"+restStepStatus); 
	//restTestStepList.add(restStep4);
	restStepsStatusList.add(restStepStatus);
	
	//Execute Create_Purchase Step	
	def restStep5Result = testRunner.runTestStepByName(restStep5);			
	restStepStatus =restStep5Result.getStatus().toString();
	log.info(restStep5+": Status::"+restStepStatus); 
	restTestStepList.add(restStep5);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Revenue Step	
	def restStep6Result = testRunner.runTestStepByName(restStep6);			
	restStepStatus =restStep6Result.getStatus().toString();
	log.info(restStep6+": Status::"+restStepStatus); 
	restTestStepList.add(restStep6);
	restStepsStatusList.add(restStepStatus);

	//Execute GetAllFoodCostsForARangeAndOffset Step	
	def restStep8Result = testRunner.runTestStepByName(restStep8);			
	restStepStatus =restStep8Result.getStatus().toString();
	log.info(restStep8+": Status::"+restStepStatus); 
	restTestStepList.add(restStep8);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="2f35b5e3-bde3-4b3b-941d-0d959ad56c95" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories" methodName="CreateANewInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2d2246a2-4c21-4150-b818-145c6066b4d7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CloseInventory" id="1b57e74c-d2ea-4aa9-ba46-73ba8a1c445e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}/complete" methodName="CloseInventory-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CloseInventory" id="c217913e-c6cb-45dd-8b64-0c00fb04e0e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/235504ae-9c58-40eb-8a40-deabf0f39e18/complete</con:originalUri><con:assertion type="Simple Contains" id="8d34b070-66a8-485a-8218-cc59b27fd074" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d2929103-e7ef-4ae8-b724-d5a2bc95d7b2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resInvId = json.id;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputInvId = context.expand('${DataFile#inventoryId}');

log.info("INVENTORY ID::"+"Service Response::"+ resInvId + "    Input Request::"+ inputInvId);
log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputInvId != resInvId : "The newly created inventory id is matching with the closed inventory id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is open";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="ab7757d9-4c10-4e2c-9174-538803fec7e1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="6a84dbff-f18b-4c10-9fc1-9d3a8bb5c7b1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/inventories/71fdc86e-12ac-4b0b-966c-289f97562742</con:originalUri><con:assertion type="Simple Contains" id="3db0f40e-44d3-4e94-a974-f385fb9b2abc" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="aa54bda1-6d44-4dd8-bc71-f49d9b2a96b2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "closed" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetDate" id="7a7b0436-219f-46ff-843a-222bca2c52d9" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper ;
def restStep12Response = testRunner.testCase.testSteps["GetInventoryById"].testRequest.response.contentAsString;
def jsonRestStep12Response = new JsonSlurper().parseText(restStep12Response);	
def timeStampStr = jsonRestStep12Response.closedDate;

def propertyStepName = "DataFile";
def timeTillSeconds = timeStampStr.substring(0, 20 );
int microSeconds = timeStampStr.substring(20, 23 ).toInteger();
def timeZone =  timeStampStr.substring(23, 24 );
log.info("Old Date with Time ::"+timeStampStr);

def newPurchaseDateWithTime = timeTillSeconds+(microSeconds+2)+timeZone;
log.info("newPurchaseDateWithTime::"+newPurchaseDateWithTime);
def newRevenueStartDateWithTime = timeTillSeconds+(microSeconds+4)+timeZone;
log.info("newRevenueStartDateWithTime::"+newRevenueStartDateWithTime);
def newRevenueEndDateWithTime = timeTillSeconds+(microSeconds+6)+timeZone;
log.info("newRevenueEndDateWithTime::"+newRevenueEndDateWithTime);

testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("purchaseDate",newPurchaseDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueStartDate",newRevenueStartDateWithTime);
testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("revenueEndDate",newRevenueEndDateWithTime);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Purchase" id="cf71e07a-1c90-4b3f-8a70-ea2148356bb8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/purchases" methodName="CreateAPurchase-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Purchase" id="cd3c9f9b-ce8a-49ed-8a08-93a250bf9d00" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/purchases</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7506598e-8b8b-4d14-b6db-284b0b5d2c3a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resPurchaseId = json.id;
def resSupplierId = json.supplier;
def resDate = json.date;
def resInvoiceNumber = json.invoiceNumber;
def resInvoiceTotal = json.invoiceTotal;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputDate = requestJson.date;
def inputInvoiceNumber = requestJson.invoiceNumber;
def inputInvoiceTotal = requestJson.invoiceTotal;

log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("SUPPLIER ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("DATE::"+"Service Reponse::"+ resDate + "    Input Request::"+ inputDate);
log.info("INVOICE NUMBER::"+"Service Reponse::"+ resInvoiceNumber + "    Input Request::"+ inputInvoiceNumber);
log.info("INVOICE TOTAL::"+"Service Reponse::"+ resInvoiceTotal + "    Input Request::"+ inputInvoiceTotal);
log.info("PURCHASE ID::"+"Service Reponse::"+ resPurchaseId );

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItem = json.items[i];
                def inputItem = json.items[i];
                log.info("ITEM DETAILS::"+"Service Reponse::"+ resItem + "    Input Request::"+ inputItem);       
                assert inputItem == resItem : "Response Item details is not matching with the input request Item details";                
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resSupplierId == inputSupplierId : "Response SupplierId is not matching with the input request SupplierId"; 
assert resDate == inputDate : "Response Purchase Date is not matching with the input request Purchase Date"; 
assert resInvoiceNumber == inputInvoiceNumber : "Response Invoice Number is not matching with the input request Invoice Number"; 
assert resInvoiceTotal == inputInvoiceTotal : "Response Invoice Total is not matching with the input request Invoice Total"; 
assert resPurchaseId != null : "Purchase Id is null";
assert json.deleted == false : "Purchase is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Revenue" id="b354eb2a-8bd6-4559-84fb-8379131e254d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/revenues" methodName="CreateRevenue-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Revenue" id="a06bf72c-51fe-4fa6-b3e8-837b931abdd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}</con:request><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/revenues</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c2f9efa9-d062-4c5b-ba0d-29d752aca3ce" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resRevId = json.id;
def resStartDate = json.startDate;
def resEndDate = json.endDate;


def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputStartDate = requestJson.startDate;
def inputEndDate = requestJson.endDate;
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

int traxnValueSize = json.transactions.value.size();
log.info("TRANSACTION VALUE SIZE:::"+traxnValueSize);

for(int i = 0 ; i &lt; traxnValueSize; i++){
                double resTxnValue = json.transactions.value[i];
                double inputTxnValue = requestJson.transactions.value[i];
                log.info("TRANSACTION VALUE::"+"Service Response::"+ resTxnValue+ "    Input Request::"+ inputTxnValue);
                assert inputTxnValue == resTxnValue : "Input Transaction value is not matching with the Service response transaction value";
}

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("START DATE::"+"Service Response::"+ resStartDate+ "    Input Request::"+ inputStartDate);
log.info("END DATE::"+"Service Response::"+ resEndDate+ "    Input Request::"+ inputEndDate);
log.info("REVENUE ID::"+"Service Response::"+ resRevId);            

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert inputStartDate == resStartDate : "Response Start Date is not maching with the input Start Date";
assert inputEndDate == resEndDate : "Response End Date is not maching with the input End Date";
assert resRevId != null : "Response Revenue Id is null";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetAllFoodCostsForARangeAndOffset" id="dde63985-3e42-459b-b252-b08fa80acf99" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/foodCosts" methodName="GetAllFoodCostsForARangeAndOffset-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAllFoodCostsForARangeAndOffset" id="a0ba8283-4c65-4e48-ae37-729a099f5d62" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/foodCosts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6278da62-bae9-4f0b-bd28-d8b41c27cfee" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def restStepResponse = messageExchange.response.responseContent;
def jsonRestStepResponse = new JsonSlurper().parseText(restStepResponse);



def foodCosts = jsonRestStepResponse.foodCosts;
log.info("foodCosts:::::::::::::::"+foodCosts);

assert foodCosts ==  [] : "Food Cost details are present for the inventory";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="0c253a8d-8590-42bc-95bd-cae36abd7abb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>277188f6-588e-4347-828a-bc213a368144</con:value></con:property><con:property><con:name>itemId</con:name><con:value>c58311c1-378b-4a25-8c99-e555c83fa4b2</con:value></con:property><con:property><con:name>groupId</con:name><con:value>e2adf232-493f-4808-9ec6-053b4e1f482d</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>8ee2ae91-b4f3-4fb9-8ba6-67c81c705661</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
       "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":555.55} 
  ]
}</con:value></con:property><con:property><con:name>CloseInventoryId</con:name><con:value>e1ad567f-3afb-445e-9cb4-c7aff22de0dc</con:value></con:property><con:property><con:name>purchaseDate</con:name><con:value>2016-05-31T10:26:07.288Z</con:value></con:property><con:property><con:name>revenueStartDate</con:name><con:value>2016-05-31T10:26:07.290Z</con:value></con:property><con:property><con:name>revenueEndDate</con:name><con:value>2016-05-31T10:26:07.292Z</con:value></con:property><con:property><con:name>addnlGroup</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>groupId_1</con:name><con:value>cf6b21ca-a6af-4537-9766-600487c905f0</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="e9ced7ee-a5cf-4014-878c-e7e7af9c8f0c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId}",
      "price": 50,
      "priceUom": "cs",
      "groups": [
         {
          "groupId": "${DataFile#groupId}"
         },
        {
          "groupId": "${DataFile#groupId_1}",
          "sequence": 1,
          "quantity": 4,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    }
  ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "supplier":"${DataFile#supplierId}",
  "date": "${DataFile#purchaseDate}",
  "invoiceNumber": "123456",
  "invoiceTotal": 100,
  "items": [
    {
       "id": "${DataFile#itemId}",
      "groupId":"${DataFile#groupId}",
      "currentExtendedPrice": 120
    }
  ]
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "startDate": "${DataFile#revenueStartDate}",
  "endDate": "${DataFile#revenueEndDate}",
  "transactions": [
   {"value":555.55} 
  ]
}</con:value></con:property><con:property><con:name>addnlGroup1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Reports\\AllServcs_Report_DataSet1_201606080911.xls</con:value></con:property></con:properties></con:testSuite><con:testSuite id="1079513c-ad88-43b9-942e-dc060d898a2e" name="#491_UserStories" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ca4b110c-b66b-45b1-a723-32fd877b57f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Config" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SetConfigurations" id="a49cd6fd-304f-438a-8bdf-d3f5f8142a6c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel

def singleRun = context.expand( '${Data#singleRun1}' );
log.info("singleRun::::::::::::"+singleRun);
if(singleRun == ""){
	singleRun = "true";
}

if(singleRun == "false"){
	
	log.info("::::::MULTIPLE RUN::::::");
	def endPointValue = context.expand( '${Data#endPoint1}' );
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
} else {
	log.info("SINGLE RUN::::::");
	def sys = System.getProperty("user.home").replace("\\","\\\\");
	def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\EndPoint.xls";
	def sheetName = "Data";	
	
	//flush old data
	def fl_testCase = testRunner.testCase;
	def fl_testStep = fl_testCase.getTestStepByName("Data");
	try{
		fl_testCase.removeTestStep(fl_testStep);
	} catch(Exception e){}
	
	//end of flush old data	
	
	def testcaseName = context.testCase.name;
	def propertyName1 = "endPoint"
	int columnNumber1 = 1;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	
	
	def endPointValue = context.expand( '${Data#endPoint1}' );
	
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
	
	def propertyName2 = "dataSheetName"
	int columnNumber2 = 2;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);
	
	def propertyName3 = "tabName"
	int columnNumber3 = 3;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);
	
	def propertyName4 = "reportName"
	int columnNumber4 = 4;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

	testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("singleRun1","true");			
}

</script></con:config></con:testStep><con:testStep type="groovy" name="CreateReportFile" id="cf6fd9d9-e6ea-48d1-b77b-844446560cea"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["CreateReportFile"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def CreateReportFile = context.CreateReportFile
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def reportPath=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\Reports";
def reportName = testRunner.testCase.getTestStepByName("Data").getPropertyValue("reportName1");	

log.info(reportPath);
log.info(reportName);

CreateReportFile.CreateReport(reportPath, reportName);		
</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="aac67610-b371-42bb-8abb-5981078b7d56"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://qa-uom-services-postgres.crkqmj3qk07x.us-east-1.rds.amazonaws.com:5432/uom?user=uomadmin&amp;password=uomadmin</con:connectionString><con:query>DELETE FROM account where value ->> 'customerId' = '804732';
DELETE FROM inventory WHERE value ->> 'customerId' = '804732';
DELETE FROM supplier WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM nonsyscoproduct WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM "group" WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';</con:query><con:assertion type="JDBC Status" id="944a48cc-9ba9-4e69-9a81-fc058ae6e3a0" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="properties" name="Data" id="e2061431-5d4c-4b5c-b2f6-d36f6ad75aab"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>endPoint1</con:name><con:value>http://uom-qa.na.sysco.net</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>dataSheetName1</con:name><con:value>SyscoDataSet1.xls</con:value></con:property><con:property><con:name>tabName1</con:name><con:value>Data</con:value></con:property><con:property><con:name>reportName1</con:name><con:value>Inv_Report_DataSet1</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d4e1dba7-7b93-42bd-9ce0-a2ac01d1b4f1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC070_DeleteGrp_Loc" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="ca43bb89-a1e6-4da1-bdfb-c6d413543526"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="20f6c360-b9e3-4967-b8f1-66f67a8c6cd6" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="70e49d21-3ca5-426b-becc-e6c39384921f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="8f4a1092-6b65-48c2-a1d5-d24b020de2c1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="8d65e40e-55fa-4097-909e-a97ab7363404"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	//End of Execute Pre Steps

	//Execute Delete Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="5549ab48-ee81-493b-9be0-f750f2fd18b4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b69d3317-2a5e-410f-a341-e23c84b6a3bf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#groupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="5bda7dd0-7967-4b4b-acd7-7a2249888305"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>5d557b86-3a2f-4170-98de-a3eb31d06c8a</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="96679443-5e06-4b45-8566-4c445f787597"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "LocationGroup1",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ceabfee1-0ae0-4cd2-a4ed-41156e8be850" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC071_DeleteGrp_LocWithInvItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="fc1abb1e-02aa-45ff-a1a8-f0908f8d0a4f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;


//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="1ea15b8f-83f6-46b2-a57c-637402f69591" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5141d750-1694-43bd-803e-941930b4537d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="bb37f8c7-4189-440c-a18b-a90d20445b83" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="74dc43e9-b0a5-4098-803c-4bb681dd05c6" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="99f124e3-601f-4abf-ba69-16db4ddbde00" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Supplier" id="34acb779-f3e6-4f10-b2fd-07787b69a13f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/suppliers" methodName="CreateNewSupplier-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Supplier" id="b647a39c-ecd1-429c-926f-56b0ef8e31a3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#supplierId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/suppliers</con:originalUri><con:assertion type="Simple Contains" id="36d84d83-8764-419b-88fc-b47e4257dca9" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="5ba3fa94-7e0c-4f31-84f6-78dd3ee57427" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="541ab3d8-1969-48db-a304-a7250c1fb84f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputSupplierName = requestJson.name;
def inputSupplierConInfo = requestJson.contactInformation;
def inputOpco = context.expand('${DataFile#opco}');
def inputNotes = requestJson.notes;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resSupplierName = json.name;
def resSupplierConInfo = json.contactInformation;
def resOpco = json.associatedAccount.opCo;
def resNotes = json.notes;


log.info("Service Response:Supplier Name::" + resSupplierName);
log.info("Service Response:Contact Info::" + resSupplierConInfo);
log.info("Service Response:Opco::" + resOpco);
log.info("Service Response:Notes::" + resNotes);

log.info("Input Request:Supplier Name::" + inputSupplierName);
log.info("Input Request:Contact Info::" + inputSupplierConInfo);
log.info("Input Request:Opco::" + inputOpco);
log.info("Input Request:Notes::" + inputNotes);


assert inputSupplierName == resSupplierName : "Response Supplier Name is not maching with the input request Supplier Name";
assert inputSupplierConInfo == resSupplierConInfo : "Response Supplier Contact Information is not maching with the input Supplier Contact Information";
assert inputOpco == resOpco : "Response Opco is not matching with the input request Opco";
assert inputNotes == resNotes : "Response Notes is not matching with the input request Notes";
assert json.deleted == false : "The Supplier is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_NonSyscoProduct" id="6ba1fdc5-f9a2-48e8-ac3c-a759308c4358" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/products" methodName="InsertNonSyscoProductOrPreparedItem-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_NonSyscoProduct" mediaType="application/json" postQueryString="false" id="fdbdcc05-0e3f-4114-a71b-5772e7560ffe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#itemId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/products</con:originalUri><con:assertion type="Simple Contains" id="9842d702-1b8f-43bd-bb9e-a3ebac9f10b7" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="c1dff8a0-603b-4a8e-a544-9e6a32362f88" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6e59cf5a-9972-4d7d-a57e-b500ff1b0d48" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);

def inputOpco = context.expand('${DataFile#opco}');
def inputNonSyscoProdName = requestJson.name;
def inputMaterialId = requestJson.materialId;
def inputSupplierId = context.expand('${DataFile#supplierId}');
def inputBrand = requestJson.brand;
def inputType = requestJson.type;
def inputDescription = requestJson.description;
def inputNickName = requestJson.nickName;
def inputAvgWtPerCase = requestJson.averageWeightPerCase;
def inputPackSize = requestJson.packSize;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resNonSyscoProdName = json.name;
def resMaterialId = json.materialId;
def resSupplierId = json.supplier;
def resBrand = json.brand;
def resType = json.type;
def resDescription = json.description;
def resNickName = json.nickName;
def resAvgWtPerCase = json.averageWeightPerCase;
def resPackSize = json.packSize;



log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("NON SYSCO PRODUCT NAME::"+"Service Reponse::"+ resNonSyscoProdName + "    Input Request::"+ inputNonSyscoProdName);
log.info("MATERIAL ID::"+"Service Reponse::"+ resMaterialId + "    Input Request::"+ inputMaterialId);
log.info("SUPPLIR ID::"+"Service Reponse::"+ resSupplierId + "    Input Request::"+ inputSupplierId);
log.info("BRAND::"+"Service Reponse::"+ resBrand + "    Input Request::"+ inputBrand);
log.info("TYPE::"+"Service Reponse::"+ resType + "    Input Request::"+ inputType);
log.info("DESCRIPTION::"+"Service Reponse::"+ resDescription + "    Input Request::"+ inputDescription);
log.info("NICK NAME::"+"Service Reponse::"+ resNickName + "    Input Request::"+ inputNickName);
log.info("AVG WT PER CASE::"+"Service Reponse::"+ resAvgWtPerCase + "    Input Request::"+ inputAvgWtPerCase);
log.info("PACK SIZE::"+"Service Reponse::"+ resPackSize + "    Input Request::"+ inputPackSize);



assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputNonSyscoProdName == resNonSyscoProdName : "Response Non Syco Product Name is not maching with the input Non Syco Product Name";
assert inputMaterialId == resMaterialId : "Response Material Id is not matching with the input request Material Id";
assert inputSupplierId == resSupplierId : "Response Supplier Id is not matching with the input request Supplier Id";
assert inputBrand == resBrand : "Response Brand is not matching with the input request Brand";
assert inputType == resType : "Response Product Type is not matching with the input request Product Type";
assert inputDescription == resDescription : "Response Product Description is not matching with the input request Product Description";
assert inputNickName == resNickName : "Response Nick Name is not matching with the input request Nick Name";
assert inputAvgWtPerCase == resAvgWtPerCase : "Response Avg Weight Per Case is not matching with the input request Avg Weight Per Case";
assert inputPackSize == resPackSize : "Response Pack Size is not matching with the input request Pack Size";
assert json.deleted == false : "The Product is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="f340570c-167e-430a-857d-40fdead877ae"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Create_Supplier";
def preRestStep4 = "Create_NonSyscoProduct";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Inventory_AddItem";
def restStep2 = "Delete_Group";
def restStep3 = "GetInventoryById"
//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);

	//preRestStep3
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);

	def preRestStep3Response = testRunner.testCase.testSteps[preRestStep3].testRequest.response.contentAsString;
	def jsonPreRestStep3Response = new JsonSlurper().parseText(preRestStep3Response);
	def supplierId = jsonPreRestStep3Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("supplierId",supplierId);

	//preRestStep4
	for(int j = 0;j &lt; itemArray.size();j++){
		def tempItemId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName5+j);
		log.info("tempItemId:::::::::::::::::"+tempItemId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,tempItemId);
		def preRestStep4Result = testRunner.runTestStepByName(preRestStep4);			
		restStepStatus =preRestStep4Result.getStatus().toString();
		log.info(preRestStep4+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep4);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep4Response = testRunner.testCase.testSteps[preRestStep4].testRequest.response.contentAsString;
		def jsonPreRestStep4Response = new JsonSlurper().parseText(preRestStep4Response);
		def itemId = jsonPreRestStep4Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("itemId"+j,itemId);
	}
	//End of Execute Pre Steps

	//Execute Create_Inventory_AddItem Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);
	
	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonRestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def inventoryId = jsonRestStep1Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("inventoryId_new",inventoryId);
	
	//Execute Delete_Group Step
	def restStep2Result = testRunner.runTestStepByName(restStep2);     
	def restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	
	restTestStepList.add(restStep2); 
	restStepsStatusList.add(restStepStatus);	
	
	
	//Execute GetInventoryById Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Inventory_AddItem" id="22b09c91-055d-4189-9fef-db2058b1c439" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="UpdateInventoryContents-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Inventory_AddItem" mediaType="application/json" postQueryString="false" id="14329879-bc1c-4d8c-8566-4d5dfb996788"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#inventoryId}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="2ef2628b-7824-415c-b901-2ef5d878ca36"><con:configuration><token>openDate</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f5054bd8-f7b1-4895-b56f-0b2cc944137c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;

int itemSize = json.items.size();
log.info("ITEM SIZE::"+itemSize);

def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

for(int i = 0 ; i &lt; itemSize ; i++){   
                def resItemId = json.items[i].id;
                def resItemPrice = json.items[i].price;
                def resItemPriceUom = json.items[i].priceUom;
                def resGroupId = json.items[i].groups.groupId;
                def resCustomerImages = json.items[i].customerImages;            
                
                def inputItemId = requestJson.items[i].id;
                def inputItemPrice = requestJson.items[i].price;
                def inputItemPriceUom = requestJson.items[i].priceUom;
                def inputGroupId = requestJson.items.groups[i].groupId;
                def inputCustomerImages = requestJson.items[i].customerImages;       
                
                log.info("OPCO::"+"Service Reponse::"+ resOpco + "    Input Request::"+ inputOpco);
                log.info("CUSTOMER ID::"+"Service Reponse::"+ resCustId + "    Input Request::"+ inputCustId);
                log.info("ITEM ID::"+"Service Reponse::"+ resItemId + "    Input Request::"+ inputItemId);
                log.info("ITEM PRICE::"+"Service Reponse::"+ resItemPrice + "    Input Request::"+ inputItemPrice);
                log.info("ITEM PRICE UOM::"+"Service Reponse::"+ resItemPriceUom + "    Input Request::"+ inputItemPriceUom);
                log.info("GROUP ID::"+"Service Reponse::"+ resGroupId + "    Input Request::"+ inputGroupId);
                log.info("CUSTOMER IMAGES::"+"Service Reponse::"+ resCustomerImages + "    Input Request::"+ inputCustomerImages);
                
                assert inputItemId == resItemId : "Response Item Id is not matching with the input request Item Id";
                assert inputItemPrice == resItemPrice : "Response Item Price is not matching with the input request Item Price";
                assert inputItemPriceUom == resItemPriceUom : "Response Item Price Uom is not matching with the input request Item Price Uom";
                assert inputGroupId == resGroupId : "Response GroupId is not matching with the input request GroupId";
                assert inputCustomerImages == resCustomerImages : "Response Customer Images is not matching with the input request Customer Images";
}

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="ec849310-8b01-4c13-a035-7e92f04ffe3b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1736a462-a48d-4527-97d5-e9e25c50781b" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0be9992f-32e6-4b0b-8e78-ffc66a7f128d" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#groupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetInventoryById" id="4f62a61f-95d3-4fd9-befa-46884dd55be4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/inventories/{inventoryId}" methodName="GetInventoryById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetInventoryById" id="c7c5dc6d-c619-4fbe-8be6-881cc7d70038" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/inventories</con:originalUri><con:assertion type="Simple Contains" id="6e97bea5-7cb9-4eaf-b787-fa51d5d5b3ac" name="Contains"><con:configuration><token>no location</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a7cc9f9e-ca62-4357-91b0-f87f7b9d7a2e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resOpco = json.opCo;
def resCustId = json.customerId;
def resOpenDate = json.openDate;
def resState = json.state;
def resItems = json.items;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');

log.info("OPCO::"+"Service Response::"+ resOpco + "    Input Request::"+ inputOpco);
log.info("CUSTOMER ID::"+"Service Response::"+ resCustId + "    Input Request::"+ inputCustId);
log.info("STATE::"+"Service Response::"+ resState );
log.info("OPEN DATE::"+"Service Response::"+ resOpenDate);
log.info("ITEMS::"+"Service Response::"+ resItems);                

assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resOpenDate != null : "Inventory open date is null";
assert resState == "open" : "The Inventory is closed";
assert resItems != null : "The inventory items are null";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="inventoryId" value="${DataFile#inventoryId_new}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>inventoryId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="d99ca127-4a6f-4e06-9ae6-4a55de3dab4f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    } ]
}</con:value></con:property><con:property><con:name>groupId</con:name><con:value>e94091a2-600c-4557-9eab-29711c40b4d5</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>ba2d0ccb-ca30-4621-9853-7a980c24f16b</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>9bf72479-e692-40f6-a905-89b5c0516e7c</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>64543e93-ef7f-48a8-8c67-9ce35d2ecfc9</con:value></con:property><con:property><con:name>itemId</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>inventoryId_new</con:name><con:value>7e0e3ff0-4302-4537-bc62-702a4490efc6</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="96fc5fd4-d468-40db-b4a2-d1d53e1ec85b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>{
  "items": [
    {
      "id": "${DataFile#itemId0}",
      "price": 100,
      "priceUom": "cs",
      "groups": [
        {
          "groupId": "${DataFile#groupId}",
          "sequence": 1,
          "quantity": 2,
          "quantityUom": "cs"
        }
      ],
      "customerImages": [
        "string"
      ]
    } ]
}</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>{
  "name": "Oranges",
  "materialId": "32123",
  "supplier": "${DataFile#supplierId}",
  "brand": "USOrang",
  "description": "US Oranges",
  "nickName": "US Oranges",
  "type": "nonSysco",
  "averageWeightPerCase": 1,
  "packSize": {
    "pack": "10",
    "size": "10",
    "uom": "cs"
  }
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "LocationGroup2",
  "type": "location",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>{
  "name": "fruitswala",
  "contactInformation": {
    "address": "1 somestyreet USA",
    "contactName": "Ravi",
    "emailAddress": "Ravi@gmail.com",
    "phoneNumber": "9897654323"
  },
  "notes": "string"
}</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="16b5554a-8101-42b8-a82d-bf2c6c7ff18a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC072_DeleteGrpLoc_GetGrp" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="ba0c9b55-290c-4360-b3ff-c5debb16c037"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="9762ac1c-ca05-4035-940f-29dfe2bcb6a4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="70e49d21-3ca5-426b-becc-e6c39384921f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="e2f680b6-af7f-4fbe-a652-5384832567f3" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="babac896-60e7-4191-a332-9ec329e5fa61"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";
def restStep2 = "GetGroupById";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupId",groupId);
	
	//End of Execute Pre Steps

	//Execute Delete Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute GetGroupById Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="35769703-1c3c-4639-9caa-612332f7de13" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b69d3317-2a5e-410f-a341-e23c84b6a3bf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#groupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GetGroupById" id="97c06422-de47-4cb3-83e7-b460102fc8f8" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="GetGroupById-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetGroupById" id="cfac1aca-fae8-49a6-acbc-25dfcffe0f9d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/%7BDataFile%23groupId%7D%20</con:originalUri><con:assertion type="Simple Contains" id="a1c1f8db-ebd8-4352-89bc-824a475c168d" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dd0e01e7-7072-49ef-a6df-2eba3adfbac5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def response = messageExchange.response.responseContent;
def json = slurper.parseText response;

def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

def resOpco = json.opCo;
def resCustId = json.customerId;

def inputOpco = context.expand('${DataFile#opco}');
def inputCustId = context.expand('${DataFile#cust}');
def inputGroupId = context.expand('${DataFile#groupId}');


log.info("Service Response:Group Id::" + resGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);

log.info("Service Response: Opco::"+inputOpco);
log.info("Service Response: Customer ID::"+inputCustId);
log.info("Service Response: Group ID::"+inputGroupId);

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
assert inputOpco == resOpco : "Response Opco is not maching with the input request Opco";
assert inputCustId == resCustId : "Response Customer Id is not maching with the input Customer Id";
assert resGrpId != null : "Group ID is null";
assert resGrpName != null : "Group name is null";
assert resGrpType != null : "Group Type is null";
assert inputGroupId == resGrpId : "Response Group Id is not maching with the input Group Id";

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#groupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="1ab1a582-56be-4fcc-a631-8a91869821d1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>fdc891ce-21c0-416a-8dea-b88502e9536e</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="fc38b1a5-cc24-4ba5-a2b4-7306468f6822"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "LocationGroup3",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cf9b1f0e-3047-430d-a4b6-47fffee27bdc" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC073_DeleteGrp_GetGroups_typeLoc" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="23f88426-d076-4a33-952f-77a9e959368c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="043ae7a6-d403-4c56-a022-0ff3c4baa9b4" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="9396f968-0f97-4c1c-b527-493cf4c2e94f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="ad339684-0e5d-454b-8f73-23221543fe7f" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="b475efbe-4ee5-4ca3-8b82-2e364d4d5779" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b69d3317-2a5e-410f-a341-e23c84b6a3bf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#createdGroupId0}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#createdGroupId0}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_Groups" id="885a67a7-cdd5-4fe2-8460-74e5954df32b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="GetGroups-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Groups" id="32de6f1b-8298-43f5-a523-5c4decb17d0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups</con:originalUri><con:assertion type="Simple Contains" id="f4d80305-8914-46c4-a13b-e11e76c230a5" name="Contains"><con:configuration><token>"groups"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d61d62e7-0d88-4df2-b09e-00a89e3727ad" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
def inputCustId = context.expand( '${DataFile#cust}');
def inputOpCo = context.expand( '${DataFile#opco}');

int groupSize = json.groups.size();
log.info("No Of Accounts::"+ groupSize);

for (int i=0; i&lt; groupSize;i++)
{
	def resOpCo = json.groups[i].opCo;
	def resId = json.groups[i].id;
	def resCustomerId = json.groups[i].customerId;
	def resName=  json.groups[i].name;
	def resType=  json.groups[i].type;	
	def resdeleted=  json.groups[i].deleted;
	
	log.info("Service Response:opCo::" + resOpCo);
	log.info("Service Response:customer Id::" + resCustomerId);
	log.info("Service Response:Group Id::" + resId);
	log.info("Service Response:Name::" + resName);
	log.info("Service Response:Type::" + resType);	
	log.info("Service Response:Deleted::" + resdeleted);

	assert resOpCo != null : " opCo is null";
	assert resCustomerId != null : "CustomerId is null";
	assert resId != null : "isCogs is null";
	assert resCustomerId == inputCustId : "Input customer Id is not matching with the response Customer ID";
	assert resOpCo == inputOpCo : "OpCO is not matching with the response Customer ID";
	assert resName != null : "Name is null";
	assert resType != null : "Type is null";
	assert resType == "location" : "Group type is expense category";	
	assert resdeleted == false : "Deleted groups are present";

}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="type" value="${DataFile#initialInput}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="4954f955-7383-48ac-9a5c-4ed46de65051"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";
def preRestStep3 = "Delete_Group";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Get_Groups";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData6.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	for(int j = 0;j &lt; itemArray.size();j++){
		log.info("itemArray.size():::::::::::::::::"+itemArray.size());
		def tempGroupId = testRunner.testCase.getTestStepByName(propertyStepName).getPropertyValue(propertyName6+j);
		log.info("tempGroupId:::::::::::::::::"+tempGroupId);
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,tempGroupId);
		
		def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
		restStepStatus =preRestStep2Result.getStatus().toString();
		log.info(preRestStep2+": Status::"+restStepStatus); 
		restTestStepList.add(preRestStep2);
		restStepsStatusList.add(restStepStatus);
	
		def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
		def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
		def groupId = jsonPreRestStep2Response.id;
		testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId"+j,groupId);
	}

	//preRestStep1 Delete_Group
	def preRestStep3Result = testRunner.runTestStepByName(preRestStep3);			
	restStepStatus =preRestStep3Result.getStatus().toString();
	log.info(preRestStep3+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep3);
	restStepsStatusList.add(restStepStatus);
	
	//End of Execute Pre Steps

	//Execute Get Groups Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="2883e125-e472-4bce-a4e9-b0a6d6fd8bc7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "LocationGroup6",
  "type": "expenseCategory",
  "storage": "freezer",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>location</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId0</con:name><con:value>{
  "name": "LocationGroup4",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "LocationGroup5",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}</con:value></con:property><con:property><con:name>createdGroupId0</con:name><con:value>e47ce510-1c61-4b81-8393-09cfe1f53bc8</con:value></con:property><con:property><con:name>createdGroupId1</con:name><con:value>25997b1c-28fd-42e0-a45c-458a5b1da7ff</con:value></con:property><con:property><con:name>groupId2</con:name><con:value>{
  "name": "LocationGroup6",
  "type": "expenseCategory",
  "storage": "freezer",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>createdGroupId2</con:name><con:value>0c58cba4-7544-462f-b454-cfbc1b3fcbef</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="6134661d-401b-4ccc-ad2e-1381529d5aaa"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "LocationGroup4",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}&amp;&amp;{
  "name": "LocationGroup5",
  "type": "location",
  "storage": "cooler",
  "foodType": "fruits"
}&amp;&amp;{
  "name": "LocationGroup6",
  "type": "expenseCategory",
  "storage": "freezer",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>location</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Reports\\Inv_Report_DataSet1_201605311556.xls</con:value></con:property></con:properties></con:testSuite><con:testSuite id="da6e82c8-1732-4a56-800f-eeeb75313b95" name="#559_UserStories" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b77b7a8e-78f0-4bab-bc01-ef1dbe01ffe9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Config" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SetConfigurations" id="0cb6e521-59b0-44aa-9ee0-78eb3713e9a6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper;
import com.eviware.soapui.support.types.StringToStringMap;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel

def singleRun = context.expand( '${Data#singleRun1}' );
log.info("singleRun::::::::::::"+singleRun);
if(singleRun == ""){
	singleRun = "true";
}

if(singleRun == "false"){
	
	log.info("::::::MULTIPLE RUN::::::");
	def endPointValue = context.expand( '${Data#endPoint1}' );
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
} else {
	log.info("SINGLE RUN::::::");
	def sys = System.getProperty("user.home").replace("\\","\\\\");
	def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\EndPoint.xls";
	def sheetName = "Data";	
	
	//flush old data
	def fl_testCase = testRunner.testCase;
	def fl_testStep = fl_testCase.getTestStepByName("Data");
	try{
		fl_testCase.removeTestStep(fl_testStep);
	} catch(Exception e){}
	
	//end of flush old data	
	
	def testcaseName = context.testCase.name;
	def propertyName1 = "endPoint"
	int columnNumber1 = 1;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	
	
	def endPointValue = context.expand( '${Data#endPoint1}' );
	
	def project = context.testCase.testSuite.project
	project.testSuiteList.each { testSuite ->
	   testSuite.testCaseList.each { testCase ->
	      testCase.testStepList.findAll( { it instanceof HttpRequestTestStep } ).each { testStep ->
	         testStep.httpRequest.endpoint = endPointValue;         
	      }
	   }
	}
	
	def propertyName2 = "dataSheetName"
	int columnNumber2 = 2;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);
	
	def propertyName3 = "tabName"
	int columnNumber3 = 3;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);
	
	def propertyName4 = "reportName"
	int columnNumber4 = 4;
	ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

	testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"].getTestStepByName("Data").setPropertyValue("singleRun1","true");			
}

</script></con:config></con:testStep><con:testStep type="groovy" name="CreateReportFile" id="cb24cddb-afb0-48f9-80c3-1a5380357ce8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["CreateReportFile"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def CreateReportFile = context.CreateReportFile
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def reportPath=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\Reports";
def reportName = testRunner.testCase.getTestStepByName("Data").getPropertyValue("reportName1");	

log.info(reportPath);
log.info(reportName);

CreateReportFile.CreateReport(reportPath, reportName);		
</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="53839b45-a5f4-4220-b72e-2a39b6be53b9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>org.postgresql.Driver</con:driver><con:connectionString>jdbc:postgresql://qa-uom-services-postgres.crkqmj3qk07x.us-east-1.rds.amazonaws.com:5432/uom?user=uomadmin&amp;password=uomadmin</con:connectionString><con:query>DELETE FROM account where value ->> 'customerId' = '804732';
DELETE FROM inventory WHERE value ->> 'customerId' = '804732';
DELETE FROM supplier WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM nonsyscoproduct WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';
DELETE FROM "group" WHERE value ->> 'associatedAccount' = '{"opCo": "067", "customerId": "804732"}';</con:query><con:assertion type="JDBC Status" id="944a48cc-9ba9-4e69-9a81-fc058ae6e3a0" name="JDBC Status"/><con:properties/></con:config></con:testStep><con:testStep type="properties" name="Data" id="a4dd24da-fa2f-4a3a-9a92-67d293cf1c15"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>endPoint1</con:name><con:value>http://uom-qa.na.sysco.net</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>dataSheetName1</con:name><con:value>SyscoDataSet1.xls</con:value></con:property><con:property><con:name>tabName1</con:name><con:value>Data</con:value></con:property><con:property><con:name>reportName1</con:name><con:value>Inv_Report_DataSet1</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8c9b7c46-c7de-45b5-9241-e4cbc8ceecf1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC074_CreateGrp_ExpCat_DupErr" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="005abbab-1819-4d3e-a7e0-673c237c5eae"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="13e335da-bd8e-4db1-a34a-21c9d2680474" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="1be14fec-34da-421d-af8e-392e64657fb7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="864df9f7-2c21-454a-b9b5-2cdc03f70b51" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2ceeb2a2-91c4-41ed-9748-6b95be23724e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e2341158-43a7-45cf-ab26-05a94c3ef90a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_expCat_Dup" id="ae8e0af6-4251-42d7-95aa-9e136334c826" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_expCat_Dup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>id":"${DataFile#expCatGrpId}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="66c30d48-b5e5-48fd-b6c3-a699cffea663" name="Contains 1"><con:configuration><token>uniqueFields":{"name":"${DataFile#groupName}"}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c87c95e1-b8a4-4381-a4a9-e797b270189f" name="Contains 2"><con:configuration><token>message":"An Expense Category with the same name already exists"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="831e8bc6-60df-4a74-b3ad-b44d0dc4d27f"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";
def restStep2 = "Create_Group_expCat_Dup";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//End of Execute Pre Steps

	//Execute Create_Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonrestStep1Response.id;
	def groupName = jsonrestStep1Response.name;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("expCatGrpId",groupId);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupName",groupName);

	//Execute Create_Group_expCat_Dup Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="5f0ec865-2388-4570-9270-66db711285ea"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "cooler1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>expCatGrpId</con:name><con:value>238288f9-bb03-4c72-b9f4-7b48ccad48f5</con:value></con:property><con:property><con:name>groupName</con:name><con:value>cooler1</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="928a3943-f7ff-4679-bbd7-c1a5169efef6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "cooler1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5bb393d7-1320-47f9-8f35-72a20dedc66c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC075_CreateGrp_Loc_DupErr" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="59d0be0e-f403-41cf-ace7-8dd5d26703b0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="9b5474d6-7d12-4b47-9c20-a938db7d6ba1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="1be14fec-34da-421d-af8e-392e64657fb7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="3800076a-3cd2-49ca-b674-07e7a0e43466" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2ceeb2a2-91c4-41ed-9748-6b95be23724e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e2341158-43a7-45cf-ab26-05a94c3ef90a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_Loc_Dup" id="b7a9ff6e-ac12-4560-8c7c-355db1895bed" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_Loc_Dup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>id":"${DataFile#expCatGrpId}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="66c30d48-b5e5-48fd-b6c3-a699cffea663" name="Contains 1"><con:configuration><token>uniqueFields":{"name":"${DataFile#groupName}"}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c87c95e1-b8a4-4381-a4a9-e797b270189f" name="Contains 2"><con:configuration><token>message":"A Location with the same name already exists"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="b19b9afb-d5ed-4173-9000-137db976bd5f"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";
def restStep2 = "Create_Group_Loc_Dup";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//End of Execute Pre Steps

	//Execute Create_Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonrestStep1Response.id;
	def groupName = jsonrestStep1Response.name;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("expCatGrpId",groupId);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupName",groupName);

	//Execute Create_Group_expCat_Dup Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="6a5b5231-b451-4c0e-9e1c-0f004d3b258a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "cooler100",
  "type": "location",
  "storage": "cooler",
  "foodType": "freshFruits"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>expCatGrpId</con:name><con:value>613c3e9a-8dad-424b-b6c4-46a8191563a3</con:value></con:property><con:property><con:name>groupName</con:name><con:value>cooler100</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="1e0f784a-e72e-448d-b32f-ec450fa03e37"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "cooler100",
  "type": "location",
  "storage": "cooler",
  "foodType": "freshFruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="043bcc27-58f7-4041-ba66-fdd2ef5e2b81" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC076_DelExpCatGrp_CreateSame" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="8c769906-ccce-4ce9-ba6e-42148dfe2f42"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="8954bb43-8b77-46ca-9fb2-b0fc152b5901" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="70e49d21-3ca5-426b-becc-e6c39384921f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="a1348ad3-b3f6-4ec5-9ec8-d089b1953bee" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="6f6163e6-5381-4dec-9b3d-1beb3dd429e1"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";
def restStep2 = "Create_SameGroup";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId",groupId);
	
	//End of Execute Pre Steps

	//Execute Delete Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_SameGroup Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="c8e46a24-e706-45f3-ac4b-580d0a22a941" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b69d3317-2a5e-410f-a341-e23c84b6a3bf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#createdGroupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#createdGroupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_SameGroup" id="7f3efdd5-f5fd-4e54-b93d-e3c436b7b657" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_SameGroup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="096272fa-572f-4837-9c87-57188c6bff03"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property><con:property><con:name>createdGroupId</con:name><con:value>6db140f5-15b7-4cc2-bc7d-9e8085b57cf7</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="ba52f1e6-9ed6-4d63-8057-11050701e016"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "fruitGroup3",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0a1eb18c-b58b-4830-b9c8-fbb8e2b003c9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC077_DelLocGrp_CreateSame" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="fad15166-934d-4b29-9ca7-6f8c2c760bd7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="46e91ca8-8fc0-4043-b5d1-9771e15ddda2" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="70e49d21-3ca5-426b-becc-e6c39384921f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="061f9cbe-fa4e-4218-b0d9-693134d48076" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="737958de-1d5c-4cd6-9ae3-402fea7dfd1e"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
def preRestStep2 = "Create_Group";

//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Delete_Group";
def restStep2 = "Create_SameGroup";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	//testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);

	def itemArray = propData5.split("&amp;&amp;");
     for(int j = 0;j &lt; itemArray.size();j++){
     	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5+j,itemArray[j]);	
     }                  

	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//preRestStep2
	def preRestStep2Result = testRunner.runTestStepByName(preRestStep2);			
	restStepStatus =preRestStep2Result.getStatus().toString();
	log.info(preRestStep2+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep2);
	restStepsStatusList.add(restStepStatus);

	def preRestStep2Response = testRunner.testCase.testSteps[preRestStep2].testRequest.response.contentAsString;
	def jsonPreRestStep2Response = new JsonSlurper().parseText(preRestStep2Response);
	def groupId = jsonPreRestStep2Response.id;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("createdGroupId",groupId);
	
	//End of Execute Pre Steps

	//Execute Delete Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_SameGroup Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete_Group" id="e2a79111-1d81-4e46-b167-a48836e8f72e" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups/{groupId}" methodName="DeleteGroup-Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete_Group" id="097c3ad1-2ad5-481b-a456-3f46927100f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request/><con:originalUri>http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com/groups/875fb79e-a6b6-44b8-9652-ef8254abe168</con:originalUri><con:assertion type="Simple Contains" id="da05ac1b-bb74-43b3-b291-8348c8e13386" name="Contains"><con:configuration><token>"deleted":true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b69d3317-2a5e-410f-a341-e23c84b6a3bf" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();

def inputGrpId = context.expand('${DataFile#createdGroupId}'); 

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpId = json.id;
def resGrpName = json.name;
def resGrpType = json.type;

log.info("OPCO::"+"Service Reponse::"+ json.opCo + "    Input Request::"+ context.expand('${DataFile#opco}'));
log.info("CUSTOMER ID::"+"Service Reponse::"+ json.customerId + "    Input Request::"+ context.expand('${DataFile#cust}'));
log.info("GROUP ID::"+"Service Reponse::"+ resGrpId + "    Input Request::"+ inputGrpId);
log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);


assert inputGrpId == resGrpId : "Response Group Id is not maching with the input request Group Id";
assert resGrpName != null : "Response Group Name is null";
assert resGrpType != null : "Response Type is null";

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == true : "The group is not deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="groupId" value="${DataFile#createdGroupId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>groupId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_SameGroup" id="a8025412-3da6-4403-964f-ce25cc9e7c9d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_SameGroup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="54d2fdb1-9987-46e9-86c1-0e8e891eccdc" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="71704924-0b99-4895-a3f4-e85c58e8f6cd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "cooler107",
  "type": "location",
  "storage": "cooler",
  "foodType": "freshFruits"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value/></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property><con:property><con:name>createdGroupId</con:name><con:value>8da9cb87-4808-40f1-a6e9-b38288b6ad0c</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="1c9c8c62-a0db-4bd4-933f-63dc8fcf9556"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "cooler107",
  "type": "location",
  "storage": "cooler",
  "foodType": "freshFruits"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="95564e5b-0d08-4447-b276-b233b33916c7" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC078_CreateGrp_ExpCat_DupVariantsErr" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="7836e049-efde-416b-a595-c3b8284f9623"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="eb4b7df9-1027-4c92-a274-9cfa3f7e053d" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="1be14fec-34da-421d-af8e-392e64657fb7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="2be9f06e-52e1-4bb4-96cb-4a19148e2a34" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2ceeb2a2-91c4-41ed-9748-6b95be23724e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e2341158-43a7-45cf-ab26-05a94c3ef90a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_expCat_Dup" id="ef47cc22-7f09-426c-bcd6-5aa5bc84acfd" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_expCat_Dup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>id":"${DataFile#expCatGrpId}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="66c30d48-b5e5-48fd-b6c3-a699cffea663" name="Contains 1"><con:configuration><token>uniqueFields":{"name":"${DataFile#groupName}"}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c87c95e1-b8a4-4381-a4a9-e797b270189f" name="Contains 2"><con:configuration><token>message":"An Expense Category with the same name already exists"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_expCat_Dup_1" id="bd4593e5-db22-4bf5-b4f2-45d16bd13ae9" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_expCat_Dup_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>id":"${DataFile#expCatGrpId}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="66c30d48-b5e5-48fd-b6c3-a699cffea663" name="Contains 1"><con:configuration><token>uniqueFields":{"name":"${DataFile#groupName}"}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c87c95e1-b8a4-4381-a4a9-e797b270189f" name="Contains 2"><con:configuration><token>message":"An Expense Category with the same name already exists"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="79703440-f039-4cda-9c5e-dc06447cd7a9"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";
def restStep2 = "Create_Group_expCat_Dup";
def restStep3 = "Create_Group_expCat_Dup_1";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//End of Execute Pre Steps

	//Execute Create_Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonrestStep1Response.id;
	def groupName = jsonrestStep1Response.name;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("expCatGrpId",groupId);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupName",groupName);

	//Execute Create_Group_expCat_Dup Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Group_expCat_Dup_1 Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="0537859a-0dde-4961-85c2-4520f1ea6b54"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "cooler",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "name": "coOLER",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>expCatGrpId</con:name><con:value>22059eec-3cd8-42f1-8f93-5fbc09d45bab</con:value></con:property><con:property><con:name>groupName</con:name><con:value>cooler</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "name": "CoOlEr",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="bba8eae5-01fd-491f-86b8-676484d3f7ed"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "cooler",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "name": "coOLER",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "name": "CoOlEr",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cbda69e1-a404-40e0-b85c-d2e833721b7c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC079_CreateGrp_ExpCat_Variants" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="LoadData" id="12094cf5-e71e-4c26-bfdc-2f393220cd2a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;
import com.eviware.soapui.support.*;
import net.sf.json.groovy.JsonSlurper

// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["ReadFromExcel"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def ReadFromExcel = context.ReadFromExcel
  
def sys = System.getProperty("user.home").replace("\\","\\\\");
def dataSheetName = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("dataSheetName1");
def sheetName  = testRunner.testCase.testSuite.project.testSuites["Sysco_Services"].testCases["Config"].getTestStepByName('Data').getPropertyValue("tabName1");
def excelName=sys+ "\\\\Desktop\\\\Sysco_SOAPUI\\\\"+dataSheetName;

//flush old data
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepByName("Data");
try{
	testCase.removeTestStep(testStep);
} catch(Exception e){}

//end of flush old data

def testcaseName = context.testCase.name;

def propertyName1 = "opco"
int columnNumber1 = 1;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber1,propertyName1,testcaseName);	

def propertyName2 = "cust"
int columnNumber2 = 2;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber2,propertyName2,testcaseName);

def propertyName3 = "user"
int columnNumber3 = 3;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber3,propertyName3,testcaseName);

def propertyName4 = "inventoryId"
int columnNumber4 = 4;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber4,propertyName4,testcaseName);

def propertyName5 = "itemId"
int columnNumber5 = 5;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber5,propertyName5,testcaseName);

def propertyName6 = "groupId"
int columnNumber6 = 6;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber6,propertyName6,testcaseName);

def propertyName7 = "supplierId"
int columnNumber7 = 7;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber7,propertyName7,testcaseName);

def propertyName8 = "newQuantity"
int columnNumber8 = 8;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber8,propertyName8,testcaseName);

def propertyName9 = "initialInput"
int columnNumber9 = 9;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber9,propertyName9,testcaseName);

def propertyName10 = "newUom"
int columnNumber10 = 10;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber10,propertyName10,testcaseName);

def propertyName11 = "additionalInput"
int columnNumber11 = 11;
ReadFromExcel.readDataAndSetAsProperty(excelName, sheetName,columnNumber11,propertyName11,testcaseName);</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Account" id="5d6bca8f-4d04-4069-8ff6-fa1dc528ef25" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/accounts" methodName="CreateNewAccount-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Account" mediaType="application/json" postQueryString="false" id="e0ee42e3-5322-4e6f-8496-d03a688c0df1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>{
  "isCogs": true
}</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/accounts</con:originalUri><con:assertion type="GroovyScriptAssertion" id="1be14fec-34da-421d-af8e-392e64657fb7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def response = messageExchange.response.responseContent;
def slurper = new JsonSlurper();
def json = slurper.parseText response;
assert json.customerId ==  context.expand( '${DataFile#cust}') || json.message == "The account you specified is already in use.";
log.info(json.message);
if( json.message == null ){
	log.info("inside if");
	def request = messageExchange.requestContent;
	def requestJson = slurper.parseText(request);
	assert json.opCo ==  context.expand( '${DataFile#opco}') : "Response opco is not maching with the input request opco";
	assert json.isCogs == requestJson.isCogs : "Response isCogs is not maching with the input request isCogs";
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group" id="718415b7-fae8-4dd6-88bb-223bf938b2d1" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#groupId}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="Simple Contains" id="9824888e-11ac-4eb3-9e44-d0f213cf0af2" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="2ceeb2a2-91c4-41ed-9748-6b95be23724e" name="XPath Match"><con:configuration><path>//*[local-name()='id']/text()</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e2341158-43a7-45cf-ab26-05a94c3ef90a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_expCat_Dup" id="d6b2e4cb-262e-4141-94d8-cf3c12c6cc6b" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_expCat_Dup" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#initialInput}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3d73c09a-d820-4cfe-8f27-21fb52608438" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e7837ad4-2bf5-45eb-8f16-510e794735e1" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_Group_expCat_Dup_1" id="a864bcd1-280e-49ea-b4e3-c2f01f8779dc" disabled="true"><con:settings/><con:config service="http://internal-qa-uom-services-private-elb-306417685.us-east-1.elb.amazonaws.com:80" resourcePath="/groups" methodName="CreateNewGroup-Method" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Group_expCat_Dup_1" id="46aea3af-1aea-4544-958f-118e572b8f60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${DataFile#opco}|${DataFile#cust}|${DataFile#user}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://uom-qa.na.sysco.net</con:endpoint><con:request>${DataFile#additionalInput}
</con:request><con:originalUri>http://internal-ba-uom-services-private-elb-674196146.us-east-1.elb.amazonaws.com/groups/groups</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c982692f-538e-4518-9094-010f96cb62e1" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper ;

def slurper = new JsonSlurper();
def request = messageExchange.requestContent;
def requestJson = slurper.parseText(request);
def inputGrpName = requestJson.name;
def inputGrpType = requestJson.type;
def inputGrpStorage = requestJson.storage;
def inputGrpFoodType = requestJson.foodType;

def response = messageExchange.response.responseContent;
def json = slurper.parseText response;
def resGrpName = json.name;
def resGrpType = json.type;
def resGrpStorage = json.storage;
def resGrpFoodType = json.foodType;

log.info("Service Response:Group Name::" + resGrpName);
log.info("Service Response:Group Type::" + resGrpType);
log.info("Service Response:Group Opco::" + json.opCo);
log.info("Service Response:Group Storage::" + resGrpStorage);
log.info("Service Response:Group Food Type::" + resGrpFoodType);


log.info("Input Request:Group Name::" + inputGrpName);
log.info("Input Request:Group Type::" + inputGrpType);
log.info("Input Request:Group Opco::" + context.expand('${DataFile#opco}'));
log.info("Input Request:Group Storage::" + inputGrpStorage);
log.info("Input Request:Group Food Type::" + inputGrpFoodType);



assert inputGrpName == resGrpName : "Response Group Name is not maching with the input request Group Name";
assert inputGrpType == resGrpType : "Response Group Type is not maching with the input request Group Type";

if( resGrpType == "expenseCategory" ){
                log.info("Group Type is Expense Category");
                assert inputGrpFoodType == resGrpFoodType : "Response Group Food Type is not maching with the input request Group Food Type";
} else {
                log.info("Group Type is Location");
                assert inputGrpStorage == resGrpStorage : "Response Group Storage is not maching with the input request Group Storage";
}

assert json.opCo == context.expand('${DataFile#opco}') : "Response Opco is not matching with the input request Opco"
assert json.deleted == false : "The group is deleted";
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c6e293e8-f81d-4d63-b69f-abd775aa463e" name="Contains"><con:configuration><token>customerId":"${DataFile#cust}"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Run" id="1c78442e-210d-4e48-97a9-48803221ab60"><con:settings/><con:config><script>import groovy.json.*
import java.io.File;
import jxl.*;
import jxl.write.*;


// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["GroovyLib"]
// find the GroovyFunctions within the library 
module = library.testCases["Library"].testSteps["GenerateReport"]
// initialise the library; which places an instance of FilterByFunction in the context
module.run(testRunner, context)
// get the instance of FilterByFunction from the context.
def GenerateReport = context.GenerateReport

//Pre Steps to be executed
def preRestStep1 = "Create_Account";
//End of Pre Steps

//Actual Test Steps to be executed
def restStep1 = "Create_Group";
def restStep2 = "Create_Group_expCat_Dup";
def restStep3 = "Create_Group_expCat_Dup_1";

//End of Test Steps//

def propertyStepName = "DataFile";
def propertyName1 = "opco";
def propertyName2 = "cust";
def propertyName3 = "user";
def propertyName4 = "inventoryId";
def propertyName5 = "itemId";
def propertyName6 = "groupId";
def propertyName7 = "supplierId";
def propertyName8 = "newQuantity";
def propertyName9 = "initialInput";
def propertyName10 = "newUom";
def propertyName11 = "additionalInput";

int rowcount = testRunner.testCase.getTestStepByName("Data").getPropertyValue("rowcount").toInteger();
	
for(int i = 1; i &lt;= rowcount;i++){				
	def propData1 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName1+i);	
	def propData2 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName2+i);
	def propData3 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName3+i);
	def propData4 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName4+i);
	def propData5 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName5+i);
	def propData6 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName6+i);
	def propData7 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName7+i);
	def propData8 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName8+i);
	def propData9 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName9+i);
	def propData10 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName10+i);
	def propData11 = testRunner.testCase.getTestStepByName("Data").getPropertyValue(propertyName11+i);

	def data = testRunner.testCase.getTestStepByName( propertyStepName );
	if(data == null)
	{
		testRunner.testCase.addTestStep( "properties", propertyStepName );
		data = testRunner.testCase.getTestStepByName( propertyStepName );
	}	
	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName1,propData1);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName2,propData2);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName3,propData3);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName4,propData4);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName5,propData5);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName6,propData6);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName7,propData7);	
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName8,propData8);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName9,propData9);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName10,propData10);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue(propertyName11,propData11);
	
	List restTestStepList = new ArrayList();
	List restStepsStatusList = new ArrayList();	

	//Execute Pre Steps
	//preRestStep1
	def preRestStep1Result = testRunner.runTestStepByName(preRestStep1);			
	restStepStatus =preRestStep1Result.getStatus().toString();
	log.info(preRestStep1+": Status::"+restStepStatus); 
	restTestStepList.add(preRestStep1);
	restStepsStatusList.add(restStepStatus);

	//End of Execute Pre Steps

	//Execute Create_Group Step
	
	def restStep1Result = testRunner.runTestStepByName(restStep1);			
	restStepStatus =restStep1Result.getStatus().toString();
	log.info(restStep1+": Status::"+restStepStatus); 
	restTestStepList.add(restStep1);
	restStepsStatusList.add(restStepStatus);

	def restStep1Response = testRunner.testCase.testSteps[restStep1].testRequest.response.contentAsString;
	def jsonrestStep1Response = new JsonSlurper().parseText(restStep1Response);
	def groupId = jsonrestStep1Response.id;
	def groupName = jsonrestStep1Response.name;
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("expCatGrpId",groupId);
	testRunner.testCase.getTestStepByName(propertyStepName).setPropertyValue("groupName",groupName);

	//Execute Create_Group_expCat_Dup Step
	
	def restStep2Result = testRunner.runTestStepByName(restStep2);			
	restStepStatus =restStep2Result.getStatus().toString();
	log.info(restStep2+": Status::"+restStepStatus); 
	restTestStepList.add(restStep2);
	restStepsStatusList.add(restStepStatus);

	//Execute Create_Group_expCat_Dup_1 Step
	
	def restStep3Result = testRunner.runTestStepByName(restStep3);			
	restStepStatus =restStep3Result.getStatus().toString();
	log.info(restStep3+": Status::"+restStepStatus); 
	restTestStepList.add(restStep3);
	restStepsStatusList.add(restStepStatus);
	
	////////////////////////////////////	
	def reportName = testRunner.testCase.testSuite.getPropertyValue("reportName"); 	
	GenerateReport.writeToExcel(reportName,restTestStepList,restStepsStatusList,false);
	
}
def tCase = testRunner.testCase.testSuite.project.testSuites["Inventory"].testCases["Config"];
def tStep = tCase.testSteps["JDBC Request"];
tStep.run(testRunner, context);</script></con:config></con:testStep><con:testStep type="properties" name="DataFile" id="3e53b662-bdf1-4735-87d9-0607d0e4450c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco</con:name><con:value>067</con:value></con:property><con:property><con:name>cust</con:name><con:value>804732</con:value></con:property><con:property><con:name>user</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId</con:name><con:value>{
  "name": "cooler",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput</con:name><con:value>{
  "name": "cooler 1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>itemId0</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId</con:name><con:value>N/A</con:value></con:property><con:property><con:name>expCatGrpId</con:name><con:value>969e5767-537b-48e3-b1fd-93a26a1c2af8</con:value></con:property><con:property><con:name>groupName</con:name><con:value>cooler</con:value></con:property><con:property><con:name>newUom</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput</con:name><con:value>{
  "name": "_cooler",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Data" id="8d200072-14f3-49b1-a466-5aad9acc286f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>opco1</con:name><con:value>067</con:value></con:property><con:property><con:name>rowcount</con:name><con:value>1</con:value></con:property><con:property><con:name>cust1</con:name><con:value>804732</con:value></con:property><con:property><con:name>user1</con:name><con:value>uomsc002</con:value></con:property><con:property><con:name>inventoryId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>itemId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>groupId1</con:name><con:value>{
  "name": "cooler",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>supplierId1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>newQuantity1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>initialInput1</con:name><con:value>{
  "name": "cooler 1",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property><con:property><con:name>newUom1</con:name><con:value>N/A</con:value></con:property><con:property><con:name>additionalInput1</con:name><con:value>{
  "name": "_cooler",
  "type": "expenseCategory",
  "storage": "cooler",
  "foodType": "food"
}</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>reportName</con:name><con:value>C:\\Users\\rohithsrinath_l\\Desktop\\Sysco_SOAPUI\\Reports\\Inv_Report_DataSet1_201605311557.xls</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>